[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/battle/Battle.js",
    "content": "import { Difficulty } from '../minigames';\r\nimport Random from '../util/Random';\r\nimport { Edge } from '../globals';\r\nimport TILES from '../dungeon/TileMappings';\r\n\r\n/**\r\n * This class manages the battle and combat logic.\r\n */\r\nexport default class Battle {\r\n  /**\r\n   * Creates the battle room\r\n   * @constructor\r\n   * @param {Room} room The room the battle is occurring in\r\n   * @param {Edge} edge The edge the player entered from\r\n   * @param {Phaser.Scene} scene The current scene\r\n   */\r\n  constructor( room, edge, scene ) {\r\n    /**\r\n     * The room the battle is occurring in\r\n     * @type {Room}\r\n     */\r\n    this.room = room;\r\n    \r\n    /**\r\n     * The edge the player entered from\r\n     * @type {Edge}\r\n     */\r\n    this.startEdge = edge;\r\n    \r\n    /**\r\n     * The current scene\r\n     * @type {Phaser.Scene}\r\n     */\r\n    this.scene = scene;\r\n    \r\n    /**\r\n     * The enemy that is currently selected in the battle\r\n     * @type {Enemy}\r\n     */\r\n    this.currentEnemy = null;\r\n    \r\n    /**\r\n     * The index of the currently selected enemy\r\n     * @type {number}\r\n     */\r\n    this.enemyIndex = 0;\r\n    \r\n    /**\r\n     * Whether or not it is the player's turn\r\n     * @type {boolean}\r\n     */\r\n    this.playerTurn = false;\r\n    \r\n    /**\r\n     * Whether or not the battle is active and running\r\n     * @type {boolean}\r\n     */\r\n    this.active = false;\r\n    \r\n    /**\r\n     * Stores information about the minigame currently being played\r\n     * @type {{ game: Phaser.Scene, enemy: Enemy }}\r\n     */\r\n    this.minigame = null;\r\n\r\n    // Cheats\r\n    // TODO: DELETE THESE\r\n    this.scene.input.keyboard.createCombo( 'KILL', { deleteOnMatch: true } );\r\n    this.scene.input.keyboard.on( 'keycombomatch', ( event ) => {\r\n      this.slayAll();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Updates the battle\r\n   */\r\n  update() {\r\n    if ( this.currentEnemy === null ) {\r\n      this.currentEnemy = this.scene.enemyGroup.getChildren()[ 0 ];\r\n      this.enemyIndex = 0;\r\n    }\r\n    else if ( this.playerTurn ) {\r\n      if ( this.scene.keys.down.isDown || this.scene.keys.right.isDown ) {\r\n        this.currentEnemy.deselect();\r\n        this.enemyIndex--;\r\n        if ( this.enemyIndex < 0 ) {\r\n          this.enemyIndex = this.scene.enemyGroup.countActive() - 1;\r\n        }\r\n        this.currentEnemy =\r\n          this.scene.enemyGroup.getChildren()[ this.enemyIndex ];\r\n        this.currentEnemy.select();\r\n        this.scene.input.keyboard.resetKeys();\r\n      }\r\n      else if ( this.scene.keys.up.isDown || this.scene.keys.left.isDown ) {\r\n        this.currentEnemy.deselect();\r\n        this.enemyIndex++;\r\n        if ( this.enemyIndex >= this.scene.enemyGroup.countActive() ) {\r\n          this.enemyIndex = 0;\r\n        }\r\n        this.currentEnemy =\r\n          this.scene.enemyGroup.getChildren()[ this.enemyIndex ];\r\n        this.currentEnemy.select();\r\n        this.scene.input.keyboard.resetKeys();\r\n      }\r\n      else if ( this.scene.keys.space.isDown ) {\r\n        this.playMinigame( this.currentEnemy );\r\n        this.scene.input.keyboard.resetKeys();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Slays all of the enemies\r\n   */\r\n  slayAll() {\r\n    this.currentEnemy = null;\r\n    this.playerTurn = false;\r\n\r\n    const enemies = this.scene.enemyGroup.getChildren();\r\n    for ( let i = enemies.length - 1; i >= 0; i-- ) {\r\n      enemies[ i ].injure( enemies[ i ].health );\r\n    }\r\n    this.scene.endCombat();\r\n  }\r\n\r\n  /**\r\n   * Begins combat inside of the a battle room\r\n   * @return {Promise} The promise when the battle has been initialized\r\n   */\r\n  begin() {\r\n    this.scene.input.keyboard.resetKeys();\r\n    this.centerCameraToRoom();\r\n    return this.lockRoom()\r\n      .then( () => this.room.spawnEnemies( this.startEdge, this.scene ) )\r\n      .then( () => {\r\n        this.scene.enemyGroup.getChildren().forEach( ( enemy ) => {\r\n          enemy.on( 'pointerdown', () => {\r\n            this.playMinigame( enemy );\r\n          } );\r\n          enemy.on( 'pointerover', () => {\r\n            this.currentEnemy.deselect();\r\n            this.currentEnemy = enemy;\r\n            this.currentEnemy.select();\r\n            this.enemyIndex =\r\n            this.scene.enemyGroup.getChildren().indexOf( enemy );\r\n          } );\r\n        } );\r\n      } )\r\n      .then( () => {\r\n        this.movePlayer();\r\n        this.active = true;\r\n        this.playerTurn = true;\r\n        this.enemyIndex = 0;\r\n        this.currentEnemy = this.scene.enemyGroup\r\n          .getChildren()[ this.enemyIndex ];\r\n        this.currentEnemy.select();\r\n      } );\r\n  }\r\n\r\n  /**\r\n   * Ends the combat inside of the battle room\r\n   * @return {Promise} The promise when the battle has ended\r\n   */\r\n  end() {\r\n    this.unlockRoom();\r\n    return this.centerCameraOnPlayer()\r\n      .then( () => {\r\n        this.active = false;\r\n      } );\r\n  }\r\n\r\n  /**\r\n   * Moves the player to face enemies\r\n   */\r\n  movePlayer() {\r\n    const callback = () => {\r\n      this.scene.player.movementDisabled = true;\r\n    };\r\n    if ( this.startEdge === Edge.TOP ) {\r\n      this.scene.player.setDestination(\r\n        this.scene.map.tileToWorldX( this.room.centerX + 0.5 ),\r\n        this.scene.map.tileToWorldY(\r\n          this.room.centerY + 0.5 - this.room.height / 4 ),\r\n        callback\r\n      );\r\n    }\r\n    else if ( this.startEdge === Edge.RIGHT ) {\r\n      this.scene.player.setDestination(\r\n        this.scene.map.tileToWorldX(\r\n          this.room.centerX + 0.5 + this.room.width / 4 ),\r\n        this.scene.map.tileToWorldY( this.room.centerY + 0.5 ),\r\n        callback\r\n      );\r\n    }\r\n    else if ( this.startEdge === Edge.BOTTOM ) {\r\n      this.scene.player.setDestination(\r\n        this.scene.map.tileToWorldX( this.room.centerX + 0.5 ),\r\n        this.scene.map.tileToWorldY(\r\n          this.room.centerY + 0.5 + this.room.height / 4 ),\r\n        callback\r\n      );\r\n    }\r\n    else if ( this.startEdge === Edge.LEFT ) {\r\n      this.scene.player.setDestination(\r\n        this.scene.map.tileToWorldX(\r\n          this.room.centerX + 0.5 - this.room.width / 4 ),\r\n        this.scene.map.tileToWorldY( this.room.centerY + 0.5 ),\r\n        callback\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops player movement and centers the camera in the battle room\r\n   */\r\n  centerCameraToRoom() {\r\n    const duration = 750;\r\n    const { centerX, centerY } = this.room;\r\n    const cX = this.scene.map.tileToWorldX( centerX + 0.5 );\r\n    const cY = this.scene.map.tileToWorldY( centerY + 0.5 );\r\n\r\n    this.scene.player.movementDisabled = true;\r\n\r\n    const camera = this.scene.cameras.main;\r\n    camera.stopFollow();\r\n    camera.pan( cX, cY, duration, 'Linear' );\r\n  }\r\n\r\n  /**\r\n   * Centers the camera on the player\r\n   * @return {Promise} The promise when the camera has been centered\r\n   */\r\n  centerCameraOnPlayer() {\r\n    const duration = 750;\r\n    this.scene.cameras.main.pan( this.scene.player.x, this.scene.player.y,\r\n      duration, 'Linear' );\r\n    return new Promise( ( resolve ) => {\r\n      setTimeout( () => {\r\n        this.scene.cameras.main.startFollow( this.scene.player );\r\n        this.scene.player.movementDisabled = false;\r\n        resolve();\r\n      }, duration );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Adds the doors to the room to lock the player in for battle\r\n   * @return {Promise} The promise when the room has been locked\r\n   */\r\n  lockRoom() {\r\n    const duration = 750;\r\n    const { x, y, doors } = this.room;\r\n    const camera = this.scene.cameras.main;\r\n\r\n    return new Promise( ( resolve, reject ) => {\r\n      setTimeout( () => {\r\n        camera.shake( 200, 0.0025 );\r\n        doors.forEach( ( door ) => {\r\n          // Top or Bottom\r\n          if ( door.edge === Edge.TOP || door.edge === Edge.BOTTOM ) {\r\n            this.scene.stuffLayer.putTilesAt( TILES.GATE.HORIZONTAL,\r\n              x + door.x - 1, y + door.y );\r\n          }\r\n          // Left or Right\r\n          else if ( door.edge === Edge.LEFT || door.edge === Edge.RIGHT ) {\r\n            this.scene.stuffLayer.putTilesAt( TILES.GATE.VERTICAL,\r\n              x + door.x, y + door.y - 1 );\r\n          }\r\n        } );\r\n        this.scene.stuffCollider.update();\r\n        this.scene.player.movementDisabled = false;\r\n        resolve();\r\n      }, duration );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Removes the doors from the room\r\n   */\r\n  unlockRoom() {\r\n    const { x, y, doors } = this.room;\r\n    doors.forEach( ( door ) => {\r\n      // Top or Bottom\r\n      if ( door.edge === Edge.TOP || door.edge === Edge.BOTTOM ) {\r\n        this.scene.stuffLayer.removeTileAt( x + door.x - 1, y + door.y );\r\n        this.scene.stuffLayer.removeTileAt( x + door.x, y + door.y );\r\n        this.scene.stuffLayer.removeTileAt( x + door.x + 1, y + door.y );\r\n      }\r\n      // Left or Right\r\n      else if ( door.edge === Edge.LEFT || door.edge === Edge.RIGHT ) {\r\n        this.scene.stuffLayer.removeTileAt( x + door.x, y + door.y - 1 );\r\n        this.scene.stuffLayer.removeTileAt( x + door.x, y + door.y );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Opens the given mini game and pauses the game until mini game is over\r\n   * @param {Enemy} enemy The enemy spawning the mini game\r\n   * @param {number} difficulty The difficulty of the mini game\r\n   */\r\n  playMinigame( enemy, difficulty = Difficulty.EASY ) {\r\n    if ( !this.playerTurn ) {\r\n      return;\r\n    }\r\n\r\n    const name = enemy.getRandomMiniGame();\r\n    this.minigame = {\r\n      game: this.scene.scene.get( name ),\r\n      enemy: enemy\r\n    };\r\n    if ( !this.minigame.game ) {\r\n      return;\r\n    }\r\n\r\n    this.scene.scene\r\n      .launch( name, {\r\n        parent: this,\r\n        difficulty: difficulty\r\n      } )\r\n      .bringToTop( name )\r\n      .pause();\r\n  }\r\n\r\n  /**\r\n   * Stops the current mini game and resumes the game\r\n   * @param {object} result The result of the mini game\r\n   */\r\n  continueCombat( result ) {\r\n    const { win, damage } = result;\r\n\r\n    this.scene.scene.stop( this.minigame.game.key );\r\n    this.scene.input.keyboard.resetKeys();\r\n    this.scene.scene.resume();\r\n\r\n    // Win\r\n    if ( win ) {\r\n      this.scene.player.attack( this.minigame.enemy, damage );\r\n      if ( this.scene.enemyGroup.countActive() === 0 ) {\r\n        this.scene.endCombat();\r\n        this.playerTurn = false;\r\n      }\r\n      else {\r\n        this.playerTurn = true;\r\n        if ( !this.minigame.enemy.active ) {\r\n          setTimeout( () => {\r\n            this.enemyIndex = 0;\r\n            this.currentEnemy = this.scene.enemyGroup\r\n              .getChildren()[ this.enemyIndex ];\r\n            this.currentEnemy.select();\r\n          }, 200 );\r\n        }\r\n      }\r\n    }\r\n    // Lose\r\n    else {\r\n      // Enemies attack\r\n      this.playerTurn = false;\r\n      this.performEnemyAttack( this.scene.enemyGroup.getChildren(), 0 )\r\n        .then( () => {\r\n          this.playerTurn = true;\r\n        } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs an enemy attack\r\n   * @param {Enemy[]} enemies The enemies attacking\r\n   * @param {number} index The index of the attacking enemy\r\n   * @return {Promise} The promise when the enemy is done attacking\r\n   */\r\n  performEnemyAttack( enemies, index ) {\r\n    this.scene.cameras.main.shake( 200, 0.0025 );\r\n    this.scene.cameras.main.flash( 200, 150, 0, 0 );\r\n\r\n    const r = new Random();\r\n    const damage = r.randInt( 1, 3 );\r\n    enemies[ index ].attack( this.scene.player, damage );\r\n    // Player is dead\r\n    if ( !this.scene.player.alive ) {\r\n      this.scene.gameOver();\r\n      return Promise.resolve();\r\n    }\r\n\r\n    // Wait 750ms, then have next enemy attack #Recursion\r\n    return new Promise( ( resolve ) => {\r\n      setTimeout( () => {\r\n        // No more enemies\r\n        if ( index === enemies.length - 1 ) {\r\n          resolve();\r\n        }\r\n        // Next enemy attack\r\n        else {\r\n          this.performEnemyAttack( enemies, index + 1 )\r\n            .then( () => resolve() );\r\n        }\r\n      }, 750 );\r\n    } );\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/battle/Battle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Battle",
    "memberof": "src/battle/Battle.js",
    "static": true,
    "longname": "src/battle/Battle.js~Battle",
    "access": "public",
    "export": true,
    "importPath": "src/battle/Battle",
    "importStyle": "Battle",
    "description": "This class manages the battle and combat logic.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#constructor",
    "access": "public",
    "description": "Creates the battle room",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room the battle is occurring in"
      },
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge",
        "description": "The edge the player entered from"
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "room",
    "memberof": "src/battle/Battle.js~Battle",
    "static": false,
    "longname": "src/battle/Battle.js~Battle#room",
    "access": "public",
    "description": "The room the battle is occurring in",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Room"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "startEdge",
    "memberof": "src/battle/Battle.js~Battle",
    "static": false,
    "longname": "src/battle/Battle.js~Battle#startEdge",
    "access": "public",
    "description": "The edge the player entered from",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Edge"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "scene",
    "memberof": "src/battle/Battle.js~Battle",
    "static": false,
    "longname": "src/battle/Battle.js~Battle#scene",
    "access": "public",
    "description": "The current scene",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Scene"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "currentEnemy",
    "memberof": "src/battle/Battle.js~Battle",
    "static": false,
    "longname": "src/battle/Battle.js~Battle#currentEnemy",
    "access": "public",
    "description": "The enemy that is currently selected in the battle",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Enemy"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "enemyIndex",
    "memberof": "src/battle/Battle.js~Battle",
    "static": false,
    "longname": "src/battle/Battle.js~Battle#enemyIndex",
    "access": "public",
    "description": "The index of the currently selected enemy",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "playerTurn",
    "memberof": "src/battle/Battle.js~Battle",
    "static": false,
    "longname": "src/battle/Battle.js~Battle#playerTurn",
    "access": "public",
    "description": "Whether or not it is the player's turn",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "active",
    "memberof": "src/battle/Battle.js~Battle",
    "static": false,
    "longname": "src/battle/Battle.js~Battle#active",
    "access": "public",
    "description": "Whether or not the battle is active and running",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "minigame",
    "memberof": "src/battle/Battle.js~Battle",
    "static": false,
    "longname": "src/battle/Battle.js~Battle#minigame",
    "access": "public",
    "description": "Stores information about the minigame currently being played",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "{ game: Phaser.Scene, enemy: Enemy }"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "update",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#update",
    "access": "public",
    "description": "Updates the battle",
    "lineNumber": 77,
    "params": [],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "slayAll",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#slayAll",
    "access": "public",
    "description": "Slays all of the enemies",
    "lineNumber": 115,
    "params": [],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "begin",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#begin",
    "access": "public",
    "description": "Begins combat inside of the a battle room",
    "lineNumber": 130,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "The promise when the battle has been initialized"
    },
    "params": []
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "end",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#end",
    "access": "public",
    "description": "Ends the combat inside of the battle room",
    "lineNumber": 164,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "The promise when the battle has ended"
    },
    "params": []
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "movePlayer",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#movePlayer",
    "access": "public",
    "description": "Moves the player to face enemies",
    "lineNumber": 175,
    "params": [],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "centerCameraToRoom",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#centerCameraToRoom",
    "access": "public",
    "description": "Stops player movement and centers the camera in the battle room",
    "lineNumber": 216,
    "params": [],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "centerCameraOnPlayer",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#centerCameraOnPlayer",
    "access": "public",
    "description": "Centers the camera on the player",
    "lineNumber": 233,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "The promise when the camera has been centered"
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "lockRoom",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#lockRoom",
    "access": "public",
    "description": "Adds the doors to the room to lock the player in for battle",
    "lineNumber": 250,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "The promise when the room has been locked"
    },
    "params": []
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "unlockRoom",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#unlockRoom",
    "access": "public",
    "description": "Removes the doors from the room",
    "lineNumber": 280,
    "params": [],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "playMinigame",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#playMinigame",
    "access": "public",
    "description": "Opens the given mini game and pauses the game until mini game is over",
    "lineNumber": 302,
    "params": [
      {
        "nullable": null,
        "types": [
          "Enemy"
        ],
        "spread": false,
        "optional": false,
        "name": "enemy",
        "description": "The enemy spawning the mini game"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "difficulty",
        "description": "The difficulty of the mini game"
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "continueCombat",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#continueCombat",
    "access": "public",
    "description": "Stops the current mini game and resumes the game",
    "lineNumber": 329,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "The result of the mini game"
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "performEnemyAttack",
    "memberof": "src/battle/Battle.js~Battle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/Battle.js~Battle#performEnemyAttack",
    "access": "public",
    "description": "Performs an enemy attack",
    "lineNumber": 372,
    "params": [
      {
        "nullable": null,
        "types": [
          "Enemy[]"
        ],
        "spread": false,
        "optional": false,
        "name": "enemies",
        "description": "The enemies attacking"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the attacking enemy"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "The promise when the enemy is done attacking"
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/battle/BattleDrop.js",
    "content": "import Random from '../util/Random';\r\nimport { BugSpray, Injection, Timelapse } from '../entity/items';\r\n\r\n/**\r\n * Contains methods for dropping items during / after battle\r\n */\r\nexport default class BattleDrop {\r\n  /**\r\n   * @param {number} x The x-position of the item\r\n   * @param {number} y The y-position of the item\r\n   * @param {Phaser.Scene} scene The current scene\r\n   */\r\n  static drop( x, y, scene ) {\r\n    const r = new Random( new Date().getTime() );\r\n    const num = r.randInt( 0, 100 );\r\n\r\n    // 40% injection\r\n    if ( num < 40 ) {\r\n      new Injection( x, y, scene );\r\n    }\r\n    // 10% timelapse\r\n    else if ( num >= 40 && num < 50 ) {\r\n      new Timelapse( x, y, scene );\r\n    }\r\n    // 15% bug spray\r\n    else if ( num >= 50 && num < 65 ) {\r\n      new BugSpray( x, y, scene );\r\n    }\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/battle/BattleDrop.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "class",
    "name": "BattleDrop",
    "memberof": "src/battle/BattleDrop.js",
    "static": true,
    "longname": "src/battle/BattleDrop.js~BattleDrop",
    "access": "public",
    "export": true,
    "importPath": "src/battle/BattleDrop",
    "importStyle": "BattleDrop",
    "description": "Contains methods for dropping items during / after battle",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "drop",
    "memberof": "src/battle/BattleDrop.js~BattleDrop",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/battle/BattleDrop.js~BattleDrop.drop",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-position of the item"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-position of the item"
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/battle/HealthBar.js",
    "content": "/**\r\n * The health bar is a generic bar to display the health of an entity\r\n */\r\nexport default class HealthBar {\r\n  /**\r\n   * @constructor\r\n   * @param {Phaser.Scene} scene The current scene\r\n   * @param {HealthBarConfig} config The altered config\r\n   */\r\n  constructor( scene, config ) {\r\n    /**\r\n     * The current scene\r\n     * @type {Phaser.Scene}\r\n     */\r\n    this.scene = scene;\r\n    \r\n    /**\r\n     * The configuration for the health bar\r\n     * @type {HealthBarConfig}\r\n     */\r\n    this.config = this._mergeWithDefaultConfig( config );\r\n    \r\n    /**\r\n     * The horizontal position in the world\r\n     * @type {number}\r\n     */\r\n    this.x = 0;\r\n    \r\n    /**\r\n     * The vertical position in the world\r\n     * @type {number}\r\n     */\r\n    this.y = 0;\r\n    \r\n    /**\r\n     * The border graphic around the health bar\r\n     * @private\r\n     * @type {Phaser.GameObjects.Rectangle}\r\n     */\r\n    this._border = null;\r\n    \r\n    /**\r\n     * The background graphic behind the health bar\r\n     * @private\r\n     * @type {Phaser.GameObjects.Rectangle}\r\n     */\r\n    this._background = null;\r\n    \r\n    /**\r\n     * The bar graphic to display the health\r\n     * @private\r\n     * @type {Phaser.GameObjects.Rectangle}\r\n     */\r\n    this._bar = null;\r\n    \r\n    this.setPosition( this.config.x, this.config.y );\r\n    this._drawBackground();\r\n    this._drawBorder();\r\n    this._drawHealthBar();\r\n  }\r\n\r\n  /**\r\n   * Merges the given config with the defaults\r\n   * @private\r\n   * @param {HealthBarConfig} config The given config\r\n   * @return {HealthBarConfig} the merged config object\r\n   */\r\n  _mergeWithDefaultConfig( config ) {\r\n    const defaultConfig = {\r\n      width: 250,\r\n      height: 40,\r\n      x: 0,\r\n      y: 0,\r\n      backgroundColor: 0x651828,\r\n      barColor: 0xFF0000,\r\n      border: {\r\n        color: 0x000000,\r\n        width: 1\r\n      },\r\n      animationDuration: 200\r\n    };\r\n    return Object.assign( {}, defaultConfig, config );\r\n  }\r\n\r\n  /**\r\n   * Draws the border of the health bar\r\n   * @private\r\n   */\r\n  _drawBorder() {\r\n    const { x, y, width, height } = this.config;\r\n    const bw = this.config.border.width;\r\n    this._border = this.scene.add.rectangle( x - bw, y - bw,\r\n      width + bw * 2, height + bw * 2 );\r\n    this._border.setStrokeStyle( this.config.border.color );\r\n    this._border.lineWidth = bw;\r\n    this._border.setOrigin( 0, 0 );\r\n  }\r\n\r\n  /**\r\n   * Draws the background of the health bar\r\n   * @private\r\n   */\r\n  _drawBackground() {\r\n    const { x, y, width, height } = this.config;\r\n    this._background = this.scene.add.rectangle( x, y, width, height,\r\n      this.config.backgroundColor );\r\n    this._background.setOrigin( 0, 0 );\r\n  }\r\n\r\n  /**\r\n   * Draws the health bar\r\n   * @private\r\n   */\r\n  _drawHealthBar() {\r\n    const { x, y, width, height } = this.config;\r\n    this._bar = this.scene.add.rectangle( x, y, width, height,\r\n      this.config.barColor );\r\n    this._bar.setOrigin( 0, 0 );\r\n  }\r\n\r\n  /**\r\n   * Destroys the health bar\r\n   */\r\n  destroy() {\r\n    this._bar.destroy();\r\n    this._border.destroy();\r\n    this._background.destroy();\r\n  }\r\n\r\n  /**\r\n   * Sets the health bar percentage\r\n   * @param {number} percent The percentage\r\n   */\r\n  setPercent( percent ) {\r\n    if ( percent < 0 ) {\r\n      percent = 0;\r\n    }\r\n    else if ( percent > 1 ) {\r\n      percent = 1;\r\n    }\r\n    this.setWidth( percent * this.config.width );\r\n  }\r\n\r\n  /**\r\n   * Sets the width of the bar\r\n   * @param {number} width The bar width\r\n   */\r\n  setWidth( width ) {\r\n    this.scene.add.tween( {\r\n      targets: this._bar,\r\n      duration: this.config.animationDuration,\r\n      width: width,\r\n      ease: 'Linear'\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Sets the bar color\r\n   * @param {number} color The new color\r\n   */\r\n  setBarColor( color ) {\r\n    if ( !this._bar ) {\r\n      return;\r\n    }\r\n\r\n    this._bar.fillColor = color;\r\n  }\r\n\r\n  /**\r\n   * Sets the position of the health bar\r\n   * @param {number} x The x-coordinate\r\n   * @param {number} y The y-coordinate\r\n   */\r\n  setPosition( x, y ) {\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    if ( this._border && this._background && this._bar ) {\r\n      this._border.setPosition( x, y );\r\n      this._background.setPosition( x, y );\r\n      this._bar.setPosition( x, y );\r\n    }\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/battle/HealthBar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "class",
    "name": "HealthBar",
    "memberof": "src/battle/HealthBar.js",
    "static": true,
    "longname": "src/battle/HealthBar.js~HealthBar",
    "access": "public",
    "export": true,
    "importPath": "src/battle/HealthBar",
    "importStyle": "HealthBar",
    "description": "The health bar is a generic bar to display the health of an entity",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 98,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      },
      {
        "nullable": null,
        "types": [
          "HealthBarConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The altered config"
      }
    ]
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "scene",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#scene",
    "access": "public",
    "description": "The current scene",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Scene"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "config",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#config",
    "access": "public",
    "description": "The configuration for the health bar",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "HealthBarConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "x",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#x",
    "access": "public",
    "description": "The horizontal position in the world",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "y",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#y",
    "access": "public",
    "description": "The vertical position in the world",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "_border",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#_border",
    "access": "private",
    "description": "The border graphic around the health bar",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.GameObjects.Rectangle"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "_background",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#_background",
    "access": "private",
    "description": "The background graphic behind the health bar",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.GameObjects.Rectangle"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "_bar",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#_bar",
    "access": "private",
    "description": "The bar graphic to display the health",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.GameObjects.Rectangle"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "_mergeWithDefaultConfig",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#_mergeWithDefaultConfig",
    "access": "private",
    "description": "Merges the given config with the defaults",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "HealthBarConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The given config"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HealthBarConfig"
      ],
      "spread": false,
      "description": "the merged config object"
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "_drawBorder",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#_drawBorder",
    "access": "private",
    "description": "Draws the border of the health bar",
    "lineNumber": 89,
    "params": [],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "_drawBackground",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#_drawBackground",
    "access": "private",
    "description": "Draws the background of the health bar",
    "lineNumber": 103,
    "params": [],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "_drawHealthBar",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#_drawHealthBar",
    "access": "private",
    "description": "Draws the health bar",
    "lineNumber": 114,
    "params": [],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#destroy",
    "access": "public",
    "description": "Destroys the health bar",
    "lineNumber": 124,
    "params": [],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "setPercent",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#setPercent",
    "access": "public",
    "description": "Sets the health bar percentage",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "percent",
        "description": "The percentage"
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "setWidth",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#setWidth",
    "access": "public",
    "description": "Sets the width of the bar",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The bar width"
      }
    ],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "setBarColor",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#setBarColor",
    "access": "public",
    "description": "Sets the bar color",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "The new color"
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/battle/HealthBar.js~HealthBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/battle/HealthBar.js~HealthBar#setPosition",
    "access": "public",
    "description": "Sets the position of the health bar",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-coordinate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-coordinate"
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/dungeon/Debug.js",
    "content": "import Tiles from './Tiles';\r\n\r\n/**\r\n * Logs the dungeon map to the console in a colored table structure\r\n * @param {Dungeon} dungeon The dungeon to map\r\n * @param {object} config The debug map configuration\r\n */\r\nexport function debugMap( dungeon, config = {} ) {\r\n  config = Object.assign(\r\n    {},\r\n    {\r\n      empty: ' ',\r\n      emptyColor: 'rgb(0, 0, 0)',\r\n      wall: '#',\r\n      wallColor: 'rgb(255, 0, 0)',\r\n      floor: '=',\r\n      floorColor: 'rgb(210, 210, 210)',\r\n      door: '.',\r\n      doorColor: 'rgb(0, 0, 255)',\r\n      start: 'S',\r\n      end: 'E',\r\n      battle: 'I',\r\n      startColor: 'rgb(0, 0, 0)',\r\n      fontSize: '15px'\r\n    },\r\n    config\r\n  );\r\n\r\n  let string = '';\r\n  const styles = [];\r\n\r\n  // First line in the browser console window has console line mapping\r\n  // (e.g. \"dungeon.js:724\") which throws off the table. Kill two birds by\r\n  // displaying a guide on the first two lines.\r\n  string += 'Dungeon: the console window should be big enough to see all of '\r\n    + 'the guide on the next line:\\n';\r\n  string += `%c|${'='.repeat( dungeon.width * 2 - 2 )}|\\n\\n`;\r\n  styles.push( `font-size: ${config.fontSize}` );\r\n\r\n  for ( let y = 0; y < dungeon.height; y += 1 ) {\r\n    for ( let x = 0; x < dungeon.width; x += 1 ) {\r\n      const tile = dungeon.tiles[ y ][ x ];\r\n      if ( tile === Tiles.EMPTY ) {\r\n        string += `%c${config.empty}`;\r\n        styles.push(\r\n          `color: ${config.emptyColor}; font-size: ${config.fontSize}` );\r\n      }\r\n      else if ( tile === Tiles.WALL ) {\r\n        string += `%c${config.wall}`;\r\n        styles.push(\r\n          `color: ${config.wallColor}; font-size: ${config.fontSize}` );\r\n      }\r\n      else if ( tile === Tiles.FLOOR ) {\r\n        string += `%c${config.floor}`;\r\n        styles.push(\r\n          `color: ${config.floorColor}; font-size: ${config.fontSize}` );\r\n      }\r\n      else if ( tile === Tiles.DOOR ) {\r\n        string += `%c${config.door}`;\r\n        styles.push(\r\n          `color: ${config.doorColor}; font-size: ${config.fontSize}` );\r\n      }\r\n      else if ( tile === Tiles.START ) {\r\n        string += `%c${config.start}`;\r\n        styles.push(\r\n          `color: ${config.startColor}; font-size: ${config.fontSize}` );\r\n      }\r\n      else if ( tile === Tiles.END ) {\r\n        string += `%c${config.end}`;\r\n        styles.push(\r\n          `color: ${config.startColor}; font-size: ${config.fontSize}` );\r\n      }\r\n      else if ( tile === Tiles.ITEM ) {\r\n        string += `%c${config.battle}`;\r\n        styles.push(\r\n          `color: ${config.startColor}; font-size: ${config.fontSize}` );\r\n      }\r\n      string += ' ';\r\n    }\r\n    string += '\\n';\r\n  }\r\n  console.log( string, ...styles );\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/dungeon/Debug.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "debugMap",
    "memberof": "src/dungeon/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dungeon/Debug.js~debugMap",
    "access": "public",
    "export": true,
    "importPath": "src/dungeon/Debug",
    "importStyle": "{debugMap}",
    "description": "Logs the dungeon map to the console in a colored table structure",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "Dungeon"
        ],
        "spread": false,
        "optional": false,
        "name": "dungeon",
        "description": "The dungeon to map"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The debug map configuration"
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/dungeon/Dungeon.js",
    "content": "import Random from '../util/Random';\r\nimport { Room, RoomType } from './Room';\r\nimport Tiles from './Tiles';\r\nimport Hallway from './Hallway';\r\nimport { Direction } from '../globals';\r\n\r\n/**\r\n * The default config for the dungeon\r\n * @type {DungeonConfig}\r\n */\r\nconst baseConfig = {\r\n  width: 55,\r\n  height: 55,\r\n  randomSeed: undefined,\r\n  doorPadding: 1,\r\n  rooms: {\r\n    width: {\r\n      min: 7,\r\n      max: 21,\r\n      even: false\r\n    },\r\n    height: {\r\n      min: 7,\r\n      max: 17,\r\n      even: false\r\n    },\r\n    maxArea: 250,\r\n    maxRooms: 50\r\n  }\r\n};\r\n\r\n/**\r\n * The minimum length of a hallway between two rooms\r\n * @type {number}\r\n */\r\nconst MIN_HALL_LENGTH = 2;\r\n\r\n/**\r\n * The maximum length of a hallway between two rooms\r\n * @type {number}\r\n */\r\nconst MAX_HALL_LENGTH = 8;\r\n\r\n/**\r\n * The minimum width of a room regardless of the dungeon's config\r\n * @type {number}\r\n */\r\nconst MIN_WIDTH = 3;\r\n\r\n/**\r\n * The minimum height of a room regardless of the dungeon's config\r\n * @type {number}\r\n */\r\nconst MIN_HEIGHT = 3;\r\n\r\n/**\r\n * The number of times to attempt placing a room in the dungeon\r\n * @type {number}\r\n */\r\nconst MAX_RETRY_COUNT = 150;\r\n\r\n/**\r\n * The dungeon class to generate dungeon rooms and positions\r\n */\r\nexport default class Dungeon {\r\n  /**\r\n   * @constructor\r\n   * @param {DungeonConfig} config\r\n   */\r\n  constructor( config = {} ) {\r\n    const rooms = config.rooms || {};\r\n    rooms.width = Object.assign( {}, baseConfig.rooms.width, rooms.width );\r\n    rooms.height = Object.assign( {}, baseConfig.rooms.height, rooms.height );\r\n    rooms.maxArea = rooms.maxArea || baseConfig.rooms.maxArea;\r\n    rooms.maxRooms = rooms.maxRooms || baseConfig.rooms.maxRooms;\r\n\r\n    // Clamp room size\r\n    rooms.width.min = Math.max( MIN_WIDTH, rooms.width.min );\r\n    rooms.height.min = Math.max( MIN_HEIGHT, rooms.height.min );\r\n    rooms.width.max = Math.max( rooms.width.max, rooms.width.min );\r\n    rooms.height.max = Math.max( rooms.height.max, rooms.height.min );\r\n\r\n    // Avoid an impossibly small maxArea\r\n    const minArea = rooms.width.min * rooms.height.min;\r\n    rooms.maxArea = Math.max( rooms.maxArea, minArea );\r\n\r\n    /**\r\n     * The number of tiles required on each side of a door\r\n     * @type {number}\r\n     */\r\n    this.doorPadding = config.doorPadding || baseConfig.doorPadding;\r\n    \r\n    /**\r\n     * The width of the dungeon in tiles\r\n     * @type {number}\r\n     */\r\n    this.width = config.width || baseConfig.width;\r\n    \r\n    /**\r\n     * The height of the dungeon in tiles\r\n     * @type {number}\r\n     */\r\n    this.height = config.height || baseConfig.height;\r\n    \r\n    /**\r\n     * The configuration for room generation\r\n     * @type {RoomConfig}\r\n     */\r\n    this.roomConfig = rooms;\r\n\r\n    /**\r\n     * The list of rooms in the dungeon\r\n     * @type {Array.<Room>}\r\n     */\r\n    this.rooms = [];\r\n    \r\n    /**\r\n     * The random number generator\r\n     * @private\r\n     * @type {Random}\r\n     */\r\n    this.r = new Random( config.randomSeed );\r\n\r\n    /**\r\n     * 2D grid matching map dimensions where every element contains an array of\r\n     * all the rooms in that location\r\n     * @type {Array.<Array.<Array.<Room>>>}\r\n     */\r\n    this.roomGrid = [];\r\n\r\n    /**\r\n     * A map of the connections between rooms and hallways\r\n     * @type {Object}\r\n     */\r\n    this.connections = {};\r\n    \r\n    /**\r\n     * The starting room for the dungeon\r\n     * @type {Room}\r\n     */\r\n    this.startRoom = null;\r\n\r\n    this.generate();\r\n    \r\n    /**\r\n     * The full map of the dungeon\r\n     * @type {Array.<Array.<Tiles>>}\r\n     */\r\n    this.tiles = this.getTiles();\r\n    \r\n    this.rooms.forEach( ( room ) => room.updateDoorPositions() );\r\n  }\r\n\r\n  /**\r\n   * Generates the dungeon and populates it with rooms and hallways\r\n   */\r\n  generate() {\r\n    // Populate empty 2D array\r\n    for ( let r = 0; r < this.height; r++ ) {\r\n      this.roomGrid.push( [] );\r\n      for ( let c = 0; c < this.width; c++ ) {\r\n        this.roomGrid[ r ].push( [] );\r\n      }\r\n    }\r\n\r\n    // Seed the map with a starting randomly sized room in the center of the map\r\n    const room = this.createRandomRoom();\r\n    room.setPosition(\r\n      Math.floor( this.width / 2 ) - Math.floor( room.width / 2 ),\r\n      Math.floor( this.height / 2 ) - Math.floor( room.height / 2 )\r\n    );\r\n    this.addRoom( room );\r\n    this.connections[ room.id ] = [];\r\n\r\n    // Continue generating rooms until we hit the cap or have hit the maximum\r\n    // iterations (usually due to not being able to fit more rooms)\r\n    let i = this.roomConfig.maxRooms * 5;\r\n    while ( this.rooms.length < this.roomConfig.maxRooms && i > 0 ) {\r\n      this.generateRoom();\r\n      i -= 1;\r\n    }\r\n\r\n    // Try to make 2 more random hallways\r\n    this.generateRandomHallways();\r\n\r\n    // Select item rooms\r\n    this.selectItemRooms();\r\n\r\n    // Pick the starting room\r\n    this.selectStartRoom();\r\n\r\n    // Pick the ending room\r\n    this.selectEndRoom();\r\n  }\r\n\r\n  /**\r\n   * Creates a room of random width and height\r\n   * @private\r\n   * @return {Room} the created room\r\n   */\r\n  createRandomRoom() {\r\n    let width = 0;\r\n    let height = 0;\r\n    let area = 0;\r\n\r\n    // Find width and height using min/max sizes while keeping under maxArea\r\n    const config = this.roomConfig;\r\n    do {\r\n      width = this.r.randInt( config.width.min, config.width.max,\r\n        config.width.even );\r\n      height = this.r.randInt( config.height.min, config.height.max,\r\n        config.height.even );\r\n      area = width * height;\r\n    } while ( area > config.maxArea );\r\n\r\n    return new Room( width, height );\r\n  }\r\n\r\n  /**\r\n   * Creates a new room and tries to add it to the dungeon\r\n   * @private\r\n   */\r\n  generateRoom() {\r\n    const room = this.createRandomRoom();\r\n\r\n    let i = MAX_RETRY_COUNT;\r\n    while ( i > 0 ) {\r\n      // Attempt to find another room to attach this one to\r\n      const result = this.findRoomAttachment( room );\r\n      room.setPosition( result.x, result.y );\r\n\r\n      // Try to add it. If successful, add the door and hallway between\r\n      if ( this.addRoom( room ) ) {\r\n        const [ door1, door2 ] =\r\n          this.findNewDoorLocation( room, result );\r\n\r\n        // Try to add hallway, if unsuccessful, remove room\r\n        if ( this.addHallway( door1, door2, result.dist ) ) {\r\n          this.connections[ room.id ] = [ result.target.id ];\r\n          this.connections[ result.target.id ].push( room.id );\r\n\r\n          this.addDoor( door1 );\r\n          this.addDoor( door2 );\r\n          break;\r\n        }\r\n        else {\r\n          this.removeRoom( room );\r\n        }\r\n      }\r\n\r\n      i -= 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates two random hallways between two random rooms to try and make a\r\n   * loop in the dungeon.\r\n   * @private\r\n   */\r\n  generateRandomHallways() {\r\n    let count = 0;\r\n    let retries = MAX_RETRY_COUNT;\r\n\r\n    do {\r\n      retries--;\r\n\r\n      /** @type Room */\r\n      const room1 = this.r.randPick(\r\n        this.rooms.filter( ( room ) => !( room instanceof Hallway ) )\r\n      );\r\n\r\n      /** @type Room */\r\n      const room2 = this.r.randPick(\r\n        this.rooms.filter(\r\n          ( room ) => !( room instanceof Hallway ) && room.id !== room1.id )\r\n      );\r\n\r\n      // Prevent multiple connections between the same room\r\n      if ( this.connections[ room1.id ].indexOf( room2.id ) >= 0 ) {\r\n        continue;\r\n      }\r\n\r\n      // Get the direction of the hallway\r\n      let direction;\r\n      if ( room1.overlapsX( room2 ) ) {\r\n        if ( room1.top < room2.top ) {\r\n          direction = Direction.NORTH;\r\n        }\r\n        else {\r\n          direction = Direction.SOUTH;\r\n        }\r\n      }\r\n      else if ( room1.overlapsY( room2 ) ) {\r\n        if ( room1.left < room2.left ) {\r\n          direction = Direction.WEST;\r\n        }\r\n        else {\r\n          direction = Direction.EAST;\r\n        }\r\n      }\r\n      else {\r\n        // No hallway possible\r\n        continue;\r\n      }\r\n\r\n      const [ door1, door2 ] = this.findNewDoorLocation( room1,\r\n        {\r\n          target: room2,\r\n          direction: direction\r\n        } );\r\n      const dist = Math.sqrt( Math.pow( door1.x - door2.x, 2 ) +\r\n        Math.pow( door1.y - door2.y, 2 ) );\r\n\r\n      // Make sure the doors are not on the corners of the room\r\n      if ( room1.isCorner( door1 ) || room2.isCorner( door2 ) ) {\r\n        continue;\r\n      }\r\n\r\n      // Try to add the hallway\r\n      if ( this.addHallway( door1, door2, dist - 1 ) ) {\r\n        this.connections[ room1.id ].push( room2.id );\r\n        this.connections[ room2.id ].push( room1.id );\r\n\r\n        this.addDoor( door1 );\r\n        this.addDoor( door2 );\r\n        count++;\r\n      }\r\n    } while ( retries > 0 && count < 3 );\r\n  }\r\n\r\n  /**\r\n   * Selects the rooms in the dungeon that are small and places items in them\r\n   * @private\r\n   */\r\n  selectItemRooms() {\r\n    this.rooms\r\n      .filter( ( room ) => room.type !== RoomType.HALLWAY )\r\n      .sort( ( a, b ) => a.area < b.area ? -1 : ( a.area === b.area ? 0 : 1 ) )\r\n      .slice( 0, 5 )\r\n      .forEach( ( room ) => {\r\n        room.type = RoomType.ITEM;\r\n      } );\r\n  }\r\n\r\n  /**\r\n   * Selects the starting room\r\n   * @private\r\n   */\r\n  selectStartRoom() {\r\n    /**\r\n     * The starting room\r\n     * @type Room\r\n     */\r\n    let sRoom;\r\n    do {\r\n      sRoom = this.r.randPick(\r\n        this.rooms.filter( ( room ) => !( room instanceof Hallway ) )\r\n      );\r\n    } while ( this.connections[ sRoom.id ].length < 3 );\r\n    sRoom.type = RoomType.START;\r\n    sRoom.tiles[ sRoom.centerY - sRoom.y ][ sRoom.centerX - sRoom.x ]\r\n      = Tiles.START; // TODO: remove, for visualizations\r\n    this.startRoom = sRoom;\r\n  }\r\n\r\n  /**\r\n   * Selects the ending room\r\n   * @private\r\n   */\r\n  selectEndRoom() {\r\n    /**\r\n     * The end room\r\n     * @type Room\r\n     */\r\n    let eRoom;\r\n    do {\r\n      eRoom = this.r.randPick(\r\n        this.rooms.filter( ( room ) => !( room instanceof Hallway ) )\r\n      );\r\n    } while ( this.connections[ eRoom.id ].length >= 2 );\r\n    eRoom.type = RoomType.START;\r\n    eRoom.tiles[ eRoom.centerY - eRoom.y ][ eRoom.centerX - eRoom.x ]\r\n      = Tiles.END; // TODO: remove, for visualizations\r\n  }\r\n\r\n  /**\r\n   * Adds a room to the current dungeon\r\n   * @private\r\n   * @param {Room} room The room to add\r\n   * @return {boolean} True if the room was successfully added\r\n   */\r\n  addRoom( room ) {\r\n    // if the room won't fit, we don't add it\r\n    if ( !this.canFitRoom( room ) ) {\r\n      return false;\r\n    }\r\n\r\n    room.id = this.rooms.length;\r\n    this.rooms.push( room );\r\n\r\n    // Update all tiles in the roomGrid to indicate that this room is sitting\r\n    // on them.\r\n    for ( let r = room.top; r <= room.bottom; r++ ) {\r\n      for ( let c = room.left; c <= room.right; c++ ) {\r\n        this.roomGrid[ r ][ c ].push( room );\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Removes a room from the current dungeon\r\n   * @private\r\n   * @param {Room} room The room to remove\r\n   */\r\n  removeRoom( room ) {\r\n    this.rooms = this.rooms.filter( ( r ) => r !== room );\r\n    for ( let r = room.top; r <= room.bottom; r++ ) {\r\n      for ( let c = room.left; c <= room.right; c++ ) {\r\n        this.roomGrid[ r ][ c ] =\r\n          this.roomGrid[ r ][ c ].filter( ( r ) => r !== room );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a door between rooms in a dungeon\r\n   * @private\r\n   * @param {TilePosition} position The position of the door\r\n   */\r\n  addDoor( position ) {\r\n    // Get all the rooms at the location of the door\r\n    const rooms = this.roomGrid[ position.y ][ position.x ];\r\n    for ( const room of rooms ) {\r\n      // convert the door position from world space to room space\r\n      const x = position.x - room.x;\r\n      const y = position.y - room.y;\r\n\r\n      // set the tile to be a door\r\n      room.tiles[ y ][ x ] = Tiles.DOOR;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a hallway between two doors in the dungeon\r\n   * @private\r\n   * @param {TilePosition} door1 The first door\r\n   * @param {TilePosition} door2 The second door\r\n   * @param {number} dist The distance between the two doors\r\n   * @return {boolean} True if the hallway could be added (or no hallway)\r\n   */\r\n  addHallway( door1, door2, dist ) {\r\n    if ( dist < MIN_HALL_LENGTH ) {\r\n      return false;\r\n    }\r\n\r\n    // No hallway if doors are next to each other\r\n    if ( dist === 0 ) {\r\n      return true;\r\n    }\r\n    return this.addRoom( Hallway.fromDoors( door1, door2 ) );\r\n  }\r\n\r\n  /**\r\n   * Finds a room that the given room can be placed next to\r\n   * @private\r\n   * @param {Room} room The room to place\r\n   * @return {RoomAttachment} The position for the new room and target room\r\n   */\r\n  findRoomAttachment( room ) {\r\n    // Pick a random room (filter out the hallways)\r\n    const r = this.r.randPick(\r\n      this.rooms.filter( ( room ) => !( room instanceof Hallway ) )\r\n    );\r\n\r\n    let x = 0;\r\n    let y = 0;\r\n    const pad = 2 * this.doorPadding;\r\n\r\n    // The distance between the rooms\r\n    const dist = this.r.randInt( MIN_HALL_LENGTH, MAX_HALL_LENGTH );\r\n    const direction = this.r.randDirection();\r\n\r\n    // Randomly position this room on one of the sides of the random room\r\n    switch ( direction ) {\r\n      case Direction.NORTH:\r\n        x = this.r.randInt( r.left - ( room.width - 1 ) + pad, r.right - pad );\r\n        y = r.top - room.height - dist;\r\n        break;\r\n      case Direction.WEST:\r\n        x = r.left - room.width - dist;\r\n        y = this.r.randInt( r.top - ( room.height - 1 ) + pad, r.bottom - pad );\r\n        break;\r\n      case Direction.EAST:\r\n        x = r.right + 1 + dist;\r\n        y = this.r.randInt( r.top - ( room.height - 1 ) + pad, r.bottom - pad );\r\n        break;\r\n      case Direction.SOUTH:\r\n        x = this.r.randInt( r.left - ( room.width - 1 ) + pad, r.right - pad );\r\n        y = r.bottom + 1 + dist;\r\n        break;\r\n    }\r\n\r\n    return {\r\n      x: x,\r\n      y: y,\r\n      target: r,\r\n      dist: dist,\r\n      direction: direction\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets the location for the two new doors\r\n   * @private\r\n   * @param {Room} room1 The first room\r\n   * @param {{target: Room, direction: Direction}} obj The second room and\r\n   *          direction\r\n   * @return {Array.<TilePosition>} an array of door positions\r\n   */\r\n  findNewDoorLocation( room1, { target: room2, direction } ) {\r\n    const door1 = {\r\n      x: -1,\r\n      y: -1\r\n    };\r\n    const door2 = {\r\n      x: -1,\r\n      y: -1\r\n    };\r\n\r\n    if ( Direction.NORTH === direction ) {\r\n      door1.x = door2.x = this.r.randInt(\r\n        Math.floor( Math.max( room2.left, room1.left ) + this.doorPadding ),\r\n        Math.floor( Math.min( room2.right, room1.right ) - this.doorPadding )\r\n      );\r\n      door1.y = room1.y + room1.height - 1;\r\n      door2.y = room2.y;\r\n    }\r\n    else if ( Direction.WEST === direction ) {\r\n      door1.x = room1.x + room1.width - 1;\r\n      door2.x = room2.x;\r\n      door1.y = door2.y = this.r.randInt(\r\n        Math.floor( Math.max( room2.top, room1.top ) + this.doorPadding ),\r\n        Math.floor( Math.min( room2.bottom, room1.bottom ) - this.doorPadding )\r\n      );\r\n    }\r\n    else if ( Direction.EAST === direction ) {\r\n      // East\r\n      door1.x = room1.x;\r\n      door2.x = room2.x + room2.width - 1;\r\n      door1.y = door2.y = this.r.randInt(\r\n        Math.floor( Math.max( room2.top, room1.top ) + this.doorPadding ),\r\n        Math.floor( Math.min( room2.bottom, room1.bottom ) - this.doorPadding )\r\n      );\r\n    }\r\n    else if ( Direction.SOUTH === direction ) {\r\n      // South\r\n      door1.x = door2.x = this.r.randInt(\r\n        Math.floor( Math.max( room2.left, room1.left ) + this.doorPadding ),\r\n        Math.floor( Math.min( room2.right, room1.right ) - this.doorPadding )\r\n      );\r\n      door1.y = room1.y;\r\n      door2.y = room2.y + room2.height - 1;\r\n    }\r\n\r\n    return [ door1, door2 ];\r\n  }\r\n\r\n  /**\r\n   * Checks to see if the given room can fit inside the dungeon\r\n   * @private\r\n   * @param {Room} room The room to check\r\n   * @return {boolean} True if the room can fit in the dungeon\r\n   */\r\n  canFitRoom( room ) {\r\n    // Make sure the room fits inside the dungeon\r\n    if ( room.x < 0 || room.x + room.width > this.width - 1 ) {\r\n      return false;\r\n    }\r\n    if ( room.y < 0 || room.y + room.height > this.height - 1 ) {\r\n      return false;\r\n    }\r\n\r\n    // Make sure this room doesn't intersect any existing rooms\r\n    for ( let i = 0; i < this.rooms.length; i++ ) {\r\n      if ( room.overlaps( this.rooms[ i ] ) ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gets the full map of the dungeon\r\n   * @return {Array.<Array.<Tiles>>} 2D map of the dungeon\r\n   */\r\n  getTiles() {\r\n    const tiles = Array( this.height );\r\n    for ( let r = 0; r < this.height; r++ ) {\r\n      tiles[ r ] = Array( this.width );\r\n      for ( let c = 0; c < this.width; c++ ) {\r\n        tiles[ r ][ c ] = Tiles.EMPTY;\r\n      }\r\n    }\r\n\r\n    // Fill in the map with details from each room\r\n    for ( const room of this.rooms ) {\r\n      for ( let r = 0; r < room.height; r++ ) {\r\n        for ( let c = 0; c < room.width; c++ ) {\r\n          tiles[ r + room.y ][ c + room.x ] = room.tiles[ r ][ c ];\r\n        }\r\n      }\r\n    }\r\n\r\n    return tiles;\r\n  }\r\n\r\n  /**\r\n   * Gets the room at the specified location\r\n   * @param {number} x The horizontal tile position\r\n   * @param {number} y The vertical tile position\r\n   * @return {Room|null} The room at the coordinate\r\n   */\r\n  getRoomAt( x, y ) {\r\n    if ( x < 0 || y < 0 || x >= this.width || y >= this.height ) {\r\n      return null;\r\n    }\r\n    return this.roomGrid[ y ][ x ][ 0 ]; // Assumes 1 room per tile\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/dungeon/Dungeon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "baseConfig",
    "memberof": "src/dungeon/Dungeon.js",
    "static": true,
    "longname": "src/dungeon/Dungeon.js~baseConfig",
    "access": "public",
    "export": false,
    "importPath": "src/dungeon/Dungeon",
    "importStyle": null,
    "description": "The default config for the dungeon",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "DungeonConfig"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "MIN_HALL_LENGTH",
    "memberof": "src/dungeon/Dungeon.js",
    "static": true,
    "longname": "src/dungeon/Dungeon.js~MIN_HALL_LENGTH",
    "access": "public",
    "export": false,
    "importPath": "src/dungeon/Dungeon",
    "importStyle": null,
    "description": "The minimum length of a hallway between two rooms",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "MAX_HALL_LENGTH",
    "memberof": "src/dungeon/Dungeon.js",
    "static": true,
    "longname": "src/dungeon/Dungeon.js~MAX_HALL_LENGTH",
    "access": "public",
    "export": false,
    "importPath": "src/dungeon/Dungeon",
    "importStyle": null,
    "description": "The maximum length of a hallway between two rooms",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "MIN_WIDTH",
    "memberof": "src/dungeon/Dungeon.js",
    "static": true,
    "longname": "src/dungeon/Dungeon.js~MIN_WIDTH",
    "access": "public",
    "export": false,
    "importPath": "src/dungeon/Dungeon",
    "importStyle": null,
    "description": "The minimum width of a room regardless of the dungeon's config",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "MIN_HEIGHT",
    "memberof": "src/dungeon/Dungeon.js",
    "static": true,
    "longname": "src/dungeon/Dungeon.js~MIN_HEIGHT",
    "access": "public",
    "export": false,
    "importPath": "src/dungeon/Dungeon",
    "importStyle": null,
    "description": "The minimum height of a room regardless of the dungeon's config",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "MAX_RETRY_COUNT",
    "memberof": "src/dungeon/Dungeon.js",
    "static": true,
    "longname": "src/dungeon/Dungeon.js~MAX_RETRY_COUNT",
    "access": "public",
    "export": false,
    "importPath": "src/dungeon/Dungeon",
    "importStyle": null,
    "description": "The number of times to attempt placing a room in the dungeon",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "class",
    "name": "Dungeon",
    "memberof": "src/dungeon/Dungeon.js",
    "static": true,
    "longname": "src/dungeon/Dungeon.js~Dungeon",
    "access": "public",
    "export": true,
    "importPath": "src/dungeon/Dungeon",
    "importStyle": "Dungeon",
    "description": "The dungeon class to generate dungeon rooms and positions",
    "lineNumber": 65,
    "interface": false
  },
  {
    "__docId__": 130,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DungeonConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "doorPadding",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#doorPadding",
    "access": "public",
    "description": "The number of tiles required on each side of a door",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "width",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#width",
    "access": "public",
    "description": "The width of the dungeon in tiles",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "height",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#height",
    "access": "public",
    "description": "The height of the dungeon in tiles",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "roomConfig",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#roomConfig",
    "access": "public",
    "description": "The configuration for room generation",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "RoomConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "rooms",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#rooms",
    "access": "public",
    "description": "The list of rooms in the dungeon",
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "Array.<Room>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "r",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#r",
    "access": "private",
    "description": "The random number generator",
    "lineNumber": 122,
    "type": {
      "nullable": null,
      "types": [
        "Random"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "roomGrid",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#roomGrid",
    "access": "public",
    "description": "2D grid matching map dimensions where every element contains an array of\nall the rooms in that location",
    "lineNumber": 129,
    "type": {
      "nullable": null,
      "types": [
        "Array.<Array.<Array.<Room>>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "connections",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#connections",
    "access": "public",
    "description": "A map of the connections between rooms and hallways",
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "startRoom",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#startRoom",
    "access": "public",
    "description": "The starting room for the dungeon",
    "lineNumber": 141,
    "type": {
      "nullable": null,
      "types": [
        "Room"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "tiles",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#tiles",
    "access": "public",
    "description": "The full map of the dungeon",
    "lineNumber": 149,
    "type": {
      "nullable": null,
      "types": [
        "Array.<Array.<Tiles>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "generate",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#generate",
    "access": "public",
    "description": "Generates the dungeon and populates it with rooms and hallways",
    "lineNumber": 157,
    "params": [],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "createRandomRoom",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#createRandomRoom",
    "access": "private",
    "description": "Creates a room of random width and height",
    "lineNumber": 201,
    "return": {
      "nullable": null,
      "types": [
        "Room"
      ],
      "spread": false,
      "description": "the created room"
    },
    "params": []
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "generateRoom",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#generateRoom",
    "access": "private",
    "description": "Creates a new room and tries to add it to the dungeon",
    "lineNumber": 223,
    "params": [],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "generateRandomHallways",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#generateRandomHallways",
    "access": "private",
    "description": "Generates two random hallways between two random rooms to try and make a\nloop in the dungeon.",
    "lineNumber": 260,
    "params": [],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "selectItemRooms",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#selectItemRooms",
    "access": "private",
    "description": "Selects the rooms in the dungeon that are small and places items in them",
    "lineNumber": 335,
    "params": [],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "selectStartRoom",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#selectStartRoom",
    "access": "private",
    "description": "Selects the starting room",
    "lineNumber": 349,
    "params": [],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "selectEndRoom",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#selectEndRoom",
    "access": "private",
    "description": "Selects the ending room",
    "lineNumber": 370,
    "params": [],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "addRoom",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#addRoom",
    "access": "private",
    "description": "Adds a room to the current dungeon",
    "lineNumber": 392,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to add"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the room was successfully added"
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "removeRoom",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#removeRoom",
    "access": "private",
    "description": "Removes a room from the current dungeon",
    "lineNumber": 416,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to remove"
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "addDoor",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#addDoor",
    "access": "private",
    "description": "Adds a door between rooms in a dungeon",
    "lineNumber": 431,
    "params": [
      {
        "nullable": null,
        "types": [
          "TilePosition"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "The position of the door"
      }
    ],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "addHallway",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#addHallway",
    "access": "private",
    "description": "Adds a hallway between two doors in the dungeon",
    "lineNumber": 452,
    "params": [
      {
        "nullable": null,
        "types": [
          "TilePosition"
        ],
        "spread": false,
        "optional": false,
        "name": "door1",
        "description": "The first door"
      },
      {
        "nullable": null,
        "types": [
          "TilePosition"
        ],
        "spread": false,
        "optional": false,
        "name": "door2",
        "description": "The second door"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dist",
        "description": "The distance between the two doors"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the hallway could be added (or no hallway)"
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "findRoomAttachment",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#findRoomAttachment",
    "access": "private",
    "description": "Finds a room that the given room can be placed next to",
    "lineNumber": 470,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to place"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RoomAttachment"
      ],
      "spread": false,
      "description": "The position for the new room and target room"
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "findNewDoorLocation",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#findNewDoorLocation",
    "access": "private",
    "description": "Gets the location for the two new doors",
    "lineNumber": 521,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room1",
        "description": "The first room"
      },
      {
        "nullable": null,
        "types": [
          "{target: Room, direction: Direction}"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The second room and\n         direction"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<TilePosition>"
      ],
      "spread": false,
      "description": "an array of door positions"
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "canFitRoom",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#canFitRoom",
    "access": "private",
    "description": "Checks to see if the given room can fit inside the dungeon",
    "lineNumber": 575,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the room can fit in the dungeon"
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "getTiles",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#getTiles",
    "access": "public",
    "description": "Gets the full map of the dungeon",
    "lineNumber": 597,
    "return": {
      "nullable": null,
      "types": [
        "Array.<Array.<Tiles>>"
      ],
      "spread": false,
      "description": "2D map of the dungeon"
    },
    "params": []
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "getRoomAt",
    "memberof": "src/dungeon/Dungeon.js~Dungeon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Dungeon.js~Dungeon#getRoomAt",
    "access": "public",
    "description": "Gets the room at the specified location",
    "lineNumber": 624,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The horizontal tile position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The vertical tile position"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Room",
        "null"
      ],
      "spread": false,
      "description": "The room at the coordinate"
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "src/dungeon/Hallway.js",
    "content": "import { Room, RoomType } from './Room';\r\nimport Tiles from './Tiles';\r\nimport { Orientation } from '../globals';\r\n\r\n/**\r\n * A hallway is a simplified room that is used as a connector between two other\r\n * rooms.\r\n */\r\nexport default class Hallway extends Room {\r\n  /**\r\n   * @constructor\r\n   * @param {number} width The width of the hallway\r\n   * @param {number} height The height of the hallway\r\n   */\r\n  constructor( width, height ) {\r\n    super( width, height );\r\n    \r\n    /**\r\n     * The type of room\r\n     * @type {RoomType}\r\n     */\r\n    this.type = RoomType.HALLWAY;\r\n  }\r\n\r\n  /**\r\n   * Creates a Hallway from the given two doors\r\n   * @param {TilePosition} door1 The first door\r\n   * @param {TilePosition} door2 The second door\r\n   * @return {Hallway} The constructed hallway\r\n   */\r\n  static fromDoors( door1, door2 ) {\r\n    let hallway;\r\n    if ( door1.x === door2.x ) { // Vertical Hallway\r\n      hallway = new Hallway( 3, Math.abs( door1.y - door2.y ) - 1 );\r\n      hallway.setPosition( door1.x - 1, Math.min( door1.y, door2.y ) + 1 );\r\n\r\n      for ( let r = 0; r < hallway.height; r++ ) {\r\n        hallway.tiles[ r ][ 1 ] = Tiles.FLOOR;\r\n      }\r\n\r\n      hallway.orientation = Orientation.VERTICAL;\r\n    }\r\n    else if ( door1.y === door2.y ) { // Horizontal Hallway\r\n      hallway = new Hallway( Math.abs( door1.x - door2.x ) - 1, 3 );\r\n      hallway.setPosition( Math.min( door1.x, door2.x ) + 1, door1.y - 1 );\r\n\r\n      for ( let c = 0; c < hallway.width; c++ ) {\r\n        hallway.tiles[ 1 ][ c ] = Tiles.FLOOR;\r\n      }\r\n\r\n      hallway.orientation = Orientation.HORIZONTAL;\r\n    }\r\n    return hallway;\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/dungeon/Hallway.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "class",
    "name": "Hallway",
    "memberof": "src/dungeon/Hallway.js",
    "static": true,
    "longname": "src/dungeon/Hallway.js~Hallway",
    "access": "public",
    "export": true,
    "importPath": "src/dungeon/Hallway",
    "importStyle": "Hallway",
    "description": "A hallway is a simplified room that is used as a connector between two other\nrooms.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/dungeon/Room.js~Room"
    ]
  },
  {
    "__docId__": 161,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/dungeon/Hallway.js~Hallway",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Hallway.js~Hallway#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width of the hallway"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height of the hallway"
      }
    ]
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "type",
    "memberof": "src/dungeon/Hallway.js~Hallway",
    "static": false,
    "longname": "src/dungeon/Hallway.js~Hallway#type",
    "access": "public",
    "description": "The type of room",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "RoomType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "fromDoors",
    "memberof": "src/dungeon/Hallway.js~Hallway",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dungeon/Hallway.js~Hallway.fromDoors",
    "access": "public",
    "description": "Creates a Hallway from the given two doors",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "TilePosition"
        ],
        "spread": false,
        "optional": false,
        "name": "door1",
        "description": "The first door"
      },
      {
        "nullable": null,
        "types": [
          "TilePosition"
        ],
        "spread": false,
        "optional": false,
        "name": "door2",
        "description": "The second door"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Hallway"
      ],
      "spread": false,
      "description": "The constructed hallway"
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/dungeon/Room.js",
    "content": "import Tiles from './Tiles';\r\nimport { Edge, RoomType } from '../globals';\r\nimport { Enemy } from '../entity';\r\nimport ItemDrop from '../entity/items/ItemDrop';\r\n\r\n/**\r\n * Describes how enemies will spawn based on the entry direction of the player\r\n * @type {Map.<Direction,Map.<number, object>>}\r\n */\r\nconst enemySpawnMap = {\r\n  0: {\r\n    2: {\r\n      start: Math.PI / 4,\r\n      inc: Math.PI / 2\r\n    },\r\n    3: {\r\n      start: Math.PI / 4,\r\n      inc: Math.PI / 4\r\n    },\r\n    4: {\r\n      start: Math.PI / 8,\r\n      inc: Math.PI / 4\r\n    }\r\n  },\r\n  1: {\r\n    2: {\r\n      start: 3 * Math.PI / 4,\r\n      inc: Math.PI / 2\r\n    },\r\n    3: {\r\n      start: 3 * Math.PI / 4,\r\n      inc: Math.PI / 4\r\n    },\r\n    4: {\r\n      start: 5 * Math.PI / 8,\r\n      inc: Math.PI / 4\r\n    }\r\n  },\r\n  2: {\r\n    2: {\r\n      start: -Math.PI / 4,\r\n      inc: -Math.PI / 2\r\n    },\r\n    3: {\r\n      start: -Math.PI / 4,\r\n      inc: -Math.PI / 4\r\n    },\r\n    4: {\r\n      start: -Math.PI / 8,\r\n      inc: -Math.PI / 4\r\n    }\r\n  },\r\n  3: {\r\n    2: {\r\n      start: Math.PI / 4,\r\n      inc: -Math.PI / 2\r\n    },\r\n    3: {\r\n      start: Math.PI / 4,\r\n      inc: -Math.PI / 4\r\n    },\r\n    4: {\r\n      start: 3 * Math.PI / 8,\r\n      inc: -Math.PI / 4\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Each room in a dungeon has walls, floor, and doors. Also entities live within\r\n * these rooms. The entities defined for each room will be random and depend on\r\n * the level.\r\n */\r\nclass Room {\r\n  /**\r\n   * @constructor\r\n   * @param {number} width The width of the room\r\n   * @param {number} height The height of the room\r\n   */\r\n  constructor( width, height ) {\r\n    /**\r\n     * The width of the room in tiles\r\n     * @type {number}\r\n     */\r\n    this.width = width;\r\n    \r\n    /**\r\n     * The height of the room in tiles\r\n     * @type {number}\r\n     */\r\n    this.height = height;\r\n    \r\n    /**\r\n     * The area of the room in tiles-squared\r\n     * @type {number}\r\n     */\r\n    this.area = width * height;\r\n\r\n    this.setPosition( 0, 0 );\r\n\r\n    /**\r\n     * The ID number of the room\r\n     * @type {number}\r\n     */\r\n    this.id = -1;\r\n    \r\n    /**\r\n     * The room type\r\n     * @type {RoomType}\r\n     */\r\n    this.type = RoomType.BATTLE;\r\n    \r\n    /**\r\n     * Whether or not the player has entered this room\r\n     * @type {boolean}\r\n     */\r\n    this.entered = false;\r\n\r\n    /**\r\n     * The doors in the room\r\n     * @type {Array.<Door>}\r\n     */\r\n    this.doors = [];\r\n    \r\n    /**\r\n     * The tiles in the room\r\n     * @type {Array.<Tiles>}\r\n     */\r\n    this.tiles = [];\r\n\r\n    // Surround the room with walls, and fill the rest with floors.\r\n    for ( let r = 0; r < this.height; r++ ) {\r\n      const row = [];\r\n      for ( let c = 0; c < this.width; c++ ) {\r\n        if ( r === 0 || r === this.height - 1 ||\r\n          c === 0 || c === this.width - 1 ) {\r\n          row.push( Tiles.WALL );\r\n        }\r\n        else {\r\n          row.push( Tiles.FLOOR );\r\n        }\r\n      }\r\n      this.tiles.push( row );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the position of the room in the dungeon. Also updates positional\r\n   * variables in the room.\r\n   * @param {number} x The x position of the room\r\n   * @param {number} y The y position of the room\r\n   */\r\n  setPosition( x, y ) {\r\n    /**\r\n     * The horizontal position in tiles\r\n     * @type {number}\r\n     */\r\n    this.x = x;\r\n    \r\n    /**\r\n     * The vertical position in tiles\r\n     * @type {number}\r\n     */\r\n    this.y = y;\r\n    \r\n    /**\r\n     * The position of the left edge of the room\r\n     * @type {number}\r\n     */\r\n    this.left = x;\r\n\r\n    /**\r\n     * The position of the right edge of the room\r\n     * @type {number}\r\n     */\r\n    this.right = x + this.width - 1;\r\n    \r\n    /**\r\n     * The position of the top edge of the room\r\n     * @type {number}\r\n     */\r\n    this.top = y;\r\n    \r\n    /**\r\n     * The position of the bottom edge of the room\r\n     * @type {number}\r\n     */\r\n    this.bottom = y + this.height - 1;\r\n    \r\n    /**\r\n     * The horizontal center position in tiles\r\n     * @type {number}\r\n     */\r\n    this.centerX = x + Math.floor( this.width / 2 );\r\n    \r\n    /**\r\n     * The vertical center position in tiles\r\n     * @type {number}\r\n     */\r\n    this.centerY = y + Math.floor( this.height / 2 );\r\n  }\r\n\r\n  /**\r\n   * Finds all the doors in the room and returns a list of their positions\r\n   */\r\n  updateDoorPositions() {\r\n    this.doors = [];\r\n    for ( let y = 0; y < this.height; y++ ) {\r\n      for ( let x = 0; x < this.width; x++ ) {\r\n        if ( this.tiles[ y ][ x ] === Tiles.DOOR ) {\r\n          let edge = Edge.NONE;\r\n          if ( y === 0 ) {\r\n            edge = Edge.TOP;\r\n          }\r\n          else if ( y === this.height - 1 ) {\r\n            edge = Edge.BOTTOM;\r\n          }\r\n          else if ( x === 0 ) {\r\n            edge = Edge.LEFT;\r\n          }\r\n          else if ( x === this.width - 1 ) {\r\n            edge = Edge.RIGHT;\r\n          }\r\n          this.doors.push( {\r\n            x: x,\r\n            y: y,\r\n            edge: edge\r\n          } );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the current room overlaps the given room\r\n   * @param {Room} room The room to check overlap with\r\n   * @return {boolean} True if the rooms overlap\r\n   */\r\n  overlaps( room ) {\r\n    return this.overlapsX( room ) && this.overlapsY( room );\r\n  }\r\n\r\n  /**\r\n   * Checks if the current room overlaps x-coordinates with the given room\r\n   * @param {Room} room The room to check overlap with\r\n   * @return {boolean} True if the rooms overlap x-coordinates\r\n   */\r\n  overlapsX( room ) {\r\n    return !( this.right < room.left || this.left > room.right );\r\n  }\r\n\r\n  /**\r\n   * Checks if the current room overlaps y-coordinates with the given room\r\n   * @param {Room} room The room to check overlap with\r\n   * @return {boolean} True if the rooms overlap y-coordinates\r\n   */\r\n  overlapsY( room ) {\r\n    return !( this.bottom < room.top || this.top > room.bottom );\r\n  }\r\n\r\n  /**\r\n   * Checks to see if a door is in the corner of a room\r\n   * @param {Door} door The door to a room\r\n   * @return {boolean} True if the door is on the corner of the room\r\n   */\r\n  isCorner( door ) {\r\n    if ( door.x === this.x || door.x === this.x + this.width - 1 ) {\r\n      if ( door.y === this.y || door.y === this.y + this.height - 1 ) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Determines if the given coordinates is on the edge of the room\r\n   * @param {number} x The x-coordinate (in tile space)\r\n   * @param {number} y The y-coordinate (in tile space)\r\n   * @return {Edge} The Edge the coordinate lies on\r\n   */\r\n  getEdge( x, y ) {\r\n    if ( y === this.y ) {\r\n      return Edge.TOP;\r\n    }\r\n    else if ( y === this.y + this.height - 1 ) {\r\n      return Edge.BOTTOM;\r\n    }\r\n    else if ( x === this.x ) {\r\n      return Edge.LEFT;\r\n    }\r\n    else if ( x === this.x + this.width - 1 ) {\r\n      return Edge.RIGHT;\r\n    }\r\n    return Edge.NONE;\r\n  }\r\n\r\n  /**\r\n   * Spawns a random item\r\n   * @param {Phaser.Scene} scene The current scene\r\n   */\r\n  spawnItem( scene ) {\r\n    ItemDrop.drop(\r\n      scene.map.tileToWorldX( this.centerX + 0.5 ),\r\n      scene.map.tileToWorldY( this.centerY + 0.5 ),\r\n      scene\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Spawns the enemies into the room\r\n   * @param {Edge} edge The starting edge of the player\r\n   * @param {Phaser.Scene} scene The current scene\r\n   */\r\n  spawnEnemies( edge, scene ) {\r\n    if ( this.type !== RoomType.BATTLE ) {\r\n      return;\r\n    }\r\n\r\n    let numEnemies = 1;\r\n    const size = ( this.width + this.height ) / 2;\r\n    if ( size < 10 ) {\r\n      numEnemies = 2;\r\n    }\r\n    else if ( size >= 10 && size < 13 ) {\r\n      numEnemies = 3;\r\n    }\r\n    else {\r\n      numEnemies = 4;\r\n    }\r\n\r\n    const mapping = enemySpawnMap[ edge ][ numEnemies ];\r\n    for ( let i = 0; i < numEnemies; i++ ) {\r\n      const t = mapping.start + i * mapping.inc;\r\n\r\n      const x = scene.map.tileToWorldX(\r\n        this.centerX + 0.5 + this.width / 4 * Math.cos( t )\r\n      );\r\n      const y = scene.map.tileToWorldY(\r\n        this.centerY + 0.5 + this.height / 4 * Math.sin( t )\r\n      );\r\n      const enemy = new Enemy( {\r\n        scene: scene,\r\n        key: 'enemy',\r\n        x: x,\r\n        y: y\r\n      } );\r\n      enemy.miniGames.push( 'DanceDance' ); // TODO: Change based on enemy type\r\n      enemy.setHealth( 3 ); // TODO: Change based on enemy type\r\n      scene.enemyGroup.add( enemy );\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  Room,\r\n  RoomType\r\n};",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/dungeon/Room.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "enemySpawnMap",
    "memberof": "src/dungeon/Room.js",
    "static": true,
    "longname": "src/dungeon/Room.js~enemySpawnMap",
    "access": "public",
    "export": false,
    "importPath": "src/dungeon/Room",
    "importStyle": null,
    "description": "Describes how enemies will spawn based on the entry direction of the player",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Map.<Direction,Map.<number, object>>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "class",
    "name": "Room",
    "memberof": "src/dungeon/Room.js",
    "static": true,
    "longname": "src/dungeon/Room.js~Room",
    "access": "public",
    "export": true,
    "importPath": "src/dungeon/Room",
    "importStyle": "{Room}",
    "description": "Each room in a dungeon has walls, floor, and doors. Also entities live within\nthese rooms. The entities defined for each room will be random and depend on\nthe level.",
    "lineNumber": 74,
    "interface": false
  },
  {
    "__docId__": 167,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/dungeon/Room.js~Room",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Room.js~Room#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width of the room"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height of the room"
      }
    ]
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "width",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#width",
    "access": "public",
    "description": "The width of the room in tiles",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "height",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#height",
    "access": "public",
    "description": "The height of the room in tiles",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "area",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#area",
    "access": "public",
    "description": "The area of the room in tiles-squared",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "id",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#id",
    "access": "public",
    "description": "The ID number of the room",
    "lineNumber": 105,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "type",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#type",
    "access": "public",
    "description": "The room type",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "RoomType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "entered",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#entered",
    "access": "public",
    "description": "Whether or not the player has entered this room",
    "lineNumber": 117,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "doors",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#doors",
    "access": "public",
    "description": "The doors in the room",
    "lineNumber": 123,
    "type": {
      "nullable": null,
      "types": [
        "Array.<Door>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "tiles",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#tiles",
    "access": "public",
    "description": "The tiles in the room",
    "lineNumber": 129,
    "type": {
      "nullable": null,
      "types": [
        "Array.<Tiles>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/dungeon/Room.js~Room",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Room.js~Room#setPosition",
    "access": "public",
    "description": "Sets the position of the room in the dungeon. Also updates positional\nvariables in the room.",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x position of the room"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y position of the room"
      }
    ],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "x",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#x",
    "access": "public",
    "description": "The horizontal position in tiles",
    "lineNumber": 158,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "y",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#y",
    "access": "public",
    "description": "The vertical position in tiles",
    "lineNumber": 164,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "left",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#left",
    "access": "public",
    "description": "The position of the left edge of the room",
    "lineNumber": 170,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "right",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#right",
    "access": "public",
    "description": "The position of the right edge of the room",
    "lineNumber": 176,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "top",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#top",
    "access": "public",
    "description": "The position of the top edge of the room",
    "lineNumber": 182,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "bottom",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#bottom",
    "access": "public",
    "description": "The position of the bottom edge of the room",
    "lineNumber": 188,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "centerX",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#centerX",
    "access": "public",
    "description": "The horizontal center position in tiles",
    "lineNumber": 194,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "centerY",
    "memberof": "src/dungeon/Room.js~Room",
    "static": false,
    "longname": "src/dungeon/Room.js~Room#centerY",
    "access": "public",
    "description": "The vertical center position in tiles",
    "lineNumber": 200,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "updateDoorPositions",
    "memberof": "src/dungeon/Room.js~Room",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Room.js~Room#updateDoorPositions",
    "access": "public",
    "description": "Finds all the doors in the room and returns a list of their positions",
    "lineNumber": 206,
    "params": [],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "overlaps",
    "memberof": "src/dungeon/Room.js~Room",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Room.js~Room#overlaps",
    "access": "public",
    "description": "Checks if the current room overlaps the given room",
    "lineNumber": 239,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to check overlap with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the rooms overlap"
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "overlapsX",
    "memberof": "src/dungeon/Room.js~Room",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Room.js~Room#overlapsX",
    "access": "public",
    "description": "Checks if the current room overlaps x-coordinates with the given room",
    "lineNumber": 248,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to check overlap with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the rooms overlap x-coordinates"
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "overlapsY",
    "memberof": "src/dungeon/Room.js~Room",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Room.js~Room#overlapsY",
    "access": "public",
    "description": "Checks if the current room overlaps y-coordinates with the given room",
    "lineNumber": 257,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to check overlap with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the rooms overlap y-coordinates"
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "isCorner",
    "memberof": "src/dungeon/Room.js~Room",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Room.js~Room#isCorner",
    "access": "public",
    "description": "Checks to see if a door is in the corner of a room",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "Door"
        ],
        "spread": false,
        "optional": false,
        "name": "door",
        "description": "The door to a room"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the door is on the corner of the room"
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "getEdge",
    "memberof": "src/dungeon/Room.js~Room",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Room.js~Room#getEdge",
    "access": "public",
    "description": "Determines if the given coordinates is on the edge of the room",
    "lineNumber": 281,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-coordinate (in tile space)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-coordinate (in tile space)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Edge"
      ],
      "spread": false,
      "description": "The Edge the coordinate lies on"
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "spawnItem",
    "memberof": "src/dungeon/Room.js~Room",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Room.js~Room#spawnItem",
    "access": "public",
    "description": "Spawns a random item",
    "lineNumber": 301,
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "spawnEnemies",
    "memberof": "src/dungeon/Room.js~Room",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/Room.js~Room#spawnEnemies",
    "access": "public",
    "description": "Spawns the enemies into the room",
    "lineNumber": 314,
    "params": [
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge",
        "description": "The starting edge of the player"
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      }
    ],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/dungeon/TileMappings.js",
    "content": "/**\r\n * Collection of tiles based on their index in the tileset sprite sheet\r\n * @type {Object}\r\n */\r\nconst Tileset = {\r\n  BLANK: 19,\r\n  WALL: {\r\n    TOP_LEFT: 3,\r\n    TOP_RIGHT: 4,\r\n    BOTTOM_LEFT: 11,\r\n    BOTTOM_RIGHT: 12,\r\n    TOP: 17,\r\n    RIGHT: 8,\r\n    BOTTOM: 1,\r\n    LEFT: 10\r\n  },\r\n  CORNER: {\r\n    TOP_LEFT: 0,\r\n    TOP_RIGHT: 2,\r\n    BOTTOM_LEFT: 16,\r\n    BOTTOM_RIGHT: 18\r\n  },\r\n  FLOOR: 9,\r\n  DOOR: {\r\n    TOP: {\r\n      LEFT: [ 10, 9, 16 ],\r\n      MIDDLE: [ 18, 9, 16 ],\r\n      RIGHT: [ 18, 9, 8 ]\r\n    },\r\n    BOTTOM: {\r\n      LEFT: [ 10, 9, 0 ],\r\n      MIDDLE: [ 2, 9, 0 ],\r\n      RIGHT: [ 2, 9, 8 ]\r\n    },\r\n    LEFT: {\r\n      TOP: [ [ 17 ], [ 9 ], [ 2 ] ],\r\n      MIDDLE: [ [ 18 ], [ 9 ], [ 2 ] ],\r\n      BOTTOM: [ [ 18 ], [ 9 ], [ 1 ] ]\r\n    },\r\n    RIGHT: {\r\n      TOP: [ [ 17 ], [ 9 ], [ 0 ] ],\r\n      MIDDLE: [ [ 16 ], [ 9 ], [ 0 ] ],\r\n      BOTTOM: [ [ 16 ], [ 9 ], [ 1 ] ]\r\n    }\r\n  },\r\n  GATE: {\r\n    HORIZONTAL: [ 24, 25, 26 ],\r\n    VERTICAL: [ [ 32 ], [ 40 ] ]\r\n  }\r\n};\r\n\r\nexport default Tileset;",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/dungeon/TileMappings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "name": "Tileset",
    "memberof": "src/dungeon/TileMappings.js",
    "static": true,
    "longname": "src/dungeon/TileMappings.js~Tileset",
    "access": "public",
    "export": true,
    "importPath": "src/dungeon/TileMappings",
    "importStyle": "Tileset",
    "description": "Collection of tiles based on their index in the tileset sprite sheet",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/dungeon/TilemapVisibility.js",
    "content": "import Hallway from './Hallway';\r\nimport { Orientation } from '../globals';\r\n\r\n/**\r\n * This class manages how the dungeon is displayed to the user based on the\r\n * player's current room.\r\n */\r\nexport default class TilemapVisibility {\r\n  /**\r\n   * @constructor\r\n   * @param {Phaser.Scene} scene The main scene running the game\r\n   * @param {Phaser.Tilemaps.DynamicTilemapLayer} shadowLayer The layer to show\r\n   *          or hide the dungeon\r\n   */\r\n  constructor( scene, shadowLayer ) {\r\n    /**\r\n     * The main scene running the game\r\n     * @type {Phaser.Scene}\r\n     */\r\n    this.scene = scene;\r\n    \r\n    /**\r\n     * The layer to show / hide the dungeon\r\n     * @type {Phaser.Tilemaps.DynamicTilemapLayer}\r\n     */\r\n    this.shadowLayer = shadowLayer;\r\n    \r\n    /**\r\n     * The current active room where the player is located\r\n     * @type {Room}\r\n     */\r\n    this.activeRoom = null;\r\n    \r\n    /**\r\n     * The current active hallway where the player is located\r\n     * @type {Hallway}\r\n     */\r\n    this.activeHall = null;\r\n  }\r\n\r\n  /**\r\n   * Sets the current active room where the player is located. The room can also\r\n   * be a hallway.\r\n   * @param {Room} room The current room the player is in\r\n   * @return {boolean}\r\n   */\r\n  setActiveRoom( room ) {\r\n    if ( room instanceof Hallway ) {\r\n      this.turnOnLights( room );\r\n      if ( this.activeHall && this.activeHall !== room ) {\r\n        this.dimLights( this.activeHall );\r\n      }\r\n      this.activeHall = room;\r\n      return false;\r\n    }\r\n    else if ( room !== this.activeRoom ) {\r\n      this.turnOnLights( room );\r\n      if ( this.activeRoom ) {\r\n        this.dimLights( this.activeRoom );\r\n      }\r\n      this.activeRoom = room;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Removes the shadow layer above the given room\r\n   * @param {Room} room The room to make visible\r\n   */\r\n  removeShadow( room ) {\r\n    let { x, y, width, height } = room;\r\n\r\n    if ( room instanceof Hallway ) {\r\n      if ( room.orientation === Orientation.HORIZONTAL ) {\r\n        x -= 1;\r\n        width += 2;\r\n      }\r\n      else if ( room.orientation === Orientation.VERTICAL ) {\r\n        y -= 1;\r\n        height += 2;\r\n      }\r\n    }\r\n    this.shadowLayer.forEachTile(\r\n      ( t ) => {\r\n        t.setAlpha( 0 );\r\n      },\r\n      this, x, y, width, height\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Turns on the lights in the given room. If no lights exist, one is created\r\n   * @param {Room} room The room to lighten\r\n   */\r\n  turnOnLights( room ) {\r\n    this.removeShadow( room );\r\n\r\n    if ( !room.light ) {\r\n      const scale = this.scene.map.tileWidth * this.scene.cameras.main.zoom;\r\n\r\n      const rCX = this.scene.map.tileToWorldX( room.width % 2 === 0\r\n        ? room.centerX\r\n        : room.centerX + 0.5 );\r\n      const rCY = this.scene.map.tileToWorldY( room.height % 2 === 0\r\n        ? room.centerY\r\n        : room.centerY + 0.5 );\r\n\r\n      const radius = Math.max( Math.max(\r\n        room.width * scale / 3 * 2,\r\n        room.height * scale / 3 * 2\r\n      ), 100 );\r\n      const rhW = ( room.width ) * scale / 2;\r\n      const rhH = ( room.height - 1 ) * scale / 2;\r\n\r\n      room.light = this.scene.lights\r\n        .addLight( rCX, rCY, radius, 0xEDC393, 0 );\r\n      room.light.hWidth = rhW;\r\n      room.light.hHeight = rhH;\r\n    }\r\n    this.scene.tweens.add( {\r\n      targets: room.light,\r\n      intensity: 0.8,\r\n      duration: 200,\r\n      ease: 'linear'\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Dims the lights in the given room. Once the light is dimmed, it is removed\r\n   * from the game to ease up graphics.\r\n   * @param {Room} room The room to dim\r\n   */\r\n  dimLights( room ) {\r\n    if ( room.light ) {\r\n      this.scene.tweens.add( {\r\n        targets: room.light,\r\n        intensity: 0,\r\n        duration: 200,\r\n        ease: 'linear'\r\n      } );\r\n      setTimeout( () => {\r\n        this.scene.lights.removeLight( room.light ); // better performance\r\n        room.light = null;\r\n      }, 200 );\r\n    }\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/dungeon/TilemapVisibility.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "TilemapVisibility",
    "memberof": "src/dungeon/TilemapVisibility.js",
    "static": true,
    "longname": "src/dungeon/TilemapVisibility.js~TilemapVisibility",
    "access": "public",
    "export": true,
    "importPath": "src/dungeon/TilemapVisibility",
    "importStyle": "TilemapVisibility",
    "description": "This class manages how the dungeon is displayed to the user based on the\nplayer's current room.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 198,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/dungeon/TilemapVisibility.js~TilemapVisibility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/TilemapVisibility.js~TilemapVisibility#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The main scene running the game"
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Tilemaps.DynamicTilemapLayer"
        ],
        "spread": false,
        "optional": false,
        "name": "shadowLayer",
        "description": "The layer to show\n         or hide the dungeon"
      }
    ]
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "scene",
    "memberof": "src/dungeon/TilemapVisibility.js~TilemapVisibility",
    "static": false,
    "longname": "src/dungeon/TilemapVisibility.js~TilemapVisibility#scene",
    "access": "public",
    "description": "The main scene running the game",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Scene"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "shadowLayer",
    "memberof": "src/dungeon/TilemapVisibility.js~TilemapVisibility",
    "static": false,
    "longname": "src/dungeon/TilemapVisibility.js~TilemapVisibility#shadowLayer",
    "access": "public",
    "description": "The layer to show / hide the dungeon",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Tilemaps.DynamicTilemapLayer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "activeRoom",
    "memberof": "src/dungeon/TilemapVisibility.js~TilemapVisibility",
    "static": false,
    "longname": "src/dungeon/TilemapVisibility.js~TilemapVisibility#activeRoom",
    "access": "public",
    "description": "The current active room where the player is located",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Room"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "activeHall",
    "memberof": "src/dungeon/TilemapVisibility.js~TilemapVisibility",
    "static": false,
    "longname": "src/dungeon/TilemapVisibility.js~TilemapVisibility#activeHall",
    "access": "public",
    "description": "The current active hallway where the player is located",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Hallway"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "setActiveRoom",
    "memberof": "src/dungeon/TilemapVisibility.js~TilemapVisibility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/TilemapVisibility.js~TilemapVisibility#setActiveRoom",
    "access": "public",
    "description": "Sets the current active room where the player is located. The room can also\nbe a hallway.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The current room the player is in"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "removeShadow",
    "memberof": "src/dungeon/TilemapVisibility.js~TilemapVisibility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/TilemapVisibility.js~TilemapVisibility#removeShadow",
    "access": "public",
    "description": "Removes the shadow layer above the given room",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to make visible"
      }
    ],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "turnOnLights",
    "memberof": "src/dungeon/TilemapVisibility.js~TilemapVisibility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/TilemapVisibility.js~TilemapVisibility#turnOnLights",
    "access": "public",
    "description": "Turns on the lights in the given room. If no lights exist, one is created",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to lighten"
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "dimLights",
    "memberof": "src/dungeon/TilemapVisibility.js~TilemapVisibility",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dungeon/TilemapVisibility.js~TilemapVisibility#dimLights",
    "access": "public",
    "description": "Dims the lights in the given room. Once the light is dimmed, it is removed\nfrom the game to ease up graphics.",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to dim"
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "src/dungeon/Tiles.js",
    "content": "/**\r\n * Enum type to help dungeon room generation\r\n */\r\nconst Tiles = {\r\n  EMPTY: 0,\r\n  WALL: 1,\r\n  FLOOR: 2,\r\n  DOOR: 3,\r\n  START: 4, // TODO: remove\r\n  END: 5, // TODO: remove\r\n  ITEM: 6 // TODO: remove\r\n};\r\n\r\nexport default Tiles;",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/dungeon/Tiles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "variable",
    "name": "Tiles",
    "memberof": "src/dungeon/Tiles.js",
    "static": true,
    "longname": "src/dungeon/Tiles.js~Tiles",
    "access": "public",
    "export": true,
    "importPath": "src/dungeon/Tiles",
    "importStyle": "Tiles",
    "description": "Enum type to help dungeon room generation",
    "lineNumber": 4,
    "type": {
      "types": [
        "{\"EMPTY\": *, \"WALL\": number, \"FLOOR\": number, \"DOOR\": number, \"START\": number, \"END\": number, \"ITEM\": number}"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "src/entity/Enemy.js",
    "content": "import Entity from './Entity';\r\nimport HealthBar from '../battle/HealthBar';\r\nimport BattleDrop from '../battle/BattleDrop';\r\n\r\n/**\r\n * Generic enemy class for all enemies to extend\r\n */\r\nexport default class Enemy extends Entity {\r\n  /**\r\n   * @constructor\r\n   * @param {SpriteConfig} config The configuration object for the enemy\r\n   */\r\n  constructor( config ) {\r\n    super( config );\r\n\r\n    /**\r\n     * List of mini games (the scene key) associated with the entity.\r\n     * @type {Array.<string>}\r\n     */\r\n    this.miniGames = [];\r\n    \r\n    /**\r\n     * The health bar to display above the enemy\r\n     * @type {HealthBar}\r\n     */\r\n    this.healthBar = new HealthBar( config.scene, {\r\n      x: config.x - 25,\r\n      y: config.y - this.height / 2 - 10,\r\n      width: 50,\r\n      height: 5\r\n    } );\r\n    \r\n    /**\r\n     * Whether or not the enemy is selected\r\n     * @type {boolean}\r\n     */\r\n    this.selected = false;\r\n    \r\n    /**\r\n     * The outline to display around the enemy when the enemy is selected\r\n     * @type {Phaser.GameObjects.Rectangle}\r\n     */\r\n    this.outline = null;\r\n    \r\n    /**\r\n     * Whether or not the enemy is active to be updated\r\n     * @type {boolean}\r\n     */\r\n    this.active = true;\r\n\r\n    this.setInteractive( { useHandCursor: true } );\r\n  }\r\n\r\n  /**\r\n   * Selects the enemy\r\n   */\r\n  select() {\r\n    if ( this.selected ) {\r\n      return;\r\n    }\r\n\r\n    this.outline = this.scene.add\r\n      .rectangle( this.x, this.y, this.width, this.height );\r\n    this.outline.setStrokeStyle( 1, 0xFFFF00, 0.75 );\r\n    this.outline.setOrigin( 0.5, 0.5 );\r\n    this.outline.update();\r\n    this.selected = true;\r\n  }\r\n\r\n  /**\r\n   * Deselect the enemy\r\n   */\r\n  deselect() {\r\n    if ( !this.selected ) {\r\n      return;\r\n    }\r\n    this.outline.destroy();\r\n    this.selected = false;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  injure( amount ) {\r\n    super.injure( amount );\r\n    this.healthBar.setPercent( this.health / this.maxHealth );\r\n  }\r\n\r\n  /**\r\n   * Attacks the given entity and injures them by the given amount\r\n   * @param {Entity} entity The entity to attack\r\n   * @param {number} amount How much damage to do to the entity\r\n   */\r\n  attack( entity, amount ) {\r\n    entity.injure( amount );\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  slay() {\r\n    this.active = false;\r\n\r\n    // Wait for health bar to finish\r\n    setTimeout( () => {\r\n      BattleDrop.drop( this.x, this.y, this.scene );\r\n      if ( this.healthBar ) {\r\n        this.healthBar.destroy();\r\n      }\r\n      if ( this.outline ) {\r\n        this.outline.destroy();\r\n      }\r\n      this.scene.enemyGroup.remove( this );\r\n      super.slay();\r\n    }, this.healthBar.config.animationDuration );\r\n  }\r\n\r\n  /**\r\n   * Gets the key of a mini game from the list of mini games associated with the\r\n   * enemy\r\n   * @return {string|null} A mini game scene key\r\n   */\r\n  getRandomMiniGame() {\r\n    if ( this.miniGames.length === 0 ) {\r\n      return null;\r\n    }\r\n    return this.miniGames[\r\n      Math.floor( Math.random() * this.miniGames.length )\r\n    ];\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/entity/Enemy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "class",
    "name": "Enemy",
    "memberof": "src/entity/Enemy.js",
    "static": true,
    "longname": "src/entity/Enemy.js~Enemy",
    "access": "public",
    "export": true,
    "importPath": "src/entity/Enemy",
    "importStyle": "Enemy",
    "description": "Generic enemy class for all enemies to extend",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/entity/Entity.js~Entity"
    ]
  },
  {
    "__docId__": 213,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/entity/Enemy.js~Enemy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Enemy.js~Enemy#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "SpriteConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration object for the enemy"
      }
    ]
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "miniGames",
    "memberof": "src/entity/Enemy.js~Enemy",
    "static": false,
    "longname": "src/entity/Enemy.js~Enemy#miniGames",
    "access": "public",
    "description": "List of mini games (the scene key) associated with the entity.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Array.<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "healthBar",
    "memberof": "src/entity/Enemy.js~Enemy",
    "static": false,
    "longname": "src/entity/Enemy.js~Enemy#healthBar",
    "access": "public",
    "description": "The health bar to display above the enemy",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "HealthBar"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "selected",
    "memberof": "src/entity/Enemy.js~Enemy",
    "static": false,
    "longname": "src/entity/Enemy.js~Enemy#selected",
    "access": "public",
    "description": "Whether or not the enemy is selected",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "outline",
    "memberof": "src/entity/Enemy.js~Enemy",
    "static": false,
    "longname": "src/entity/Enemy.js~Enemy#outline",
    "access": "public",
    "description": "The outline to display around the enemy when the enemy is selected",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.GameObjects.Rectangle"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "active",
    "memberof": "src/entity/Enemy.js~Enemy",
    "static": false,
    "longname": "src/entity/Enemy.js~Enemy#active",
    "access": "public",
    "description": "Whether or not the enemy is active to be updated",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "select",
    "memberof": "src/entity/Enemy.js~Enemy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Enemy.js~Enemy#select",
    "access": "public",
    "description": "Selects the enemy",
    "lineNumber": 57,
    "params": [],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "deselect",
    "memberof": "src/entity/Enemy.js~Enemy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Enemy.js~Enemy#deselect",
    "access": "public",
    "description": "Deselect the enemy",
    "lineNumber": 73,
    "params": [],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "injure",
    "memberof": "src/entity/Enemy.js~Enemy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Enemy.js~Enemy#injure",
    "access": "public",
    "description": "",
    "lineNumber": 84,
    "override": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "attack",
    "memberof": "src/entity/Enemy.js~Enemy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Enemy.js~Enemy#attack",
    "access": "public",
    "description": "Attacks the given entity and injures them by the given amount",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Entity"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "The entity to attack"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "How much damage to do to the entity"
      }
    ],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "slay",
    "memberof": "src/entity/Enemy.js~Enemy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Enemy.js~Enemy#slay",
    "access": "public",
    "description": "",
    "lineNumber": 101,
    "override": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "getRandomMiniGame",
    "memberof": "src/entity/Enemy.js~Enemy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Enemy.js~Enemy#getRandomMiniGame",
    "access": "public",
    "description": "Gets the key of a mini game from the list of mini games associated with the\nenemy",
    "lineNumber": 123,
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": "A mini game scene key"
    },
    "params": []
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "src/entity/Entity.js",
    "content": "/**\r\n * Constant used to denote invincibility\r\n * @type {number}\r\n */\r\nconst INVINCIBLE = -1;\r\n\r\n/**\r\n * Generic entity class for anything that can be interacted with in the game.\r\n */\r\nexport default class Entity extends Phaser.GameObjects.Sprite {\r\n  /**\r\n   * @constructor\r\n   * @param {SpriteConfig} config The configuration object for the entity\r\n   */\r\n  constructor( config ) {\r\n    const { scene, x, y, key } = config;\r\n    super( scene, x, y, key );\r\n    scene.add.existing( this );\r\n    \r\n    /**\r\n     * The current scene\r\n     * @type {Phaser.Scene}\r\n     */\r\n    this.scene = scene;\r\n\r\n    /**\r\n     * The maximum amount the health of the entity can be set to.\r\n     * @type {number}\r\n     */\r\n    this.maxHealth = INVINCIBLE;\r\n\r\n    /**\r\n     * The current amount of health the entity has\r\n     * @type {number}\r\n     */\r\n    this.health = INVINCIBLE;\r\n\r\n    /**\r\n     * Whether or not the entity is alive\r\n     * @type {Boolean}\r\n     */\r\n    this.alive = true;\r\n  }\r\n\r\n  /**\r\n   * Sets the current health and max health of the entity\r\n   * @param {number} amount The amount of health the entity has\r\n   */\r\n  setHealth( amount ) {\r\n    this.maxHealth = amount;\r\n    this.health = amount;\r\n  }\r\n\r\n  /**\r\n   * Heals the current entity by the given amount\r\n   * @param {number} amount The amount the heal the entity by\r\n   */\r\n  heal( amount ) {\r\n    if ( !this.canHarm() || isNaN( amount ) ) {\r\n      return;\r\n    }\r\n\r\n    // take either the max health, or the added amount\r\n    this.health = Math.min( this.health + amount, this.maxHealth );\r\n\r\n    // Text Display\r\n    const healTxt = this.scene.add.text( this.x - this.width / 2,\r\n      this.y - this.height, `+${amount}`, {\r\n        fontSize: '16px',\r\n        fontFamily: 'Rye',\r\n        color: '#1ace32',\r\n        fontWeight: 'bold'\r\n      } );\r\n    healTxt.setShadow( 0, 2, '#000', 10 );\r\n    healTxt.setScale( 1 / this.scene.cameras.main.zoom );\r\n    this.scene.tweens.add( {\r\n      targets: healTxt,\r\n      duration: 1000,\r\n      alpha: 0,\r\n      y: this.y - this.height - 20,\r\n      ease: 'Linear'\r\n    } );\r\n    setTimeout( () => healTxt.destroy(), 1000 );\r\n  }\r\n\r\n  /**\r\n   * Injures the current entity by the given amount\r\n   * @param {number} amount The amount to injure the entity by\r\n   */\r\n  injure( amount ) {\r\n    if ( !this.canHarm() || isNaN( amount ) ) {\r\n      return;\r\n    }\r\n\r\n    // Text Display\r\n    const hurtTxt = this.scene.add.text( this.x - this.width / 2,\r\n      this.y - this.height,\r\n      `-${amount}`, {\r\n        fontSize: '16px',\r\n        fontFamily: 'Rye',\r\n        color: '#e00202',\r\n        fontWeight: 'bold'\r\n      } );\r\n    hurtTxt.setShadow( 0, 2, '#000', 10 );\r\n    hurtTxt.setScale( 1 / this.scene.cameras.main.zoom );\r\n    this.scene.tweens.add( {\r\n      targets: hurtTxt,\r\n      duration: 1000,\r\n      alpha: 0,\r\n      y: this.y - this.height - 20,\r\n      ease: 'Linear'\r\n    } );\r\n    setTimeout( () => hurtTxt.destroy(), 1000 );\r\n\r\n    // take either the min health (0), or the subtracted amount\r\n    this.health = Math.max( this.health - amount, 0 );\r\n    if ( this.health === 0 ) {\r\n      this.slay();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If the entity is invincible, then the entity cannot be harmed.\r\n   * @return {boolean} True if the entity can be harmed\r\n   */\r\n  canHarm() {\r\n    return this.maxHealth !== INVINCIBLE;\r\n  }\r\n\r\n  /**\r\n   * Called when the player wants to interact with the current entity.\r\n   */\r\n  interactWith() {\r\n    // Does nothing (entity doesn't interact with player)\r\n  }\r\n\r\n  /**\r\n   * A nicer way to kill off an entity to remove it from the scene.\r\n   */\r\n  slay() {\r\n    this.alive = false;\r\n    this.destroy();\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/entity/Entity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "name": "INVINCIBLE",
    "memberof": "src/entity/Entity.js",
    "static": true,
    "longname": "src/entity/Entity.js~INVINCIBLE",
    "access": "public",
    "export": false,
    "importPath": "src/entity/Entity",
    "importStyle": null,
    "description": "Constant used to denote invincibility",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 231,
    "kind": "class",
    "name": "Entity",
    "memberof": "src/entity/Entity.js",
    "static": true,
    "longname": "src/entity/Entity.js~Entity",
    "access": "public",
    "export": true,
    "importPath": "src/entity/Entity",
    "importStyle": "Entity",
    "description": "Generic entity class for anything that can be interacted with in the game.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "Phaser~Phaser.GameObjects.Sprite"
    ]
  },
  {
    "__docId__": 232,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/entity/Entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Entity.js~Entity#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "SpriteConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration object for the entity"
      }
    ]
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "scene",
    "memberof": "src/entity/Entity.js~Entity",
    "static": false,
    "longname": "src/entity/Entity.js~Entity#scene",
    "access": "public",
    "description": "The current scene",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Scene"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "maxHealth",
    "memberof": "src/entity/Entity.js~Entity",
    "static": false,
    "longname": "src/entity/Entity.js~Entity#maxHealth",
    "access": "public",
    "description": "The maximum amount the health of the entity can be set to.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "health",
    "memberof": "src/entity/Entity.js~Entity",
    "static": false,
    "longname": "src/entity/Entity.js~Entity#health",
    "access": "public",
    "description": "The current amount of health the entity has",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "alive",
    "memberof": "src/entity/Entity.js~Entity",
    "static": false,
    "longname": "src/entity/Entity.js~Entity#alive",
    "access": "public",
    "description": "Whether or not the entity is alive",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "setHealth",
    "memberof": "src/entity/Entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Entity.js~Entity#setHealth",
    "access": "public",
    "description": "Sets the current health and max health of the entity",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "The amount of health the entity has"
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "heal",
    "memberof": "src/entity/Entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Entity.js~Entity#heal",
    "access": "public",
    "description": "Heals the current entity by the given amount",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "The amount the heal the entity by"
      }
    ],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "injure",
    "memberof": "src/entity/Entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Entity.js~Entity#injure",
    "access": "public",
    "description": "Injures the current entity by the given amount",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "The amount to injure the entity by"
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "canHarm",
    "memberof": "src/entity/Entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Entity.js~Entity#canHarm",
    "access": "public",
    "description": "If the entity is invincible, then the entity cannot be harmed.",
    "lineNumber": 126,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the entity can be harmed"
    },
    "params": []
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "interactWith",
    "memberof": "src/entity/Entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Entity.js~Entity#interactWith",
    "access": "public",
    "description": "Called when the player wants to interact with the current entity.",
    "lineNumber": 133,
    "params": [],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "slay",
    "memberof": "src/entity/Entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Entity.js~Entity#slay",
    "access": "public",
    "description": "A nicer way to kill off an entity to remove it from the scene.",
    "lineNumber": 140,
    "params": [],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "src/entity/index.js",
    "content": "import Entity from './Entity';\r\nimport Enemy from './Enemy';\r\nimport Player from './Player';\r\n\r\nexport {\r\n  Entity,\r\n  Enemy,\r\n  Player\r\n};",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/entity/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "src/entity/items/BugSpray.js",
    "content": "import Item from './Item';\r\nimport { ItemType } from './index';\r\nimport Message from '../../scenes/elements/Message';\r\n\r\n/**\r\n * If used in the dungeon, battle rooms have no enemies (wears off in 3 rooms).\r\n * If used in battle, the battle ends (one time use). Excludes boss fights\r\n */\r\nexport default class BugSpray extends Item {\r\n  /**\r\n   * @constructor\r\n   * @param {number} x The x-position of the item\r\n   * @param {number} y The y-position of the item\r\n   * @param {Phaser.Scene} scene The current scene\r\n   */\r\n  constructor( x, y, scene ) {\r\n    super( { x: x, y: y, scene: scene, key: 'bug_spray' } );\r\n    \r\n    /**\r\n     * This item can be used anywhere\r\n     * @type {ItemType}\r\n     */\r\n    this.itemType = ItemType.ANY;\r\n    \r\n    /**\r\n     * The name of the item\r\n     * @type {string}\r\n     */\r\n    this.name = 'Bug Spray';\r\n  }\r\n\r\n  /**\r\n   * Uses the item to either end the battle, or prevent battles for 3 rooms\r\n   * @param {ItemUseConfig} config The configuration\r\n   */\r\n  use( config ) {\r\n    // Used in battle\r\n    if ( config.battle != null ) {\r\n      Message.status( 'The bug spray knocked out the enemies', config.scene );\r\n      config.battle.slayAll();\r\n    }\r\n    // Used while exploring\r\n    else if ( config.scene ) {\r\n      Message.status( 'Bug spray has been applied', config.scene );\r\n      config.scene.preventSpawn = true;\r\n      config.scene.roomCooloffs[ 'bug_spray' ] = {\r\n        remaining: 3,\r\n        callback: () => {\r\n          config.scene.preventSpawn = false;\r\n          Message.status( 'The bug spray has worn off', config.scene );\r\n        }\r\n      };\r\n    }\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/entity/items/BugSpray.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "class",
    "name": "BugSpray",
    "memberof": "src/entity/items/BugSpray.js",
    "static": true,
    "longname": "src/entity/items/BugSpray.js~BugSpray",
    "access": "public",
    "export": true,
    "importPath": "src/entity/items/BugSpray",
    "importStyle": "BugSpray",
    "description": "If used in the dungeon, battle rooms have no enemies (wears off in 3 rooms).\nIf used in battle, the battle ends (one time use). Excludes boss fights",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/entity/items/Item.js~Item"
    ]
  },
  {
    "__docId__": 251,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/entity/items/BugSpray.js~BugSpray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/BugSpray.js~BugSpray#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-position of the item"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-position of the item"
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      }
    ]
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "itemType",
    "memberof": "src/entity/items/BugSpray.js~BugSpray",
    "static": false,
    "longname": "src/entity/items/BugSpray.js~BugSpray#itemType",
    "access": "public",
    "description": "This item can be used anywhere",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "ItemType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "name",
    "memberof": "src/entity/items/BugSpray.js~BugSpray",
    "static": false,
    "longname": "src/entity/items/BugSpray.js~BugSpray#name",
    "access": "public",
    "description": "The name of the item",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "use",
    "memberof": "src/entity/items/BugSpray.js~BugSpray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/BugSpray.js~BugSpray#use",
    "access": "public",
    "description": "Uses the item to either end the battle, or prevent battles for 3 rooms",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "ItemUseConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration"
      }
    ],
    "return": null
  },
  {
    "__docId__": 255,
    "kind": "file",
    "name": "src/entity/items/index.js",
    "content": "import Injection from './Injection';\r\nimport Timelapse from './Timelapse';\r\nimport Inventory from './Inventory';\r\nimport VorpalSword from './VorpalSword';\r\nimport BugSpray from './BugSpray';\r\n\r\n/**\r\n * Contains all of the items available in the game\r\n * @type {Object}\r\n */\r\nconst items = { Injection, Timelapse, VorpalSword, BugSpray };\r\n\r\n/**\r\n * Enum used to describe item types\r\n */\r\nconst ItemType = {\r\n  ANY: 0,\r\n  BATTLE: 1,\r\n  MINIGAME: 2,\r\n  PASSIVE: 3\r\n};\r\n\r\n/**\r\n * Creates an item instance from the name\r\n * @param {string} name The name of the item class\r\n * @return {Item} an instance of the Item\r\n */\r\nfunction itemClass( name ) {\r\n  return items[ name ];\r\n}\r\n\r\nexport {\r\n  ItemType,\r\n  Injection,\r\n  Inventory,\r\n  Timelapse,\r\n  VorpalSword,\r\n  BugSpray,\r\n  itemClass\r\n};",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/entity/items/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 256,
    "kind": "variable",
    "name": "items",
    "memberof": "src/entity/items/index.js",
    "static": true,
    "longname": "src/entity/items/index.js~items",
    "access": "public",
    "export": false,
    "importPath": "src/entity/items",
    "importStyle": null,
    "description": "Contains all of the items available in the game",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "name": "ItemType",
    "memberof": "src/entity/items/index.js",
    "static": true,
    "longname": "src/entity/items/index.js~ItemType",
    "access": "public",
    "export": true,
    "importPath": "src/entity/items",
    "importStyle": "{ItemType}",
    "description": "Enum used to describe item types",
    "lineNumber": 16,
    "type": {
      "types": [
        "{\"ANY\": *, \"BATTLE\": number, \"MINIGAME\": number, \"PASSIVE\": number}"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "function",
    "name": "itemClass",
    "memberof": "src/entity/items/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/entity/items/index.js~itemClass",
    "access": "public",
    "export": true,
    "importPath": "src/entity/items",
    "importStyle": "{itemClass}",
    "description": "Creates an item instance from the name",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the item class"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Item"
      ],
      "spread": false,
      "description": "an instance of the Item"
    }
  },
  {
    "__docId__": 259,
    "kind": "file",
    "name": "src/entity/items/Injection.js",
    "content": "import Item from './Item';\r\nimport { ItemType } from './';\r\n\r\n/**\r\n * This is a health booster that can only be used when the player has health\r\n * below their maximum health. If the player's health is already full, the\r\n * player is injured (what a twisted society we live in)\r\n */\r\nexport default class Injection extends Item {\r\n  /**\r\n   * @constructor\r\n   * @param {number} x The x-position of the item\r\n   * @param {number} y The y-position of the item\r\n   * @param {Phaser.Scene} scene The current scene\r\n   */\r\n  constructor( x, y, scene ) {\r\n    super( { x: x, y: y, scene: scene, key: 'injection' } );\r\n    \r\n    /**\r\n     * The amount to heal the player upon use\r\n     * @type {number}\r\n     */\r\n    this.amount = 5;\r\n\r\n    /**\r\n     * This item can be used anywhere\r\n     * @type {ItemType}\r\n     */\r\n    this.itemType = ItemType.ANY;\r\n\r\n    /**\r\n     * The name of the item\r\n     * @type {string}\r\n     */\r\n    this.name = 'Injection';\r\n  }\r\n\r\n  /**\r\n   * Uses the item to either heal or hurt the player\r\n   * @param {ItemUseConfig} config The configuration passed in\r\n   */\r\n  use( config ) {\r\n    const player = config.player;\r\n    if ( player.health === player.maxHealth ) {\r\n      player.injure( this.amount );\r\n      player.scene.cameras.main.shake( 200, 0.0025 );\r\n      player.scene.cameras.main.flash( 200, 150, 0, 0 );\r\n    }\r\n    else {\r\n      player.heal( this.amount );\r\n    }\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/entity/items/Injection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 260,
    "kind": "class",
    "name": "Injection",
    "memberof": "src/entity/items/Injection.js",
    "static": true,
    "longname": "src/entity/items/Injection.js~Injection",
    "access": "public",
    "export": true,
    "importPath": "src/entity/items/Injection",
    "importStyle": "Injection",
    "description": "This is a health booster that can only be used when the player has health\nbelow their maximum health. If the player's health is already full, the\nplayer is injured (what a twisted society we live in)",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/entity/items/Item.js~Item"
    ]
  },
  {
    "__docId__": 261,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/entity/items/Injection.js~Injection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/Injection.js~Injection#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-position of the item"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-position of the item"
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      }
    ]
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "amount",
    "memberof": "src/entity/items/Injection.js~Injection",
    "static": false,
    "longname": "src/entity/items/Injection.js~Injection#amount",
    "access": "public",
    "description": "The amount to heal the player upon use",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "itemType",
    "memberof": "src/entity/items/Injection.js~Injection",
    "static": false,
    "longname": "src/entity/items/Injection.js~Injection#itemType",
    "access": "public",
    "description": "This item can be used anywhere",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "ItemType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "name",
    "memberof": "src/entity/items/Injection.js~Injection",
    "static": false,
    "longname": "src/entity/items/Injection.js~Injection#name",
    "access": "public",
    "description": "The name of the item",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "use",
    "memberof": "src/entity/items/Injection.js~Injection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/Injection.js~Injection#use",
    "access": "public",
    "description": "Uses the item to either heal or hurt the player",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "ItemUseConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration passed in"
      }
    ],
    "return": null
  },
  {
    "__docId__": 266,
    "kind": "file",
    "name": "src/entity/items/Inventory.js",
    "content": "import { ItemType } from './';\r\n\r\n/**\r\n * The player's inventory which holds the items the player picks up\r\n */\r\nexport default class Inventory {\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    /**\r\n     * The items picked up by the player in the game (excludes passive items)\r\n     * @type {Array.<Item>}\r\n     */\r\n    this.items = [];\r\n    \r\n    /**\r\n     * The passive items picked up by the player in the game\r\n     * @type {Array.<Item>}\r\n     */\r\n    this.passive = [];\r\n    \r\n    /**\r\n     * The capacity of the inventory (for non-passive items)\r\n     * @type {number}\r\n     */\r\n    this.capacity = 8;\r\n  }\r\n\r\n  /**\r\n   * Adds an item to the inventory\r\n   * @param {Item} item The item to add\r\n   * @return {boolean} True if the item could be added\r\n   */\r\n  addItem( item ) {\r\n    // Passive Items\r\n    if ( item.itemType === ItemType.PASSIVE ) {\r\n      this.passive.push( item.constructor.name );\r\n      return true;\r\n    }\r\n    \r\n    // Non-Passive Items\r\n    if ( this.items.length >= this.capacity ) {\r\n      return false;\r\n    }\r\n    this.items.push( item.constructor.name );\r\n    return true;\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/entity/items/Inventory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 267,
    "kind": "class",
    "name": "Inventory",
    "memberof": "src/entity/items/Inventory.js",
    "static": true,
    "longname": "src/entity/items/Inventory.js~Inventory",
    "access": "public",
    "export": true,
    "importPath": "src/entity/items/Inventory",
    "importStyle": "Inventory",
    "description": "The player's inventory which holds the items the player picks up",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 268,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/entity/items/Inventory.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/Inventory.js~Inventory#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "items",
    "memberof": "src/entity/items/Inventory.js~Inventory",
    "static": false,
    "longname": "src/entity/items/Inventory.js~Inventory#items",
    "access": "public",
    "description": "The items picked up by the player in the game (excludes passive items)",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Array.<Item>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "passive",
    "memberof": "src/entity/items/Inventory.js~Inventory",
    "static": false,
    "longname": "src/entity/items/Inventory.js~Inventory#passive",
    "access": "public",
    "description": "The passive items picked up by the player in the game",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Array.<Item>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "capacity",
    "memberof": "src/entity/items/Inventory.js~Inventory",
    "static": false,
    "longname": "src/entity/items/Inventory.js~Inventory#capacity",
    "access": "public",
    "description": "The capacity of the inventory (for non-passive items)",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "addItem",
    "memberof": "src/entity/items/Inventory.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/Inventory.js~Inventory#addItem",
    "access": "public",
    "description": "Adds an item to the inventory",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Item"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The item to add"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the item could be added"
    }
  },
  {
    "__docId__": 273,
    "kind": "file",
    "name": "src/entity/items/Item.js",
    "content": "import Entity from '../Entity';\r\nimport { ItemType } from './';\r\n\r\n/**\r\n * This is the base class for all items\r\n */\r\nexport default class Item extends Entity {\r\n  /**\r\n   * @constructor\r\n   * @param {SpriteConfig} config The configuration object for the entity\r\n   */\r\n  constructor( config ) {\r\n    super( config );\r\n    \r\n    /**\r\n     * The type of item\r\n     * @type {ItemType}\r\n     */\r\n    this.itemType = ItemType.ANY;\r\n\r\n    // Collision\r\n    this.scene.physics.add.existing( this );\r\n    this.body.setImmovable( true );\r\n    \r\n    /**\r\n     * The collider used to detect collisions with the player\r\n     * @type {Phaser.Physics.Arcade.Collider}\r\n     */\r\n    this.playerCollider = this.scene.physics\r\n      .add.collider( this, this.scene.player, this.onCollide );\r\n\r\n    // Interactive\r\n    this.setInteractive( { useHandCursor: true } );\r\n    this.on( 'pointerover', () => {\r\n      this.select();\r\n    } );\r\n    this.on( 'pointerout', () => {\r\n      this.unselect();\r\n    } );\r\n\r\n    // Lighting\r\n    this.setPipeline( 'LightPipeline' );\r\n  }\r\n\r\n  /**\r\n   * Called when the item is selected\r\n   */\r\n  select() {\r\n    this.setScale( this.scaleX + 0.2 );\r\n\r\n    /**\r\n     * The help text displayed to the player when an item is hovered over by the\r\n     * mouse\r\n     * @type {Phaser.GameObjects.Text}\r\n     */\r\n    this.helpText = this.scene.add.text( this.x, this.y, this.name, {\r\n      fontSize: '14px',\r\n      fontFamily: 'Rye',\r\n      color: '#FFFFFF'\r\n    } );\r\n    this.helpText.setShadow( 0, 2, '#333', 10 );\r\n    this.helpText.setScale( 1 / this.scene.cameras.main.zoom );\r\n  }\r\n\r\n  /**\r\n   * Called when the item is unselected\r\n   */\r\n  unselect() {\r\n    this.setScale( this.scaleX - 0.2 );\r\n    this.helpText.destroy();\r\n  }\r\n\r\n  /**\r\n   * Called when the player collides with the injection.\r\n   * @param {Injection} item The injection item\r\n   * @param {Player} player The player class\r\n   */\r\n  onCollide( item, player ) {\r\n    if ( player.inventory.addItem( item ) ) {\r\n      item.playerCollider.destroy();\r\n      item.destroy();\r\n      if ( item.helpText ) {\r\n        item.helpText.destroy();\r\n      }\r\n    }\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/entity/items/Item.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 274,
    "kind": "class",
    "name": "Item",
    "memberof": "src/entity/items/Item.js",
    "static": true,
    "longname": "src/entity/items/Item.js~Item",
    "access": "public",
    "export": true,
    "importPath": "src/entity/items/Item",
    "importStyle": "Item",
    "description": "This is the base class for all items",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/entity/Entity.js~Entity"
    ]
  },
  {
    "__docId__": 275,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/entity/items/Item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/Item.js~Item#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "SpriteConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration object for the entity"
      }
    ]
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "itemType",
    "memberof": "src/entity/items/Item.js~Item",
    "static": false,
    "longname": "src/entity/items/Item.js~Item#itemType",
    "access": "public",
    "description": "The type of item",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "ItemType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "playerCollider",
    "memberof": "src/entity/items/Item.js~Item",
    "static": false,
    "longname": "src/entity/items/Item.js~Item#playerCollider",
    "access": "public",
    "description": "The collider used to detect collisions with the player",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Physics.Arcade.Collider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "select",
    "memberof": "src/entity/items/Item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/Item.js~Item#select",
    "access": "public",
    "description": "Called when the item is selected",
    "lineNumber": 48,
    "params": [],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "helpText",
    "memberof": "src/entity/items/Item.js~Item",
    "static": false,
    "longname": "src/entity/items/Item.js~Item#helpText",
    "access": "public",
    "description": "The help text displayed to the player when an item is hovered over by the\nmouse",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.GameObjects.Text"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "unselect",
    "memberof": "src/entity/items/Item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/Item.js~Item#unselect",
    "access": "public",
    "description": "Called when the item is unselected",
    "lineNumber": 68,
    "params": [],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "onCollide",
    "memberof": "src/entity/items/Item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/Item.js~Item#onCollide",
    "access": "public",
    "description": "Called when the player collides with the injection.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Injection"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The injection item"
      },
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "The player class"
      }
    ],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "file",
    "name": "src/entity/items/ItemDrop.js",
    "content": "import Random from '../../util/Random';\r\nimport { VorpalSword } from './';\r\n\r\n/**\r\n * Contains methods for dropping items in a room\r\n */\r\nexport default class ItemDrop {\r\n  /**\r\n   * @param {number} x The x-position of the item\r\n   * @param {number} y The y-position of the item\r\n   * @param {Phaser.Scene} scene The current scene\r\n   */\r\n  static drop( x, y, scene ) {\r\n    const r = new Random( new Date().getTime() );\r\n    const num = r.randInt( 0, 100 );\r\n\r\n    // 8% VorpalSword\r\n    if ( num < 8 ) {\r\n      new VorpalSword( x, y, scene );\r\n    }\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/entity/items/ItemDrop.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 283,
    "kind": "class",
    "name": "ItemDrop",
    "memberof": "src/entity/items/ItemDrop.js",
    "static": true,
    "longname": "src/entity/items/ItemDrop.js~ItemDrop",
    "access": "public",
    "export": true,
    "importPath": "src/entity/items/ItemDrop",
    "importStyle": "ItemDrop",
    "description": "Contains methods for dropping items in a room",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "drop",
    "memberof": "src/entity/items/ItemDrop.js~ItemDrop",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/entity/items/ItemDrop.js~ItemDrop.drop",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-position of the item"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-position of the item"
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      }
    ],
    "return": null
  },
  {
    "__docId__": 285,
    "kind": "file",
    "name": "src/entity/items/Timelapse.js",
    "content": "import Item from './Item';\r\nimport { ItemType } from './';\r\n\r\n/**\r\n * Slows down the timer in the mini game that is currently being played. Can\r\n * only be used once.\r\n */\r\nexport default class Timelapse extends Item {\r\n  /**\r\n   * @param {number} x The x-position of the item\r\n   * @param {number} y The y-position of the item\r\n   * @param {Phaser.Scene} scene The current scene\r\n   */\r\n  constructor( x, y, scene ) {\r\n    super( { x: x, y: y, scene: scene, key: 'timelapse' } );\r\n\r\n    /**\r\n     * This item is a minigame item\r\n     * @type {ItemType}\r\n     */\r\n    this.itemType = ItemType.MINIGAME;\r\n    \r\n    /**\r\n     * The name of the item\r\n     * @type {string}\r\n     */\r\n    this.name = 'Timelapse';\r\n  }\r\n\r\n  /**\r\n   * Uses the item to slow down the minigame\r\n   * @param {ItemUseConfig} config The configuration passed in\r\n   */\r\n  use( config ) {\r\n    const minigame = config.minigame;\r\n    minigame.timeScale = 0.5;\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/entity/items/Timelapse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "class",
    "name": "Timelapse",
    "memberof": "src/entity/items/Timelapse.js",
    "static": true,
    "longname": "src/entity/items/Timelapse.js~Timelapse",
    "access": "public",
    "export": true,
    "importPath": "src/entity/items/Timelapse",
    "importStyle": "Timelapse",
    "description": "Slows down the timer in the mini game that is currently being played. Can\nonly be used once.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/entity/items/Item.js~Item"
    ]
  },
  {
    "__docId__": 287,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/entity/items/Timelapse.js~Timelapse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/Timelapse.js~Timelapse#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-position of the item"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-position of the item"
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      }
    ]
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "itemType",
    "memberof": "src/entity/items/Timelapse.js~Timelapse",
    "static": false,
    "longname": "src/entity/items/Timelapse.js~Timelapse#itemType",
    "access": "public",
    "description": "This item is a minigame item",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "ItemType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "name",
    "memberof": "src/entity/items/Timelapse.js~Timelapse",
    "static": false,
    "longname": "src/entity/items/Timelapse.js~Timelapse#name",
    "access": "public",
    "description": "The name of the item",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "use",
    "memberof": "src/entity/items/Timelapse.js~Timelapse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/Timelapse.js~Timelapse#use",
    "access": "public",
    "description": "Uses the item to slow down the minigame",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "ItemUseConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration passed in"
      }
    ],
    "return": null
  },
  {
    "__docId__": 291,
    "kind": "file",
    "name": "src/entity/items/VorpalSword.js",
    "content": "import Item from './Item';\r\nimport { ItemType } from './';\r\n\r\n/**\r\n * 5% chance that winning a microgame will instantly kill a non-boss enemy.\r\n */\r\nexport default class VorpalSword extends Item {\r\n  /**\r\n   * @param {number} x The x-position of the item\r\n   * @param {number} y The y-position of the item\r\n   * @param {Phaser.Scene} scene The current scene\r\n   */\r\n  constructor( x, y, scene ) {\r\n    super( { x: x, y: y, scene: scene, key: 'vorpal_sword' } );\r\n    \r\n    /**\r\n     * This is a passive item\r\n     * @type {ItemType}\r\n     */\r\n    this.itemType = ItemType.PASSIVE;\r\n    \r\n    /**\r\n     * The name of the item\r\n     * @type {string}\r\n     */\r\n    this.name = 'Vorpal Sword';\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  onCollide( item, player ) {\r\n    player.criticalChance += 5;\r\n    super.onCollide( item, player );\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/entity/items/VorpalSword.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 292,
    "kind": "class",
    "name": "VorpalSword",
    "memberof": "src/entity/items/VorpalSword.js",
    "static": true,
    "longname": "src/entity/items/VorpalSword.js~VorpalSword",
    "access": "public",
    "export": true,
    "importPath": "src/entity/items/VorpalSword",
    "importStyle": "VorpalSword",
    "description": "5% chance that winning a microgame will instantly kill a non-boss enemy.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/entity/items/Item.js~Item"
    ]
  },
  {
    "__docId__": 293,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/entity/items/VorpalSword.js~VorpalSword",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/VorpalSword.js~VorpalSword#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-position of the item"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-position of the item"
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      }
    ]
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "itemType",
    "memberof": "src/entity/items/VorpalSword.js~VorpalSword",
    "static": false,
    "longname": "src/entity/items/VorpalSword.js~VorpalSword#itemType",
    "access": "public",
    "description": "This is a passive item",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "ItemType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "name",
    "memberof": "src/entity/items/VorpalSword.js~VorpalSword",
    "static": false,
    "longname": "src/entity/items/VorpalSword.js~VorpalSword#name",
    "access": "public",
    "description": "The name of the item",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "onCollide",
    "memberof": "src/entity/items/VorpalSword.js~VorpalSword",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/items/VorpalSword.js~VorpalSword#onCollide",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "override": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 297,
    "kind": "file",
    "name": "src/entity/Player.js",
    "content": "import Entity from './Entity';\r\nimport HealthBar from '../battle/HealthBar';\r\nimport { Inventory } from './items';\r\nimport Random from '../util/Random';\r\n\r\n/**\r\n * Base class for all player interactions\r\n */\r\nexport default class Player extends Entity {\r\n  /**\r\n   * @constructor\r\n   * @param {number} x The horizontal position\r\n   * @param {number} y The vertical position\r\n   * @param {Phaser.Scene} scene The current scene\r\n   */\r\n  constructor( x, y, scene ) {\r\n    super( {\r\n      scene: scene,\r\n      key: 'player',\r\n      x: x,\r\n      y: y\r\n    } );\r\n    \r\n    /**\r\n     * The player's inventory to hold items\r\n     * @type {Inventory}\r\n     */\r\n    this.inventory = new Inventory();\r\n    \r\n    /**\r\n     * The players movement speed in the world\r\n     * @type {number}\r\n     */\r\n    this.speed = 200;\r\n    \r\n    /**\r\n     * If true, the player cannot move by use of the keyboard / controller\r\n     * @type {boolean}\r\n     */\r\n    this.movementDisabled = false;\r\n    \r\n    /**\r\n     * The chance that a critical hit will happen (0-100)\r\n     * @type {number}\r\n     */\r\n    this.criticalChance = 0;\r\n    \r\n    /**\r\n     * Whether or not the player is alive\r\n     * @type {boolean}\r\n     */\r\n    this.alive = true;\r\n    \r\n    /**\r\n     * The movement destination of the player. Used when moving the player\r\n     * without the use of the keyboard.\r\n     * @type {{ x: number, y: number }}\r\n     */\r\n    this.dest = null;\r\n    \r\n    /**\r\n     * The callback when automatic player movement is finished\r\n     * @type {function}\r\n     */\r\n    this.movementCallback = null;\r\n    \r\n    // this.anims.play( 'sample' );\r\n    this.setHealth( 10 );\r\n    this.drawPlayerHUD();\r\n    this.setPipeline( 'LightPipeline' );\r\n  }\r\n\r\n  /**\r\n   * Draws the player HUD\r\n   */\r\n  drawPlayerHUD() {\r\n    const { width } = this.scene.game.config;\r\n    const HUD_X = -width;\r\n\r\n    const healthTxt = this.scene.add.text(\r\n      HUD_X + 10, 10, 'Health', {\r\n        fontSize: '12px',\r\n        color: '#FFF',\r\n        fontFamily: 'Rye'\r\n      }\r\n    );\r\n    healthTxt.setShadow( 0, 2, '#000', 10 );\r\n\r\n    /**\r\n     * The player's health bar\r\n     * @type {HealthBar}\r\n     */\r\n    this.healthBar = new HealthBar( this.scene, {\r\n      x: healthTxt.x + healthTxt.width + 10,\r\n      y: 12,\r\n      height: 10\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  update( time, delta ) {\r\n    // Stop any previous movement from the last frame\r\n    this.body.setVelocity( 0 );\r\n\r\n    // Allow player to move themselves\r\n    if ( !this.movementDisabled ) {\r\n      // Horizontal movement\r\n      if ( this.scene.keys.left.isDown ) {\r\n        this.body.setVelocityX( -this.speed );\r\n      }\r\n      else if ( this.scene.keys.right.isDown ) {\r\n        this.body.setVelocityX( this.speed );\r\n      }\r\n\r\n      // Vertical movement\r\n      if ( this.scene.keys.up.isDown ) {\r\n        this.body.setVelocityY( -this.speed );\r\n      }\r\n      else if ( this.scene.keys.down.isDown ) {\r\n        this.body.setVelocityY( this.speed );\r\n      }\r\n    }\r\n    // Automatically move player into a battle room and lock doors\r\n    else if ( this.dest ) {\r\n      this.body.setVelocityX( this.dest.x - this.x );\r\n      this.body.setVelocityY( this.dest.y - this.y );\r\n      if ( this.body.velocity.length() < 2 ) {\r\n        this.movementDisabled = false;\r\n        if ( typeof this.movementCallback === 'function' ) {\r\n          this.movementCallback();\r\n          this.movementCallback = null;\r\n        }\r\n        this.dest = null;\r\n      }\r\n    }\r\n\r\n    // Normalize and scale the velocity so that sprite can't move\r\n    // faster along a diagonal\r\n    this.body.velocity.normalize().scale( this.speed );\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  injure( damage ) {\r\n    super.injure( damage );\r\n    this.healthBar.setPercent( this.health / this.maxHealth );\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  heal( amount ) {\r\n    super.heal( amount );\r\n    this.healthBar.setPercent( this.health / this.maxHealth );\r\n  }\r\n\r\n  /**\r\n   * Attacks the given enemy with the given damage\r\n   * @param {Enemy} enemy The enemy to attack\r\n   * @param {number} damage The amount to injure the enemy\r\n   */\r\n  attack( enemy, damage ) {\r\n    // Critical Hit\r\n    if ( this.criticalChance !== 0 ) {\r\n      const r = new Random();\r\n      if ( r.randInt( 0, 100 ) < this.criticalChance ) {\r\n        damage = enemy.health;\r\n      }\r\n    }\r\n    enemy.injure( damage );\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  slay() {\r\n    this.alive = false;\r\n  }\r\n\r\n  /**\r\n   * Sets the destination for the player to move to\r\n   * @param {number} x The x-coordinate\r\n   * @param {number} y The y-coordinate\r\n   * @param {function} callback The callback when the movement is finished\r\n   */\r\n  setDestination( x, y, callback ) {\r\n    this.dest = {\r\n      x: x,\r\n      y: y\r\n    };\r\n    this.movementDisabled = true;\r\n    this.movementCallback = callback;\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/entity/Player.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 298,
    "kind": "class",
    "name": "Player",
    "memberof": "src/entity/Player.js",
    "static": true,
    "longname": "src/entity/Player.js~Player",
    "access": "public",
    "export": true,
    "importPath": "src/entity/Player",
    "importStyle": "Player",
    "description": "Base class for all player interactions",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/entity/Entity.js~Entity"
    ]
  },
  {
    "__docId__": 299,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/entity/Player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Player.js~Player#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The horizontal position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The vertical position"
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      }
    ]
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "inventory",
    "memberof": "src/entity/Player.js~Player",
    "static": false,
    "longname": "src/entity/Player.js~Player#inventory",
    "access": "public",
    "description": "The player's inventory to hold items",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Inventory"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "speed",
    "memberof": "src/entity/Player.js~Player",
    "static": false,
    "longname": "src/entity/Player.js~Player#speed",
    "access": "public",
    "description": "The players movement speed in the world",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "movementDisabled",
    "memberof": "src/entity/Player.js~Player",
    "static": false,
    "longname": "src/entity/Player.js~Player#movementDisabled",
    "access": "public",
    "description": "If true, the player cannot move by use of the keyboard / controller",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "criticalChance",
    "memberof": "src/entity/Player.js~Player",
    "static": false,
    "longname": "src/entity/Player.js~Player#criticalChance",
    "access": "public",
    "description": "The chance that a critical hit will happen (0-100)",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "alive",
    "memberof": "src/entity/Player.js~Player",
    "static": false,
    "longname": "src/entity/Player.js~Player#alive",
    "access": "public",
    "description": "Whether or not the player is alive",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "dest",
    "memberof": "src/entity/Player.js~Player",
    "static": false,
    "longname": "src/entity/Player.js~Player#dest",
    "access": "public",
    "description": "The movement destination of the player. Used when moving the player\nwithout the use of the keyboard.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "{ x: number, y: number }"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "movementCallback",
    "memberof": "src/entity/Player.js~Player",
    "static": false,
    "longname": "src/entity/Player.js~Player#movementCallback",
    "access": "public",
    "description": "The callback when automatic player movement is finished",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "drawPlayerHUD",
    "memberof": "src/entity/Player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Player.js~Player#drawPlayerHUD",
    "access": "public",
    "description": "Draws the player HUD",
    "lineNumber": 76,
    "params": [],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "healthBar",
    "memberof": "src/entity/Player.js~Player",
    "static": false,
    "longname": "src/entity/Player.js~Player#healthBar",
    "access": "public",
    "description": "The player's health bar",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "HealthBar"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "update",
    "memberof": "src/entity/Player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Player.js~Player#update",
    "access": "public",
    "description": "",
    "lineNumber": 103,
    "override": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      },
      {
        "name": "delta",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "injure",
    "memberof": "src/entity/Player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Player.js~Player#injure",
    "access": "public",
    "description": "",
    "lineNumber": 147,
    "override": true,
    "params": [
      {
        "name": "damage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "heal",
    "memberof": "src/entity/Player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Player.js~Player#heal",
    "access": "public",
    "description": "",
    "lineNumber": 155,
    "override": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "attack",
    "memberof": "src/entity/Player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Player.js~Player#attack",
    "access": "public",
    "description": "Attacks the given enemy with the given damage",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "Enemy"
        ],
        "spread": false,
        "optional": false,
        "name": "enemy",
        "description": "The enemy to attack"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "damage",
        "description": "The amount to injure the enemy"
      }
    ],
    "return": null
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "slay",
    "memberof": "src/entity/Player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Player.js~Player#slay",
    "access": "public",
    "description": "",
    "lineNumber": 179,
    "override": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "setDestination",
    "memberof": "src/entity/Player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/entity/Player.js~Player#setDestination",
    "access": "public",
    "description": "Sets the destination for the player to move to",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x-coordinate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y-coordinate"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback when the movement is finished"
      }
    ],
    "return": null
  },
  {
    "__docId__": 322,
    "kind": "file",
    "name": "src/globals.js",
    "content": "/**\r\n * @typedef {Object} SpriteConfig\r\n * @property {Phaser.Scene} scene The current scene\r\n * @property {number} x The horizontal position\r\n * @property {number} y The vertical position\r\n * @property {string} key The key of the texture used to render the sprite\r\n */\r\n\r\n/**\r\n * @typedef {Object} ItemUseConfig\r\n * @property {Phaser.Scene} scene The current scene\r\n * @property {Battle} battle The current battle\r\n * @property {MiniGame} minigame The current minigame\r\n */\r\n\r\n/**\r\n * @typedef {Object} HealthBarConfig\r\n * @property {number} width The width in pixels\r\n * @property {number} height The height in pixels\r\n * @property {number} x The horizontal position in the world\r\n * @property {number} y The vertical position in the world\r\n * @property {number} backgroundColor The background color of the bar\r\n * @property {number} barColor The color of the health bar\r\n * @property {{color: number, width: number}} border The configuration for the \r\n *           border\r\n * @property {number} animationDuration Time in ms for the bar to change width\r\n */\r\n\r\n/**\r\n * @typedef {Object} DungeonConfig\r\n * @property {number} width The width in tiles\r\n * @property {number} height The height in tiles\r\n * @property {number} randomSeed A seed for RNG\r\n * @property {number} doorPadding The number of tiles required on each side of a\r\n *           door\r\n * @property {RoomConfig} rooms The configuration for generating rooms\r\n */\r\n\r\n/**\r\n * @typedef {Object} RoomConfig\r\n * @property {RandomNumberRange} width The width in tiles\r\n * @property {RandomNumberRange} height The height in tiles\r\n * @property {number} maxArea The maximum possible area\r\n * @property {number} maxRooms The maximum number of rooms allowed for\r\n *           generation\r\n */\r\n\r\n/**\r\n * @typedef {Object} RandomNumberRange\r\n * @property {number} min The minimum possible number\r\n * @property {number} max The maximum possible number\r\n * @property {boolean} even True means only even numbers. False means only odd\r\n *           numbers. Undefined means all numbers.\r\n */\r\n\r\n/**\r\n * @typedef {Object} RoomAttachment\r\n * @property {number} x The horizontal tile position\r\n * @property {number} y The vertical tile position\r\n * @property {Room} target The room to attach\r\n * @property {number} dist The distance between the two rooms\r\n * @property {Direction} direction The direction to the room attachment\r\n */\r\n\r\n/**\r\n * @typedef {Object} TilePosition\r\n * @property {number} x The horizontal tile position\r\n * @property {number} y The vertical tile position\r\n */\r\n\r\n/**\r\n * @typedef {Object} Door\r\n * @property {number} x The horizontal tile position\r\n * @property {number} y The vertical tile position\r\n * @property {Edge} edge The edge of the room the door lies on \r\n */\r\n\r\n/**\r\n * An enum describing a direction (NORTH, EAST, SOUTH, WEST)\r\n */\r\nconst Direction = {\r\n  NORTH: 0,\r\n  EAST: 1,\r\n  SOUTH: 2,\r\n  WEST: 3\r\n};\r\n\r\n/**\r\n * An enum describing orientation (VERTICAL, HORIZONTAL)\r\n */\r\nconst Orientation = {\r\n  VERTICAL: 0,\r\n  HORIZONTAL: 1\r\n};\r\n\r\n/**\r\n * An enum describing an edge (NONE, TOP, RIGHT, BOTTOM, LEFT)\r\n */\r\nconst Edge = {\r\n  NONE: -1,\r\n  TOP: 0,\r\n  RIGHT: 1,\r\n  BOTTOM: 2,\r\n  LEFT: 3\r\n};\r\n\r\n/**\r\n * An enum describing a room type (START, BATTLE, ITEM, HALLWAY, END)\r\n */\r\nconst RoomType = {\r\n  START: 0,\r\n  BATTLE: 1,\r\n  ITEM: 2,\r\n  HALLWAY: 3,\r\n  END: 4\r\n};\r\n\r\n/**\r\n * An enum describing minigame difficulty (EAST, INTERMEDIATE, ADVANCED)\r\n */\r\nconst Difficulty = {\r\n  EASY: 1,\r\n  INTERMEDIATE: 2,\r\n  ADVANCED: 3\r\n};\r\n\r\nexport { Direction, Orientation, RoomType, Edge, Difficulty };",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/globals.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 323,
    "kind": "typedef",
    "name": "SpriteConfig",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~SpriteConfig",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The horizontal position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The vertical position"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the texture used to render the sprite"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SpriteConfig"
    }
  },
  {
    "__docId__": 324,
    "kind": "typedef",
    "name": "ItemUseConfig",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~ItemUseConfig",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      },
      {
        "nullable": null,
        "types": [
          "Battle"
        ],
        "spread": false,
        "optional": false,
        "name": "battle",
        "description": "The current battle"
      },
      {
        "nullable": null,
        "types": [
          "MiniGame"
        ],
        "spread": false,
        "optional": false,
        "name": "minigame",
        "description": "The current minigame"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ItemUseConfig"
    }
  },
  {
    "__docId__": 325,
    "kind": "typedef",
    "name": "HealthBarConfig",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~HealthBarConfig",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width in pixels"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height in pixels"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The horizontal position in the world"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The vertical position in the world"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "backgroundColor",
        "description": "The background color of the bar"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "barColor",
        "description": "The color of the health bar"
      },
      {
        "nullable": null,
        "types": [
          "{color: number, width: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "border",
        "description": "The configuration for the \n          border"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "animationDuration",
        "description": "Time in ms for the bar to change width"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "HealthBarConfig"
    }
  },
  {
    "__docId__": 326,
    "kind": "typedef",
    "name": "DungeonConfig",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~DungeonConfig",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width in tiles"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height in tiles"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "randomSeed",
        "description": "A seed for RNG"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "doorPadding",
        "description": "The number of tiles required on each side of a\n          door"
      },
      {
        "nullable": null,
        "types": [
          "RoomConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "rooms",
        "description": "The configuration for generating rooms"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "DungeonConfig"
    }
  },
  {
    "__docId__": 327,
    "kind": "typedef",
    "name": "RoomConfig",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~RoomConfig",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "RandomNumberRange"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "The width in tiles"
      },
      {
        "nullable": null,
        "types": [
          "RandomNumberRange"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "The height in tiles"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxArea",
        "description": "The maximum possible area"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxRooms",
        "description": "The maximum number of rooms allowed for\n          generation"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RoomConfig"
    }
  },
  {
    "__docId__": 328,
    "kind": "typedef",
    "name": "RandomNumberRange",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~RandomNumberRange",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The minimum possible number"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "The maximum possible number"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "even",
        "description": "True means only even numbers. False means only odd\n          numbers. Undefined means all numbers."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RandomNumberRange"
    }
  },
  {
    "__docId__": 329,
    "kind": "typedef",
    "name": "RoomAttachment",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~RoomAttachment",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The horizontal tile position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The vertical tile position"
      },
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The room to attach"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dist",
        "description": "The distance between the two rooms"
      },
      {
        "nullable": null,
        "types": [
          "Direction"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "The direction to the room attachment"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RoomAttachment"
    }
  },
  {
    "__docId__": 330,
    "kind": "typedef",
    "name": "TilePosition",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~TilePosition",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The horizontal tile position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The vertical tile position"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TilePosition"
    }
  },
  {
    "__docId__": 331,
    "kind": "typedef",
    "name": "Door",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~Door",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The horizontal tile position"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The vertical tile position"
      },
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge",
        "description": "The edge of the room the door lies on"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Door"
    }
  },
  {
    "__docId__": 332,
    "kind": "variable",
    "name": "Direction",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~Direction",
    "access": "public",
    "export": true,
    "importPath": "src/globals",
    "importStyle": "{Direction}",
    "description": "An enum describing a direction (NORTH, EAST, SOUTH, WEST)",
    "lineNumber": 81,
    "type": {
      "types": [
        "{\"NORTH\": *, \"EAST\": number, \"SOUTH\": number, \"WEST\": number}"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "variable",
    "name": "Orientation",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~Orientation",
    "access": "public",
    "export": true,
    "importPath": "src/globals",
    "importStyle": "{Orientation}",
    "description": "An enum describing orientation (VERTICAL, HORIZONTAL)",
    "lineNumber": 91,
    "type": {
      "types": [
        "{\"VERTICAL\": *, \"HORIZONTAL\": number}"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "variable",
    "name": "RoomType",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~RoomType",
    "access": "public",
    "export": true,
    "importPath": "src/globals",
    "importStyle": "{RoomType}",
    "description": "An enum describing a room type (START, BATTLE, ITEM, HALLWAY, END)",
    "lineNumber": 110,
    "type": {
      "types": [
        "{\"START\": *, \"BATTLE\": number, \"ITEM\": number, \"HALLWAY\": number, \"END\": number}"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "variable",
    "name": "Edge",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~Edge",
    "access": "public",
    "export": true,
    "importPath": "src/globals",
    "importStyle": "{Edge}",
    "description": "An enum describing an edge (NONE, TOP, RIGHT, BOTTOM, LEFT)",
    "lineNumber": 99,
    "type": {
      "types": [
        "{\"NONE\": *, \"TOP\": *, \"RIGHT\": number, \"BOTTOM\": number, \"LEFT\": number}"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "variable",
    "name": "Difficulty",
    "memberof": "src/globals.js",
    "static": true,
    "longname": "src/globals.js~Difficulty",
    "access": "public",
    "export": true,
    "importPath": "src/globals",
    "importStyle": "{Difficulty}",
    "description": "An enum describing minigame difficulty (EAST, INTERMEDIATE, ADVANCED)",
    "lineNumber": 121,
    "type": {
      "types": [
        "{\"EASY\": number, \"INTERMEDIATE\": number, \"ADVANCED\": number}"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "file",
    "name": "src/main.js",
    "content": "import 'phaser';\r\nimport BootScene from './scenes/BootScene';\r\nimport TitleScene from './scenes/TitleScene';\r\nimport GameScene from './scenes/GameScene';\r\nimport InventoryScene from './scenes/InventoryScene';\r\nimport PauseScene from './scenes/PauseScene';\r\n\r\n/**\r\n * The configuration object for the Phaser Game instance\r\n * @type {GameConfig}\r\n */\r\nconst config = {\r\n  type: Phaser.WEBGL,\r\n  parent: 'content',\r\n  width: 800,\r\n  height: 600,\r\n  scene: [\r\n    BootScene,\r\n    TitleScene,\r\n    GameScene,\r\n    InventoryScene,\r\n    PauseScene\r\n  ],\r\n  physics: {\r\n    default: 'arcade',\r\n    arcade: { gravity: { y: 0 } }\r\n  }\r\n};\r\n\r\nnew Phaser.Game( config );",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/main.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 338,
    "kind": "variable",
    "name": "config",
    "memberof": "src/main.js",
    "static": true,
    "longname": "src/main.js~config",
    "access": "public",
    "export": false,
    "importPath": "src/main",
    "importStyle": null,
    "description": "The configuration object for the Phaser Game instance",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "GameConfig"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 339,
    "kind": "file",
    "name": "src/minigames/DanceDance.js",
    "content": "import { Difficulty, MiniGame } from './';\r\n\r\n/**\r\n * The Dance Dance mini game is like DDR and the player needs to complete the\r\n * arrow combination in order before time expires. If a mistake is made or time\r\n * runs out, the player loses.\r\n */\r\nexport default class DanceDance extends MiniGame {\r\n  /**\r\n   * Creates a DanceDance mini game object\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super( 'DanceDance' );\r\n    \r\n    /**\r\n     * The name of the minigame\r\n     * @type {string}\r\n     */\r\n    this.name = 'Dance Dance';\r\n    \r\n    /**\r\n     * The description of the minigame\r\n     * @type {string}\r\n     */\r\n    this.description = 'The player has to do the arrow combination displayed ' +\r\n      'before the time runs out';\r\n    \r\n    /**\r\n     * The text displayed quickly to the user before the minigame begins\r\n     * @type {string}\r\n     */\r\n    this.text = 'Dance!';\r\n    \r\n    /**\r\n     * The time duration of the mini game in ms\r\n     * @type {number}\r\n     */\r\n    this.duration = 3000;\r\n    \r\n    /**\r\n     * The length of the combo required to successfully complete the minigame\r\n     * @type {number}\r\n     */\r\n    this.comboLength = -1;\r\n    \r\n    /**\r\n     * The key combination required to complete the minigame\r\n     * @type {Phaser.Input.Keyboard.KeyCombo}\r\n     */\r\n    this.combo = null;\r\n    \r\n    /**\r\n     * The text displayed to the user to show the combination required\r\n     * @type {Phaser.GameObjects.Text}\r\n     */\r\n    this.danceText = null;\r\n    \r\n    /**\r\n     * The number of times the key was pressed during the minigame\r\n     * @type {number}\r\n     */\r\n    this.inputCount = 0;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  create( data ) {\r\n    super.create( data );\r\n\r\n    // Set combo length\r\n    switch ( this.difficulty ) {\r\n      case Difficulty.INTERMEDIATE:\r\n        this.comboLength = 5;\r\n        break;\r\n      case Difficulty.ADVANCED:\r\n        this.comboLength = 6;\r\n        break;\r\n      case Difficulty.EASY:\r\n      default:\r\n        this.comboLength = 4;\r\n        break;\r\n    }\r\n\r\n    // Create Key Combination\r\n    const dirs = [ 'W', 'A', 'S', 'D' ];\r\n    const keyCombo = [];\r\n    while ( keyCombo.length < this.comboLength ) {\r\n      keyCombo.push( dirs[ Math.floor( Math.random() * 4 ) ] );\r\n    }\r\n    this.combo = this.input.keyboard.createCombo(\r\n      keyCombo, { resetOnWrongKey: true }\r\n    );\r\n    \r\n    // On combo match, win mini game\r\n    this.input.keyboard.on( 'keycombomatch', () => {\r\n      this.win();\r\n    } );\r\n\r\n    // Each time player hits a key, inputCount will be increased\r\n    this.input.keyboard.on( 'keydown', () => {\r\n      this.inputCount++;\r\n    } );\r\n\r\n    // Create the display text for the combination\r\n    if ( this.difficulty === Difficulty.ADVANCED ) {\r\n      keyCombo.reverse();\r\n    }\r\n    const txt = keyCombo.map( ( l ) => {\r\n      switch ( l ) {\r\n        case 'W':\r\n          return '↑';\r\n        case 'A':\r\n          return '←';\r\n        case 'S':\r\n          return '↓';\r\n        case 'D':\r\n          return '→';\r\n        default:\r\n          return '';\r\n      }\r\n    } ).join( ' ' );\r\n    this.danceText = this.add.text(\r\n      this.w / 2,\r\n      this.h / 2,\r\n      txt, {\r\n        fontSize: '40px',\r\n        fill: '#FFF'\r\n      }\r\n    );\r\n    this.danceText.setPosition(\r\n      this.danceText.x - this.danceText.width / 2,\r\n      this.danceText.y - this.danceText.height / 2\r\n    );\r\n    this.danceText.setVisible( false );\r\n  }\r\n\r\n  /**\r\n   * @see MiniGame#startGame\r\n   */\r\n  startGame() {\r\n    super.startGame();\r\n    this.inputCount = 0;\r\n    this.danceText.setVisible( true );\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  updateMiniGame( time, delta ) {\r\n    if ( this.inputCount !== this.combo.index ) {\r\n      this.lose();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  reset() {\r\n    this.combo.destroy();\r\n    super.reset();\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/minigames/DanceDance.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 340,
    "kind": "class",
    "name": "DanceDance",
    "memberof": "src/minigames/DanceDance.js",
    "static": true,
    "longname": "src/minigames/DanceDance.js~DanceDance",
    "access": "public",
    "export": true,
    "importPath": "src/minigames/DanceDance",
    "importStyle": "DanceDance",
    "description": "The Dance Dance mini game is like DDR and the player needs to complete the\narrow combination in order before time expires. If a mistake is made or time\nruns out, the player loses.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/minigames/.js~MiniGame"
    ]
  },
  {
    "__docId__": 341,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#constructor",
    "access": "public",
    "description": "Creates a DanceDance mini game object",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "name",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#name",
    "access": "public",
    "description": "The name of the minigame",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 343,
    "kind": "member",
    "name": "description",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#description",
    "access": "public",
    "description": "The description of the minigame",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 344,
    "kind": "member",
    "name": "text",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#text",
    "access": "public",
    "description": "The text displayed quickly to the user before the minigame begins",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 345,
    "kind": "member",
    "name": "duration",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#duration",
    "access": "public",
    "description": "The time duration of the mini game in ms",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "comboLength",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#comboLength",
    "access": "public",
    "description": "The length of the combo required to successfully complete the minigame",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "combo",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#combo",
    "access": "public",
    "description": "The key combination required to complete the minigame",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Input.Keyboard.KeyCombo"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "danceText",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#danceText",
    "access": "public",
    "description": "The text displayed to the user to show the combination required",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.GameObjects.Text"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "inputCount",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#inputCount",
    "access": "public",
    "description": "The number of times the key was pressed during the minigame",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "create",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#create",
    "access": "public",
    "description": "",
    "lineNumber": 69,
    "override": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "startGame",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#startGame",
    "access": "public",
    "description": "",
    "see": [
      "MiniGame#startGame"
    ],
    "lineNumber": 142,
    "params": [],
    "return": null
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "updateMiniGame",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#updateMiniGame",
    "access": "public",
    "description": "",
    "lineNumber": 151,
    "override": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      },
      {
        "name": "delta",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "reset",
    "memberof": "src/minigames/DanceDance.js~DanceDance",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/DanceDance.js~DanceDance#reset",
    "access": "public",
    "description": "",
    "lineNumber": 160,
    "override": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 360,
    "kind": "file",
    "name": "src/minigames/index.js",
    "content": "import MiniGame from './MiniGame';\r\nimport DanceDance from './DanceDance';\r\nimport { Difficulty } from '../globals';\r\n\r\nexport {\r\n  MiniGame,\r\n  Difficulty,\r\n  DanceDance\r\n};",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/minigames/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 361,
    "kind": "file",
    "name": "src/minigames/MiniGame.js",
    "content": "import { ItemType } from '../entity/items';\r\nimport KeyBinding from '../util/KeyBinding';\r\nimport { Difficulty } from '../globals';\r\n\r\n/**\r\n * Base class for all mini games\r\n */\r\nexport default class MiniGame extends Phaser.Scene {\r\n  /**\r\n   * Creates a mini game within the current scene\r\n   * @constructor\r\n   * @param {string} key - The scene key\r\n   */\r\n  constructor( key ) {\r\n    super( { key: key } );\r\n    \r\n    /**\r\n     * The scene key\r\n     * @type {string}\r\n     */\r\n    this.key = key;\r\n    \r\n    /**\r\n     * The name of the minigame\r\n     * @type {string}\r\n     */\r\n    this.name = 'Default MiniGame';\r\n    \r\n    /**\r\n     * The description of the minigame\r\n     * @type {string}\r\n     */\r\n    this.description = 'Default description';\r\n\r\n    /**\r\n     * The text displayed quickly to the user before the minigame begins\r\n     * @type {string}\r\n     */\r\n    this.text = 'Default!';\r\n\r\n    /**\r\n     * The time duration of the mini game in ms\r\n     * @type {number}\r\n     */\r\n    this.duration = -1;\r\n    \r\n    /**\r\n     * The amount of time elapsed in ms since the minigame started\r\n     * @type {number}\r\n     */\r\n    this.elapsedTime = 0;\r\n    \r\n    /**\r\n     * Whether or not the minigame has started\r\n     * @type {boolean}\r\n     */\r\n    this.started = false;\r\n    \r\n    /**\r\n     * The horizontal position of the minigame window\r\n     * @type {number}\r\n     */\r\n    this.x = 25;\r\n    \r\n    /**\r\n     * The vertical position of the minigame window\r\n     * @type {number}\r\n     */\r\n    this.y = 25;\r\n    \r\n    /**\r\n     * The difficulty of the minigame\r\n     * @type {Difficulty}\r\n     */\r\n    this.difficulty = Difficulty.EASY;\r\n    \r\n    /**\r\n     * The time scale applied to the duration of the minigame\r\n     * @type {number}\r\n     */\r\n    this.timeScale = 1;\r\n    \r\n    /**\r\n     * The parent scene that created this minigame\r\n     * @type {Phaser.Scene}\r\n     */\r\n    this.parent = null;\r\n    \r\n    /**\r\n     * The width of the game\r\n     * @type {number}\r\n     */\r\n    this.w = -1;\r\n    \r\n    /**\r\n     * The height of the game\r\n     * @type {number}\r\n     */\r\n    this.h = -1;\r\n    \r\n    /**\r\n     * The text graphic displayed to the user quickly before the minigame starts\r\n     * @type {Phaser.GameObjects.Text}\r\n     */\r\n    this.alertText = null;\r\n    \r\n    /**\r\n     * The ID of the timeout used for starting the minigame\r\n     * @type {number}\r\n     */\r\n    this.startTimeout = -1;\r\n    \r\n    /**\r\n     * The graphics bar used to display the amount of time left in the minigame\r\n     * @type {Phaser.GameObjects.Graphics}\r\n     */\r\n    this.timerBar = null;\r\n  }\r\n\r\n  /**\r\n   * Initializes data when the mini game is created\r\n   * @param {object} data - information passed from parent scene\r\n   */\r\n  create( data ) {\r\n    this.parent = data.parent;\r\n    this.difficulty = data.difficulty;\r\n    this.w = this.sys.game.config.width;\r\n    this.h = this.sys.game.config.height;\r\n\r\n    const background = this.add.graphics();\r\n    background.fillStyle( 0x999999, 1 );\r\n    background.fillRect( this.x, this.y, this.w - 50, this.h - 50 );\r\n\r\n    this.add.text( this.x + 16, this.y + 16, this.name,\r\n      {\r\n        fontSize: '24px',\r\n        fill: '#FFF'\r\n      } );\r\n    this.add.text( this.x + 16, this.y + 40, this.description,\r\n      {\r\n        fontSize: '12px',\r\n        fill: '#FFF'\r\n      } );\r\n\r\n    this.alertText = this.add.text( this.w / 2, this.h / 2, this.text,\r\n      {\r\n        fontSize: '40px',\r\n        fill: '#FFF'\r\n      } );\r\n    this.alertText.setPosition(\r\n      this.alertText.x - this.alertText.width / 2,\r\n      this.alertText.y - this.alertText.height / 2\r\n    );\r\n\r\n    // Show text for 1 second, then start mini game\r\n    this.startTimeout = setTimeout( () => {\r\n      this.startGame();\r\n    }, 1000 );\r\n\r\n    this.timerBar = this.add.graphics();\r\n    this.timerBar.fillStyle( 0xFFFFFF, 0.4 );\r\n    this.timerBar.fillRect( this.x, this.h - 10 - this.y, this.w - 50, 10 );\r\n\r\n    /**\r\n     * Object used to store the keys available for use in the minigame\r\n     * @type {Object}\r\n     */\r\n    this.keys = KeyBinding.createKeys( this, [ 'interact' ] );\r\n  }\r\n\r\n  /**\r\n   * Updates every tick of the game loop\r\n   * @param {number} time The current time\r\n   * @param {number} delta The delta time in ms since the last frame\r\n   */\r\n  update( time, delta ) {\r\n    if ( this.started ) {\r\n      if ( this.duration !== -1 ) {\r\n        if ( this.elapsedTime > this.duration ) {\r\n          this.lose();\r\n        }\r\n        this.elapsedTime += delta * this.timeScale;\r\n\r\n        this.timerBar.clear();\r\n        this.timerBar.fillStyle( 0xFFFFFF, 0.4 );\r\n        this.timerBar.fillRect( this.x,\r\n          this.h - 10 - this.y,\r\n          this.w - ( ( this.w - 50 ) * ( this.elapsedTime / this.duration ) )\r\n          - 50,\r\n          10\r\n        );\r\n      }\r\n      this.updateMiniGame( time, delta );\r\n    }\r\n    else if ( this.keys.interact.isDown ) {\r\n      this.openInventory();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens the inventory\r\n   */\r\n  openInventory() {\r\n    clearTimeout( this.startTimeout );\r\n    this.input.keyboard.resetKeys();\r\n    this.scene\r\n      .launch( 'InventoryScene', {\r\n        parent: this,\r\n        inventory: this.parent.scene.player.inventory,\r\n        context: ItemType.MINIGAME\r\n      } )\r\n      .bringToTop( 'InventoryScene' )\r\n      .pause();\r\n  }\r\n\r\n  /**\r\n   * Closes the inventory\r\n   * @param {Item} item The item selected from the inventory\r\n   */\r\n  closeInventory( item ) {\r\n    this.scene.stop( 'InventoryScene' );\r\n    this.input.keyboard.resetKeys();\r\n    this.scene.resume();\r\n\r\n    if ( item && item.itemType === ItemType.MINIGAME ) {\r\n      item.use( { minigame: this } );\r\n      this.parent.scene.player.inventory.items.splice( item.inventoryIndex, 1 );\r\n      this.startGame();\r\n    }\r\n    else {\r\n      this.startTimeout = setTimeout( () => {\r\n        this.startGame();\r\n      }, 1000 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called right before the mini game starts\r\n   */\r\n  startGame() {\r\n    this.alertText.destroy();\r\n    this.started = true;\r\n  }\r\n\r\n  /**\r\n   * This method will only be updated once the mini game has officially started.\r\n   * The mini game will start after the alert text disappears.\r\n   * @param {number} time The current time\r\n   * @param {number} delta The delta time in ms since the last frame\r\n   */\r\n  updateMiniGame( time, delta ) {\r\n    // NOTE: Override this in mini game classes\r\n    throw new Error( 'updateMiniGame() must be overriden' );\r\n  }\r\n\r\n  /**\r\n   * Called when the mini game has been won. Will redirect back to combat.\r\n   */\r\n  win() {\r\n    const timeLeft = this.duration - this.elapsedTime;\r\n\r\n    this.reset();\r\n    this.parent.continueCombat( {\r\n      win: true,\r\n      damage: Math.ceil( timeLeft / 1000 ) * this.difficulty\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Called when the mini game has been lost. Will redirect back to combat.\r\n   */\r\n  lose() {\r\n    this.reset();\r\n    this.parent.continueCombat( {\r\n      win: false,\r\n      damage: 0\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Resets the mini game to its original state to be played again.\r\n   */\r\n  reset() {\r\n    this.timerBar.destroy();\r\n    this.elapsedTime = 0;\r\n    this.started = false;\r\n    this.timeScale = 1;\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/minigames/MiniGame.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 362,
    "kind": "class",
    "name": "MiniGame",
    "memberof": "src/minigames/MiniGame.js",
    "static": true,
    "longname": "src/minigames/MiniGame.js~MiniGame",
    "access": "public",
    "export": true,
    "importPath": "src/minigames/MiniGame",
    "importStyle": "MiniGame",
    "description": "Base class for all mini games",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "Phaser~Phaser.Scene"
    ]
  },
  {
    "__docId__": 363,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#constructor",
    "access": "public",
    "description": "Creates a mini game within the current scene",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The scene key"
      }
    ]
  },
  {
    "__docId__": 364,
    "kind": "member",
    "name": "key",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#key",
    "access": "public",
    "description": "The scene key",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 365,
    "kind": "member",
    "name": "name",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#name",
    "access": "public",
    "description": "The name of the minigame",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 366,
    "kind": "member",
    "name": "description",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#description",
    "access": "public",
    "description": "The description of the minigame",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 367,
    "kind": "member",
    "name": "text",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#text",
    "access": "public",
    "description": "The text displayed quickly to the user before the minigame begins",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "duration",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#duration",
    "access": "public",
    "description": "The time duration of the mini game in ms",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 369,
    "kind": "member",
    "name": "elapsedTime",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#elapsedTime",
    "access": "public",
    "description": "The amount of time elapsed in ms since the minigame started",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "started",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#started",
    "access": "public",
    "description": "Whether or not the minigame has started",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "x",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#x",
    "access": "public",
    "description": "The horizontal position of the minigame window",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "y",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#y",
    "access": "public",
    "description": "The vertical position of the minigame window",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "difficulty",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#difficulty",
    "access": "public",
    "description": "The difficulty of the minigame",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "Difficulty"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "timeScale",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#timeScale",
    "access": "public",
    "description": "The time scale applied to the duration of the minigame",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 375,
    "kind": "member",
    "name": "parent",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#parent",
    "access": "public",
    "description": "The parent scene that created this minigame",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Scene"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "w",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#w",
    "access": "public",
    "description": "The width of the game",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "h",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#h",
    "access": "public",
    "description": "The height of the game",
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 378,
    "kind": "member",
    "name": "alertText",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#alertText",
    "access": "public",
    "description": "The text graphic displayed to the user quickly before the minigame starts",
    "lineNumber": 105,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.GameObjects.Text"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 379,
    "kind": "member",
    "name": "startTimeout",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#startTimeout",
    "access": "public",
    "description": "The ID of the timeout used for starting the minigame",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "timerBar",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#timerBar",
    "access": "public",
    "description": "The graphics bar used to display the amount of time left in the minigame",
    "lineNumber": 117,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.GameObjects.Graphics"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "create",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#create",
    "access": "public",
    "description": "Initializes data when the mini game is created",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "information passed from parent scene"
      }
    ],
    "return": null
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "keys",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#keys",
    "access": "public",
    "description": "Object used to store the keys available for use in the minigame",
    "lineNumber": 168,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "update",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#update",
    "access": "public",
    "description": "Updates every tick of the game loop",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "The current time"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "The delta time in ms since the last frame"
      }
    ],
    "return": null
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "openInventory",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#openInventory",
    "access": "public",
    "description": "Opens the inventory",
    "lineNumber": 203,
    "params": [],
    "return": null
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "closeInventory",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#closeInventory",
    "access": "public",
    "description": "Closes the inventory",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "Item"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The item selected from the inventory"
      }
    ],
    "return": null
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "startGame",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#startGame",
    "access": "public",
    "description": "Called right before the mini game starts",
    "lineNumber": 240,
    "params": [],
    "return": null
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "updateMiniGame",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#updateMiniGame",
    "access": "public",
    "description": "This method will only be updated once the mini game has officially started.\nThe mini game will start after the alert text disappears.",
    "lineNumber": 251,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "The current time"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "The delta time in ms since the last frame"
      }
    ],
    "return": null
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "win",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#win",
    "access": "public",
    "description": "Called when the mini game has been won. Will redirect back to combat.",
    "lineNumber": 259,
    "params": [],
    "return": null
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "lose",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#lose",
    "access": "public",
    "description": "Called when the mini game has been lost. Will redirect back to combat.",
    "lineNumber": 272,
    "params": [],
    "return": null
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "reset",
    "memberof": "src/minigames/MiniGame.js~MiniGame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/minigames/MiniGame.js~MiniGame#reset",
    "access": "public",
    "description": "Resets the mini game to its original state to be played again.",
    "lineNumber": 283,
    "params": [],
    "return": null
  },
  {
    "__docId__": 404,
    "kind": "file",
    "name": "src/scenes/BootScene.js",
    "content": "import { createAnimations } from '../util/Animation';\r\nimport { DanceDance } from '../minigames';\r\nimport LightPipeline from '../util/LightPipeline';\r\n\r\n/**\r\n * The boot scene, or splash screen, is used to initialize most of the game\r\n * objects and images. The preload method will be mostly utilized. Once all\r\n * assets are loaded, the title scene is started.\r\n */\r\nexport default class BootScene extends Phaser.Scene {\r\n  /**\r\n   * Initializes the boot scene\r\n   */\r\n  constructor() {\r\n    super( { key: 'BootScene' } );\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  preload() {\r\n    const progress = this.add.graphics();\r\n\r\n    // Register a load progress event to show a load bar\r\n    this.load.on( 'progress', ( value ) => {\r\n      progress.clear();\r\n      progress.fillStyle( 0xFFFFFF, 1 );\r\n      progress.fillRect( 0, this.sys.game.config.height\r\n        / 2, this.sys.game.config.width * value, 60 );\r\n    } );\r\n\r\n    // Register a load complete event to launch the title screen when all\r\n    // files are loaded\r\n    this.load.on( 'complete', () => {\r\n      createAnimations( this );\r\n      progress.destroy();\r\n      this.scene.start( 'TitleScene' );\r\n    } );\r\n\r\n    // Load all assets here\r\n    this.load.script( 'webfont',\r\n      'https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js' );\r\n    this.load.image( {\r\n      key: 'dungeon_tiles',\r\n      url: 'assets/dungeon-tileset-ext.png',\r\n      normalMap: 'assets/dungeon-tileset-ext_n.png'\r\n    } );\r\n\r\n    this.loadItems();\r\n    this.loadSprites();\r\n\r\n    // TODO: DELETE THIS SAMPLE\r\n    this.load.atlas( 'sample-sprites', 'assets/sample-sprites.png',\r\n      'assets/sample-sprites.json' );\r\n\r\n    this.scene.add( 'DanceDance', DanceDance );\r\n    this.game.renderer.addPipeline( 'LightPipeline', new LightPipeline( {\r\n      game: this.game,\r\n      renderer: this.game.renderer,\r\n      maxLights: 10\r\n    } ) );\r\n  }\r\n\r\n  /**\r\n   * Loads the sprites\r\n   */\r\n  loadSprites() {\r\n    this.load.image( 'enemy', 'assets/enemy.png' );\r\n    this.load.image( {\r\n      key: 'player',\r\n      url: 'assets/player/player.png',\r\n      normalMap: 'assets/player/player_n.png'\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Loads the items\r\n   */\r\n  loadItems() {\r\n    this.loadItem( 'injection' );\r\n    this.loadItem( 'timelapse' );\r\n    this.loadItem( 'vorpal_sword' );\r\n    this.loadItem( 'bug_spray' );\r\n  }\r\n\r\n  /**\r\n   * Loads the image for an item based on its name\r\n   * @param {string} name The name of the item\r\n   */\r\n  loadItem( name ) {\r\n    this.load.image( {\r\n      key: name,\r\n      url: `assets/items/${name}/${name}.png`,\r\n      normalMap: `assets/items/${name}/${name}_n.png`\r\n    } );\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/scenes/BootScene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 405,
    "kind": "class",
    "name": "BootScene",
    "memberof": "src/scenes/BootScene.js",
    "static": true,
    "longname": "src/scenes/BootScene.js~BootScene",
    "access": "public",
    "export": true,
    "importPath": "src/scenes/BootScene",
    "importStyle": "BootScene",
    "description": "The boot scene, or splash screen, is used to initialize most of the game\nobjects and images. The preload method will be mostly utilized. Once all\nassets are loaded, the title scene is started.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "Phaser~Phaser.Scene"
    ]
  },
  {
    "__docId__": 406,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/scenes/BootScene.js~BootScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/BootScene.js~BootScene#constructor",
    "access": "public",
    "description": "Initializes the boot scene",
    "lineNumber": 14
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "preload",
    "memberof": "src/scenes/BootScene.js~BootScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/BootScene.js~BootScene#preload",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "override": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "loadSprites",
    "memberof": "src/scenes/BootScene.js~BootScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/BootScene.js~BootScene#loadSprites",
    "access": "public",
    "description": "Loads the sprites",
    "lineNumber": 67,
    "params": [],
    "return": null
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "loadItems",
    "memberof": "src/scenes/BootScene.js~BootScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/BootScene.js~BootScene#loadItems",
    "access": "public",
    "description": "Loads the items",
    "lineNumber": 79,
    "params": [],
    "return": null
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "loadItem",
    "memberof": "src/scenes/BootScene.js~BootScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/BootScene.js~BootScene#loadItem",
    "access": "public",
    "description": "Loads the image for an item based on its name",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the item"
      }
    ],
    "return": null
  },
  {
    "__docId__": 411,
    "kind": "file",
    "name": "src/scenes/elements/Message.js",
    "content": "/**\r\n * A display message that appears\r\n */\r\nexport default class Message {\r\n  /**\r\n   * Creates a status message at the bottom of the screen\r\n   * @param {string} msg The message to display\r\n   * @param {Phaser.Scene} scene The scene to show the message on\r\n   */\r\n  static status( msg, scene ) {\r\n    if ( scene.statusMsg ) {\r\n      clearTimeout( scene.statusMsg.fadeTimeout );\r\n      clearTimeout( scene.statusMsg.removeTimeout );\r\n      scene.statusMsg.destroy();\r\n    }\r\n\r\n    scene.statusMsg = scene.add.text( -scene.game.config.width / 2,\r\n      scene.game.config.height - 30, msg, {\r\n        fontSize: '16px',\r\n        fontFamily: 'Rye',\r\n        color: '#FFF'\r\n      } );\r\n    scene.statusMsg.setPosition( scene.statusMsg.x - scene.statusMsg.width / 2,\r\n      scene.statusMsg.y );\r\n    scene.statusMsg.setShadow( 0, 2, '#000', 10 );\r\n    scene.statusMsg.fadeTimeout = setTimeout( () => {\r\n      scene.tweens.add( {\r\n        targets: scene.statusMsg,\r\n        duration: 1000,\r\n        alpha: 0,\r\n        ease: 'Linear'\r\n      } );\r\n      scene.statusMsg.removeTimeout = setTimeout( () => {\r\n        scene.statusMsg.destroy();\r\n        scene.statusMsg = null;\r\n      }, 1000 );\r\n    }, 1500 );\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/scenes/elements/Message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 412,
    "kind": "class",
    "name": "Message",
    "memberof": "src/scenes/elements/Message.js",
    "static": true,
    "longname": "src/scenes/elements/Message.js~Message",
    "access": "public",
    "export": true,
    "importPath": "src/scenes/elements/Message",
    "importStyle": "Message",
    "description": "A display message that appears",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "status",
    "memberof": "src/scenes/elements/Message.js~Message",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/scenes/elements/Message.js~Message.status",
    "access": "public",
    "description": "Creates a status message at the bottom of the screen",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The message to display"
      },
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The scene to show the message on"
      }
    ],
    "return": null
  },
  {
    "__docId__": 414,
    "kind": "file",
    "name": "src/scenes/GameScene.js",
    "content": "import KeyBinding from '../util/KeyBinding';\r\nimport Dungeon from '../dungeon/Dungeon';\r\nimport Hallway from '../dungeon/Hallway';\r\nimport { Edge, Orientation, RoomType } from '../globals';\r\nimport Tileset from '../dungeon/TileMappings';\r\nimport TilemapVisibility from '../dungeon/TilemapVisibility';\r\nimport { Player } from '../entity';\r\nimport Battle from '../battle/Battle';\r\nimport BattleDrop from '../battle/BattleDrop';\r\nimport { ItemType } from '../entity/items';\r\n\r\n/**\r\n * The game scene is the main scene used when the player is in actual game play.\r\n * All mini game and dungeon gameplay will be from this scene.\r\n */\r\nexport default class GameScene extends Phaser.Scene {\r\n  /**\r\n   * Initializes the game scene\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super( { key: 'GameScene' } );\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  preload() {\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  create() {\r\n    /**\r\n     * A collection of the timeouts currently pending based on the number of\r\n     * rooms visited since the timeout was added\r\n     * @type {Map.<string, {remaining: number, callback: function}>}\r\n     */\r\n    this.roomCooloffs = {};\r\n    \r\n    /**\r\n     * A collection of the keys available for use in the game\r\n     * @type {Object}\r\n     */\r\n    this.keys = KeyBinding.createKeys( this,\r\n      [ 'up', 'left', 'right', 'down', 'space', 'interact', 'pause' ] );\r\n    \r\n    /**\r\n     * The scene groups to hold all of the enemies present\r\n     * @type {Phaser.GameObjects.Group}\r\n     */\r\n    this.enemyGroup = this.add.group();\r\n    \r\n    /**\r\n     * The current battle in progress\r\n     * @type {Battle}\r\n     */\r\n    this.battle = null;\r\n    \r\n    /**\r\n     * The dungeon the player is currently in\r\n     * @type {Dungeon}\r\n     */\r\n    this.dungeon = null;\r\n    \r\n    /**\r\n     * The width of the map in pixels\r\n     * @type {number}\r\n     */\r\n    this.mapWidthInPixels = -1;\r\n    \r\n    /**\r\n     * The height of the map in pixels\r\n     * @type {number}\r\n     */\r\n    this.mapHeightInPixels = -1;\r\n    \r\n    /**\r\n     * The current map displayed to the user\r\n     * @type {Phaser.Tilemaps.Tilemap}\r\n     */\r\n    this.map = null;\r\n    \r\n    /**\r\n     * The general layer building the dungeon (walls, floors)\r\n     * @type {Phaser.Tilemaps.DynamicTilemapLayer}\r\n     */\r\n    this.groundLayer = null;\r\n    \r\n    /**\r\n     * The layer that contains all of the objects in the dungeon (i.e. doors)\r\n     * @type {Phaser.Tilemaps.DynamicTilemapLayer}\r\n     */\r\n    this.stuffLayer = null;\r\n    \r\n    /**\r\n     * Used to show / hide the dungeon\r\n     * @type {TilemapVisibility}\r\n     */\r\n    this.tilemapVisibility = null;\r\n    \r\n    /**\r\n     * The player in the dungeon\r\n     * @type {Player}\r\n     */\r\n    this.player = null;\r\n    \r\n    this.createDungeonMap();\r\n    this.createPlayer();\r\n    this.formatCamera();\r\n    this.configCameraHUD();\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  update( time, delta ) {\r\n    this.player.update( time, delta );\r\n    if ( this.battle && this.battle.active ) {\r\n      this.battle.update();\r\n    }\r\n    else {\r\n      this.updateMapVisibility();\r\n    }\r\n\r\n    if ( this.keys.interact.isDown ) {\r\n      this.openInventory();\r\n    }\r\n\r\n    if ( this.keys.pause.isDown ) {\r\n      this.pause();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pauses the game\r\n   */\r\n  pause() {\r\n    this.input.keyboard.resetKeys();\r\n    this.scene\r\n      .launch( 'PauseScene', { parent: this } )\r\n      .bringToTop( 'PauseScene' )\r\n      .pause();\r\n  }\r\n\r\n  /**\r\n   * Unpauses the game\r\n   */\r\n  unpause() {\r\n    this.scene.stop( 'PauseScene' );\r\n    this.input.keyboard.resetKeys();\r\n    this.scene.resume();\r\n  }\r\n\r\n  /**\r\n   * Opens the inventory\r\n   */\r\n  openInventory() {\r\n    this.input.keyboard.resetKeys();\r\n    this.scene\r\n      .launch( 'InventoryScene', {\r\n        parent: this,\r\n        inventory: this.player.inventory,\r\n        context: ItemType.ANY\r\n      } )\r\n      .bringToTop( 'InventoryScene' )\r\n      .pause();\r\n  }\r\n\r\n  /**\r\n   * Closes the inventory\r\n   * @param {Item} item The item selected from the inventory\r\n   */\r\n  closeInventory( item ) {\r\n    this.scene.stop( 'InventoryScene' );\r\n    this.input.keyboard.resetKeys();\r\n    this.scene.resume();\r\n\r\n    if ( item && item.itemType === ItemType.ANY ) {\r\n      item.use( {\r\n        player: this.player,\r\n        scene: this,\r\n        battle: this.battle\r\n      } );\r\n      this.player.inventory.items.splice( item.inventoryIndex, 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the HUD camera\r\n   */\r\n  configCameraHUD() {\r\n    const { width, height } = this.game.config;\r\n    const HUD_X = -width;\r\n    const hudCamera = this.cameras.add( 0, 0, width, height, false, 'HUD' );\r\n    hudCamera.scrollX = HUD_X;\r\n  }\r\n\r\n  /**\r\n   * Updates the visibility of the map\r\n   */\r\n  updateMapVisibility() {\r\n    const playerTileX = this.groundLayer.worldToTileX( this.player.x );\r\n    const playerTileY = this.groundLayer.worldToTileY( this.player.y );\r\n    const playerRoom = this.dungeon.getRoomAt( playerTileX, playerTileY );\r\n\r\n    if ( this.tilemapVisibility.setActiveRoom( playerRoom ) ) {\r\n      if ( !playerRoom.entered ) {\r\n        // Battle Room\r\n        if ( playerRoom.type === RoomType.BATTLE && !this.preventSpawn ) {\r\n          const edge = playerRoom.getEdge( playerTileX, playerTileY );\r\n          if ( Edge.TOP === edge ) {\r\n            this.player.setDestination(\r\n              this.player.x,\r\n              this.player.y + this.map.tileHeight * 2,\r\n              () => {\r\n                this.beginCombat( playerRoom, Edge.TOP );\r\n              }\r\n            );\r\n          }\r\n          else if ( Edge.BOTTOM === edge ) {\r\n            this.player.setDestination(\r\n              this.player.x,\r\n              this.player.y - this.map.tileHeight * 2,\r\n              () => {\r\n                this.beginCombat( playerRoom, Edge.BOTTOM );\r\n              }\r\n            );\r\n          }\r\n          else if ( Edge.LEFT === edge ) {\r\n            this.player.setDestination(\r\n              this.player.x + this.map.tileWidth * 2,\r\n              this.player.y,\r\n              () => {\r\n                this.beginCombat( playerRoom, Edge.LEFT );\r\n              }\r\n            );\r\n          }\r\n          // Right\r\n          else if ( Edge.RIGHT === edge ) {\r\n            this.player.setDestination(\r\n              this.player.x - this.map.tileWidth * 2,\r\n              this.player.y,\r\n              () => {\r\n                this.beginCombat( playerRoom, Edge.RIGHT );\r\n              }\r\n            );\r\n          }\r\n        }\r\n        // Item Room\r\n        else if ( playerRoom.type === RoomType.ITEM ) {\r\n          playerRoom.spawnItem( this );\r\n        }\r\n      }\r\n\r\n      // Only reduce room cooloff when entering rooms\r\n      if ( !( playerRoom instanceof Hallway ) ) {\r\n        const shouldDelete = [];\r\n        Object.keys( this.roomCooloffs ).forEach( ( key ) => {\r\n          this.roomCooloffs[ key ].remaining--;\r\n          if ( this.roomCooloffs[ key ].remaining <= 0 ) {\r\n            this.roomCooloffs[ key ].callback();\r\n            shouldDelete.push( key );\r\n          }\r\n        } );\r\n        shouldDelete.forEach( ( key ) => {\r\n          delete this.roomCooloffs[ key ];\r\n        } );\r\n      }\r\n    }\r\n\r\n    playerRoom.entered = true;\r\n  }\r\n\r\n  /**\r\n   * Begins combat inside of a battle room\r\n   * @param {Room} room The room to begin a battle in\r\n   * @param {number} edge The edge the player entered on\r\n   */\r\n  beginCombat( room, edge ) {\r\n    this.battle = new Battle( room, edge, this );\r\n    this.battle.begin();\r\n  }\r\n\r\n  /**\r\n   * Ends the combat inside of the battle room\r\n   */\r\n  endCombat() {\r\n    this.battle.end()\r\n      .then( () => this.battle = null );\r\n  }\r\n\r\n  /**\r\n   * Creates the map of the dungeon\r\n   */\r\n  createDungeonMap() {\r\n    this.dungeon = new Dungeon();\r\n\r\n    // Initialize Dungeon Map\r\n    const map = this.make.tilemap( {\r\n      tileWidth: 32,\r\n      tileHeight: 32,\r\n      width: this.dungeon.width,\r\n      height: this.dungeon.height\r\n    } );\r\n    this.mapWidthInPixels = map.widthInPixels;\r\n    this.mapHeightInPixels = map.heightInPixels;\r\n    this.map = map;\r\n\r\n    // Create Tilesets & Layers\r\n    const tileset = map.addTilesetImage( 'dungeon_tiles', null, 32, 32, 1, 2 );\r\n    this.groundLayer =\r\n      map.createBlankDynamicLayer( 'Ground', tileset ).fill( Tileset.BLANK );\r\n    this.stuffLayer = map.createBlankDynamicLayer( 'Stuff', tileset );\r\n    const shadowLayer = map.createBlankDynamicLayer( 'Shadow', tileset )\r\n      .fill( Tileset.BLANK );\r\n\r\n    this.tilemapVisibility = new TilemapVisibility( this, shadowLayer );\r\n\r\n    // Create Rooms in Dungeon\r\n    this.dungeon.rooms.forEach( ( room ) => {\r\n      if ( room instanceof Hallway ) {\r\n        this.createHallway( room );\r\n      }\r\n      else {\r\n        this.createRoom( room );\r\n      }\r\n    } );\r\n\r\n    // Collision\r\n    this.groundLayer.setCollisionByExclusion( [ -1, 9 ] );\r\n    this.stuffLayer.setCollision( [ 24, 25, 26, 32, 40 ] );\r\n  }\r\n\r\n  /**\r\n   * Creates a hallway on the ground layer\r\n   * @param {Hallway} hallway the hallway being added\r\n   */\r\n  createHallway( hallway ) {\r\n    const { width, height, left, right, top, bottom } = hallway;\r\n    if ( hallway.orientation === Orientation.HORIZONTAL ) {\r\n      this.groundLayer.fill( Tileset.WALL.TOP, left, top, width, 1 );\r\n      this.groundLayer.fill( Tileset.FLOOR, left, top + 1, width, 1 );\r\n      this.groundLayer.fill( Tileset.WALL.BOTTOM, left, bottom, width, 1 );\r\n    }\r\n    else if ( hallway.orientation === Orientation.VERTICAL ) {\r\n      this.groundLayer.fill( Tileset.WALL.LEFT, left, top, 1, height );\r\n      this.groundLayer.fill( Tileset.FLOOR, left + 1, top, 1, height );\r\n      this.groundLayer.fill( Tileset.WALL.RIGHT, right, top, 1, height );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a room on the ground layer\r\n   * @param {Room} room the room being added\r\n   */\r\n  createRoom( room ) {\r\n    const { x, y, width, height, left, right, top, bottom } = room;\r\n\r\n    // Fill the floor\r\n    this.groundLayer.fill( Tileset.FLOOR, x + 1, y + 1, width - 2, height - 2 );\r\n\r\n    // Place the room corners tiles\r\n    this.groundLayer.putTileAt( Tileset.WALL.TOP_LEFT, left, top );\r\n    this.groundLayer.putTileAt( Tileset.WALL.TOP_RIGHT, right, top );\r\n    this.groundLayer.putTileAt( Tileset.WALL.BOTTOM_LEFT, left, bottom );\r\n    this.groundLayer.putTileAt( Tileset.WALL.BOTTOM_RIGHT, right, bottom );\r\n\r\n    // Fill the walls\r\n    this.groundLayer.fill( Tileset.WALL.TOP, left + 1, top, width - 2, 1 );\r\n    this.groundLayer.fill( Tileset.WALL.BOTTOM, left + 1,\r\n      bottom, width - 2, 1 );\r\n    this.groundLayer.fill( Tileset.WALL.LEFT, left, top + 1, 1, height - 2 );\r\n    this.groundLayer.fill( Tileset.WALL.RIGHT, right, top + 1,\r\n      1, height - 2 );\r\n\r\n    // Doors\r\n    let tl; // Top-Left\r\n    let tr; // Top-Right\r\n    let bl; // Bottom-Left\r\n    let br; // Bottom-Right\r\n    let lt; // Left-Top\r\n    let lb; // Left-Bottom\r\n    let rt; // Right-Top\r\n    let rb; // Right-Bottom\r\n    room.doors.forEach( ( door ) => {\r\n      this.groundLayer.putTileAt( Tileset.FLOOR,\r\n        x + door.x, y + door.y );\r\n\r\n      // TOP\r\n      if ( Edge.TOP === door.edge ) {\r\n        if ( door.x === 1 ) {\r\n          this.groundLayer.putTilesAt( Tileset.DOOR.TOP.LEFT, x, y );\r\n          tl = true;\r\n        }\r\n        else if ( door.x === room.width - 2 ) {\r\n          this.groundLayer.putTilesAt( Tileset.DOOR.TOP.RIGHT,\r\n            x + door.x - 1, y );\r\n          tr = true;\r\n        }\r\n        else {\r\n          this.groundLayer.putTilesAt( Tileset.DOOR.TOP.MIDDLE,\r\n            x + door.x - 1, y );\r\n        }\r\n      }\r\n      // BOTTOM\r\n      else if ( Edge.BOTTOM === door.edge ) {\r\n        if ( door.x === 1 ) {\r\n          this.groundLayer.putTilesAt( Tileset.DOOR.BOTTOM.LEFT,\r\n            x, y + height - 1 );\r\n          bl = true;\r\n        }\r\n        else if ( door.x === room.width - 2 ) {\r\n          this.groundLayer.putTilesAt( Tileset.DOOR.BOTTOM.RIGHT,\r\n            x + door.x - 1, y + height - 1 );\r\n          br = true;\r\n        }\r\n        else {\r\n          this.groundLayer.putTilesAt( Tileset.DOOR.BOTTOM.MIDDLE,\r\n            x + door.x - 1, y + height - 1 );\r\n        }\r\n      }\r\n      // LEFT\r\n      else if ( Edge.LEFT === door.edge ) {\r\n        if ( door.y === 1 ) {\r\n          this.groundLayer.putTilesAt( Tileset.DOOR.LEFT.TOP, x, y );\r\n          lt = true;\r\n        }\r\n        else if ( door.y === room.height - 2 ) {\r\n          this.groundLayer.putTilesAt( Tileset.DOOR.LEFT.BOTTOM,\r\n            x, y + door.y - 1 );\r\n          lb = true;\r\n        }\r\n        else {\r\n          this.groundLayer.putTilesAt( Tileset.DOOR.LEFT.MIDDLE,\r\n            x, y + door.y - 1 );\r\n        }\r\n      }\r\n      // RIGHT\r\n      else if ( Edge.RIGHT === door.edge ) {\r\n        if ( door.y === 1 ) {\r\n          this.groundLayer.putTilesAt( Tileset.DOOR.RIGHT.TOP,\r\n            x + width - 1, y );\r\n          rt = true;\r\n        }\r\n        else if ( door.y === room.height - 2 ) {\r\n          this.groundLayer.putTilesAt( Tileset.DOOR.RIGHT.BOTTOM,\r\n            x + width - 1, y + door.y - 1 );\r\n          rb = true;\r\n        }\r\n        else {\r\n          this.groundLayer.putTilesAt( Tileset.DOOR.RIGHT.MIDDLE,\r\n            x + width - 1, y + door.y - 1 );\r\n        }\r\n      }\r\n    } );\r\n\r\n    // Check for doors at corners\r\n    if ( tl && lt ) { // Top-Left and Left-Top\r\n      this.groundLayer.putTileAt( Tileset.CORNER.BOTTOM_RIGHT, x, y );\r\n    }\r\n    if ( tr && rt ) { // Top-Right and Right-Top\r\n      this.groundLayer.putTileAt( Tileset.CORNER.BOTTOM_LEFT,\r\n        x + width - 1, y );\r\n    }\r\n    if ( bl && lb ) { // Bottom-Left and Left-Bottom\r\n      this.groundLayer.putTileAt( Tileset.CORNER.TOP_RIGHT,\r\n        x, y + height - 1 );\r\n    }\r\n    if ( br && rb ) { // Bottom-Right and Right-Bottom\r\n      this.groundLayer.putTileAt( Tileset.CORNER.TOP_LEFT,\r\n        x + width - 1, y + height - 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a player to the room. Also adds colliders to existing layers.\r\n   */\r\n  createPlayer() {\r\n    const sX = this.map.tileToWorldX( this.dungeon.startRoom.centerX );\r\n    const sY = this.map.tileToWorldY( this.dungeon.startRoom.centerY );\r\n    this.player = new Player( sX, sY, this );\r\n    this.physics.add.existing( this.player );\r\n\r\n    this.physics.add.collider( this.player, this.groundLayer );\r\n    \r\n    /**\r\n     * The collider used to detect collisions between the player and the stuff\r\n     * layer\r\n     * @type {Phaser.Physics.Arcade.Collider}\r\n     */\r\n    this.stuffCollider =\r\n      this.physics.add.collider( this.player, this.stuffLayer );\r\n\r\n    BattleDrop.drop( sX - 25, sY - 25, this );\r\n  }\r\n\r\n  /**\r\n   * Formats the camera to the generated dungeon, starts following the player\r\n   * object, and sets the render pipelines for layers affected by light\r\n   */\r\n  formatCamera() {\r\n    const camera = this.cameras.main;\r\n    camera.setBounds( 0, 0, this.mapWidthInPixels, this.mapHeightInPixels );\r\n    camera.startFollow( this.player );\r\n    camera.setZoom( 1.5 );\r\n\r\n    this.lights.enable().setAmbientColor( 0x111111 );\r\n    this.groundLayer.setPipeline( 'LightPipeline' );\r\n    this.stuffLayer.setPipeline( 'LightPipeline' );\r\n  }\r\n\r\n  /**\r\n   * Called when the player is dead\r\n   */\r\n  gameOver() {\r\n    setTimeout( () => {\r\n      this.battle = null;\r\n      this.scene.start( 'TitleScene' );\r\n    }, 200 );\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/scenes/GameScene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 415,
    "kind": "class",
    "name": "GameScene",
    "memberof": "src/scenes/GameScene.js",
    "static": true,
    "longname": "src/scenes/GameScene.js~GameScene",
    "access": "public",
    "export": true,
    "importPath": "src/scenes/GameScene",
    "importStyle": "GameScene",
    "description": "The game scene is the main scene used when the player is in actual game play.\nAll mini game and dungeon gameplay will be from this scene.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "Phaser~Phaser.Scene"
    ]
  },
  {
    "__docId__": 416,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#constructor",
    "access": "public",
    "description": "Initializes the game scene",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "preload",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#preload",
    "access": "public",
    "description": "",
    "lineNumber": 28,
    "override": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "create",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#create",
    "access": "public",
    "description": "",
    "lineNumber": 34,
    "override": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "roomCooloffs",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#roomCooloffs",
    "access": "public",
    "description": "A collection of the timeouts currently pending based on the number of\nrooms visited since the timeout was added",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Map.<string, {remaining: number, callback: function}>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "keys",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#keys",
    "access": "public",
    "description": "A collection of the keys available for use in the game",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "enemyGroup",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#enemyGroup",
    "access": "public",
    "description": "The scene groups to hold all of the enemies present",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.GameObjects.Group"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "battle",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#battle",
    "access": "public",
    "description": "The current battle in progress",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "Battle"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 423,
    "kind": "member",
    "name": "dungeon",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#dungeon",
    "access": "public",
    "description": "The dungeon the player is currently in",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "Dungeon"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "mapWidthInPixels",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#mapWidthInPixels",
    "access": "public",
    "description": "The width of the map in pixels",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 425,
    "kind": "member",
    "name": "mapHeightInPixels",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#mapHeightInPixels",
    "access": "public",
    "description": "The height of the map in pixels",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "map",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#map",
    "access": "public",
    "description": "The current map displayed to the user",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Tilemaps.Tilemap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "groundLayer",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#groundLayer",
    "access": "public",
    "description": "The general layer building the dungeon (walls, floors)",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Tilemaps.DynamicTilemapLayer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "stuffLayer",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#stuffLayer",
    "access": "public",
    "description": "The layer that contains all of the objects in the dungeon (i.e. doors)",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Tilemaps.DynamicTilemapLayer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "tilemapVisibility",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#tilemapVisibility",
    "access": "public",
    "description": "Used to show / hide the dungeon",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "TilemapVisibility"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 430,
    "kind": "member",
    "name": "player",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#player",
    "access": "public",
    "description": "The player in the dungeon",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "Player"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "update",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#update",
    "access": "public",
    "description": "",
    "lineNumber": 118,
    "override": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      },
      {
        "name": "delta",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "pause",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#pause",
    "access": "public",
    "description": "Pauses the game",
    "lineNumber": 139,
    "params": [],
    "return": null
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "unpause",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#unpause",
    "access": "public",
    "description": "Unpauses the game",
    "lineNumber": 150,
    "params": [],
    "return": null
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "openInventory",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#openInventory",
    "access": "public",
    "description": "Opens the inventory",
    "lineNumber": 159,
    "params": [],
    "return": null
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "closeInventory",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#closeInventory",
    "access": "public",
    "description": "Closes the inventory",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "Item"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The item selected from the inventory"
      }
    ],
    "return": null
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "configCameraHUD",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#configCameraHUD",
    "access": "public",
    "description": "Creates the HUD camera",
    "lineNumber": 193,
    "params": [],
    "return": null
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "updateMapVisibility",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#updateMapVisibility",
    "access": "public",
    "description": "Updates the visibility of the map",
    "lineNumber": 203,
    "params": [],
    "return": null
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "beginCombat",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#beginCombat",
    "access": "public",
    "description": "Begins combat inside of a battle room",
    "lineNumber": 281,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to begin a battle in"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "edge",
        "description": "The edge the player entered on"
      }
    ],
    "return": null
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "endCombat",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#endCombat",
    "access": "public",
    "description": "Ends the combat inside of the battle room",
    "lineNumber": 289,
    "params": [],
    "return": null
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "createDungeonMap",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#createDungeonMap",
    "access": "public",
    "description": "Creates the map of the dungeon",
    "lineNumber": 297,
    "params": [],
    "return": null
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "createHallway",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#createHallway",
    "access": "public",
    "description": "Creates a hallway on the ground layer",
    "lineNumber": 340,
    "params": [
      {
        "nullable": null,
        "types": [
          "Hallway"
        ],
        "spread": false,
        "optional": false,
        "name": "hallway",
        "description": "the hallway being added"
      }
    ],
    "return": null
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "createRoom",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#createRoom",
    "access": "public",
    "description": "Creates a room on the ground layer",
    "lineNumber": 358,
    "params": [
      {
        "nullable": null,
        "types": [
          "Room"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "the room being added"
      }
    ],
    "return": null
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "createPlayer",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#createPlayer",
    "access": "public",
    "description": "Adds a player to the room. Also adds colliders to existing layers.",
    "lineNumber": 480,
    "params": [],
    "return": null
  },
  {
    "__docId__": 453,
    "kind": "member",
    "name": "stuffCollider",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#stuffCollider",
    "access": "public",
    "description": "The collider used to detect collisions between the player and the stuff\nlayer",
    "lineNumber": 493,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Physics.Arcade.Collider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "formatCamera",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#formatCamera",
    "access": "public",
    "description": "Formats the camera to the generated dungeon, starts following the player\nobject, and sets the render pipelines for layers affected by light",
    "lineNumber": 503,
    "params": [],
    "return": null
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "gameOver",
    "memberof": "src/scenes/GameScene.js~GameScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/GameScene.js~GameScene#gameOver",
    "access": "public",
    "description": "Called when the player is dead",
    "lineNumber": 517,
    "params": [],
    "return": null
  },
  {
    "__docId__": 457,
    "kind": "file",
    "name": "src/scenes/InventoryScene.js",
    "content": "import KeyBinding from '../util/KeyBinding';\r\nimport { itemClass } from '../entity/items';\r\n\r\n/**\r\n * The inventory scene is the scene that displays the inventory to the player.\r\n */\r\nexport default class InventoryScene extends Phaser.Scene {\r\n  /**\r\n   * Initializes the inventory scene\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super( { key: 'InventoryScene' } );\r\n    \r\n    /**\r\n     * The horizontal position of the scene\r\n     * @type {number}\r\n     */\r\n    this.x = 25;\r\n    \r\n    /**\r\n     * The vertical position of the scene\r\n     * @type {number}\r\n     */\r\n    this.y = 25;\r\n    \r\n    /**\r\n     * The parent scene used to initiate this scene\r\n     * @type {Phaser.Scene}\r\n     */\r\n    this.parent = null;\r\n    \r\n    /**\r\n     * The inventory to display\r\n     * @type {Inventory}\r\n     */\r\n    this.inventory = null;\r\n    \r\n    /**\r\n     * The item context to help display to the user only the items that can be\r\n     * used at that given time\r\n     * @type {ItemType}\r\n     */\r\n    this.context = null;\r\n  }\r\n\r\n  /**\r\n   * Initializes data when the inventory is created\r\n   * @param {object} data - information passed from parent scene\r\n   */\r\n  create( data ) {\r\n    this.parent = data.parent;\r\n    this.inventory = data.inventory;\r\n    this.context = data.context;\r\n    \r\n    /**\r\n     * The width of the game\r\n     * @type {number}\r\n     */\r\n    this.w = this.sys.game.config.width;\r\n    \r\n    /**\r\n     * The height of the game\r\n     * @type {number}\r\n     */\r\n    this.h = this.sys.game.config.height;\r\n\r\n    WebFont.load( {\r\n      google: { families: [ 'Rye' ] },\r\n      active: () => {\r\n        const titleText = this.add.text( this.w / 2, 10, 'Inventory', {\r\n          fontSize: '40px',\r\n          color: '#FFF',\r\n          fontFamily: 'Rye'\r\n        } );\r\n        titleText.setShadow( 0, 2, '#333', 10 );\r\n        titleText.setPosition( this.w / 2 - titleText.width / 2,\r\n          titleText.height / 2 + 10 );\r\n      }\r\n    } );\r\n\r\n    const background = this.add.graphics();\r\n    background.fillStyle( 0x999999, 1 );\r\n    background.fillRect( this.x, this.y, this.w - 50, this.h - 50 );\r\n\r\n    const border = this.add.graphics();\r\n    border.lineStyle( 4, 0x7b654f, 1 );\r\n    border.strokeRect( this.x, this.y, this.w - 50, this.h - 50 );\r\n\r\n    /**\r\n     * A collection of keys available for use in the inventory\r\n     * @type {Object}\r\n     */\r\n    this.keys = KeyBinding.createKeys( this,\r\n      [ 'up', 'left', 'right', 'down', 'space', 'interact' ] );\r\n\r\n    this.lights.enable().setAmbientColor( 0x111111 );\r\n    this.lights.addLight( this.w / 2, this.h / 2, this.w * 2, 0xFFFFFF, 1 );\r\n\r\n    // Normal Items\r\n    this.inventory.items.forEach( ( item, index ) => {\r\n      const Item = itemClass( item );\r\n      const i = new Item( this.x + 40 + index * 64, this.y + 100, this );\r\n      i.inventoryIndex = index;\r\n      i.setScale( 2 );\r\n\r\n      if ( i.itemType !== this.context ) {\r\n        i.setAlpha( 0.25 );\r\n      }\r\n      else {\r\n        i.on( 'pointerdown', () => {\r\n          this.parent.closeInventory( i );\r\n        } );\r\n      }\r\n    } );\r\n\r\n    // Passive Items\r\n    this.inventory.passive.forEach( ( item, index ) => {\r\n      const Item = itemClass( item );\r\n      const i = new Item( this.x + 40 + index * 64, this.y + 400,\r\n        this );\r\n      i.inventoryIndex = index;\r\n      i.setScale( 2 );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Updates every tick of the game loop\r\n   * @param {number} time The current time\r\n   * @param {number} delta The delta time in ms since the last frame\r\n   */\r\n  update( time, delta ) {\r\n    if ( this.keys.interact.isDown ) {\r\n      this.parent.closeInventory();\r\n      this.input.keyboard.resetKeys();\r\n    }\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/scenes/InventoryScene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 458,
    "kind": "class",
    "name": "InventoryScene",
    "memberof": "src/scenes/InventoryScene.js",
    "static": true,
    "longname": "src/scenes/InventoryScene.js~InventoryScene",
    "access": "public",
    "export": true,
    "importPath": "src/scenes/InventoryScene",
    "importStyle": "InventoryScene",
    "description": "The inventory scene is the scene that displays the inventory to the player.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "Phaser~Phaser.Scene"
    ]
  },
  {
    "__docId__": 459,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/scenes/InventoryScene.js~InventoryScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/InventoryScene.js~InventoryScene#constructor",
    "access": "public",
    "description": "Initializes the inventory scene",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 460,
    "kind": "member",
    "name": "x",
    "memberof": "src/scenes/InventoryScene.js~InventoryScene",
    "static": false,
    "longname": "src/scenes/InventoryScene.js~InventoryScene#x",
    "access": "public",
    "description": "The horizontal position of the scene",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 461,
    "kind": "member",
    "name": "y",
    "memberof": "src/scenes/InventoryScene.js~InventoryScene",
    "static": false,
    "longname": "src/scenes/InventoryScene.js~InventoryScene#y",
    "access": "public",
    "description": "The vertical position of the scene",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 462,
    "kind": "member",
    "name": "parent",
    "memberof": "src/scenes/InventoryScene.js~InventoryScene",
    "static": false,
    "longname": "src/scenes/InventoryScene.js~InventoryScene#parent",
    "access": "public",
    "description": "The parent scene used to initiate this scene",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Scene"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 463,
    "kind": "member",
    "name": "inventory",
    "memberof": "src/scenes/InventoryScene.js~InventoryScene",
    "static": false,
    "longname": "src/scenes/InventoryScene.js~InventoryScene#inventory",
    "access": "public",
    "description": "The inventory to display",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Inventory"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 464,
    "kind": "member",
    "name": "context",
    "memberof": "src/scenes/InventoryScene.js~InventoryScene",
    "static": false,
    "longname": "src/scenes/InventoryScene.js~InventoryScene#context",
    "access": "public",
    "description": "The item context to help display to the user only the items that can be\nused at that given time",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "ItemType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "create",
    "memberof": "src/scenes/InventoryScene.js~InventoryScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/InventoryScene.js~InventoryScene#create",
    "access": "public",
    "description": "Initializes data when the inventory is created",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "information passed from parent scene"
      }
    ],
    "return": null
  },
  {
    "__docId__": 469,
    "kind": "member",
    "name": "w",
    "memberof": "src/scenes/InventoryScene.js~InventoryScene",
    "static": false,
    "longname": "src/scenes/InventoryScene.js~InventoryScene#w",
    "access": "public",
    "description": "The width of the game",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 470,
    "kind": "member",
    "name": "h",
    "memberof": "src/scenes/InventoryScene.js~InventoryScene",
    "static": false,
    "longname": "src/scenes/InventoryScene.js~InventoryScene#h",
    "access": "public",
    "description": "The height of the game",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 471,
    "kind": "member",
    "name": "keys",
    "memberof": "src/scenes/InventoryScene.js~InventoryScene",
    "static": false,
    "longname": "src/scenes/InventoryScene.js~InventoryScene#keys",
    "access": "public",
    "description": "A collection of keys available for use in the inventory",
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "update",
    "memberof": "src/scenes/InventoryScene.js~InventoryScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/InventoryScene.js~InventoryScene#update",
    "access": "public",
    "description": "Updates every tick of the game loop",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "The current time"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "The delta time in ms since the last frame"
      }
    ],
    "return": null
  },
  {
    "__docId__": 473,
    "kind": "file",
    "name": "src/scenes/PauseScene.js",
    "content": "import KeyBinding from '../util/KeyBinding';\r\n\r\n/**\r\n * The pause scene is the scene displayed when hitting the ESC key in the game\r\n */\r\nexport default class PauseScene extends Phaser.Scene {\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super( { key: 'PauseScene' } );\r\n    \r\n    /**\r\n     * The parent scene used to initiate this scene\r\n     * @type {Phaser.Scene}\r\n     */\r\n    this.parent = null;\r\n  }\r\n\r\n  /**\r\n   * Initializes data when the pause scene is created\r\n   * @param {object} data - information passed from parent scene\r\n   */\r\n  create( data ) {\r\n    this.parent = data.parent;\r\n    \r\n    /**\r\n     * A collection of keys available for use in the inventory\r\n     * @type {Object}\r\n     */\r\n    this.keys = KeyBinding.createKeys( this,\r\n      [ 'up', 'left', 'right', 'down', 'space', 'pause' ] );\r\n\r\n    const { width, height } = this.game.config;\r\n\r\n    // Background\r\n    const background = this.add.graphics();\r\n    background.fillStyle( 0x333333, 0.9 );\r\n    background.fillRect( 0, 0, width, height );\r\n\r\n    WebFont.load( {\r\n      google: { families: [ 'Rye' ] },\r\n      active: () => {\r\n        const titleText = this.add.text( width / 2, 10, 'Pause Menu', {\r\n          fontSize: '40px',\r\n          color: '#FFF',\r\n          fontFamily: 'Rye'\r\n        } );\r\n        titleText.setShadow( 0, 2, '#000', 10 );\r\n        titleText.setPosition( width / 2 - titleText.width / 2,\r\n          titleText.height / 2 + 10 );\r\n\r\n        const controls = [\r\n          'W - Move Up',\r\n          'A - Move Left',\r\n          'S - Move Down',\r\n          'D - Move Right',\r\n          'E - Inventory',\r\n          'Space - Select',\r\n          'Escape - Pause',\r\n          '',\r\n          'Left Mouse - Select'\r\n        ];\r\n        controls.forEach( ( control, index ) => {\r\n          this.add.text( 40, 100 + 30 * index, control, {\r\n            fontSize: '24px',\r\n            color: '#FFF'\r\n          } ).setShadow( 0, 2, '#000', 10 );\r\n        } );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Updates every tick of the game loop\r\n   * @param {number} time The current time\r\n   * @param {number} delta The delta time in ms since the last frame\r\n   */\r\n  update( time, delta ) {\r\n    if ( this.keys.pause.isDown ) {\r\n      this.parent.unpause();\r\n      this.input.keyboard.resetKeys();\r\n    }\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/scenes/PauseScene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 474,
    "kind": "class",
    "name": "PauseScene",
    "memberof": "src/scenes/PauseScene.js",
    "static": true,
    "longname": "src/scenes/PauseScene.js~PauseScene",
    "access": "public",
    "export": true,
    "importPath": "src/scenes/PauseScene",
    "importStyle": "PauseScene",
    "description": "The pause scene is the scene displayed when hitting the ESC key in the game",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "Phaser~Phaser.Scene"
    ]
  },
  {
    "__docId__": 475,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/scenes/PauseScene.js~PauseScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/PauseScene.js~PauseScene#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 476,
    "kind": "member",
    "name": "parent",
    "memberof": "src/scenes/PauseScene.js~PauseScene",
    "static": false,
    "longname": "src/scenes/PauseScene.js~PauseScene#parent",
    "access": "public",
    "description": "The parent scene used to initiate this scene",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Scene"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "create",
    "memberof": "src/scenes/PauseScene.js~PauseScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/PauseScene.js~PauseScene#create",
    "access": "public",
    "description": "Initializes data when the pause scene is created",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "information passed from parent scene"
      }
    ],
    "return": null
  },
  {
    "__docId__": 479,
    "kind": "member",
    "name": "keys",
    "memberof": "src/scenes/PauseScene.js~PauseScene",
    "static": false,
    "longname": "src/scenes/PauseScene.js~PauseScene#keys",
    "access": "public",
    "description": "A collection of keys available for use in the inventory",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "update",
    "memberof": "src/scenes/PauseScene.js~PauseScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/PauseScene.js~PauseScene#update",
    "access": "public",
    "description": "Updates every tick of the game loop",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "The current time"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "The delta time in ms since the last frame"
      }
    ],
    "return": null
  },
  {
    "__docId__": 481,
    "kind": "file",
    "name": "src/scenes/TitleScene.js",
    "content": "import KeyBinding from '../util/KeyBinding';\r\nimport WebFont from 'webfontloader';\r\n\r\n/**\r\n * The title scene displays the main menu for the player to choose what they\r\n * would like to do\r\n */\r\nexport default class TitleScene extends Phaser.Scene {\r\n  /**\r\n   * Initializes the title scene\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super( { key: 'TitleScene' } );\r\n    \r\n    /**\r\n     * The title of the game\r\n     * @type {string}\r\n     */\r\n    this.gameTitle = 'Micrungeon';\r\n    \r\n    /**\r\n     * The current version of the game\r\n     * @type {string}\r\n     */\r\n    this.version = '0.1.0';\r\n    \r\n    /**\r\n     * The menu index of the option currently selected\r\n     * @type {number}\r\n     */\r\n    this.index = 0;\r\n    \r\n    /**\r\n     * A collection of menu options displayed to the user\r\n     * @type {Array.<Phaser.GameObjects.Text>}\r\n     */\r\n    this.options = [];\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  preload() {\r\n\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  create() {\r\n    this.scene.setVisible( false );\r\n    \r\n    /**\r\n     * A collection of keys available for use in the inventory\r\n     * @type {Object}\r\n     */\r\n    this.keys = KeyBinding.createKeys( this, [ 'up', 'down', 'space' ] );\r\n    const { width, height } = this.game.config;\r\n\r\n    // Background\r\n    const background = this.add.graphics();\r\n    background.fillStyle( 0x333333, 1 );\r\n    background.fillRect( 0, 0, width, height );\r\n\r\n    // Version Text\r\n    const versionText = this.add.text( 10, height - 22,\r\n      `v${this.version}`, {\r\n        fontSize: '12px',\r\n        color: '#FFF'\r\n      } );\r\n    versionText.setPosition( width - versionText.width - 10, height - 22 );\r\n\r\n    // Title Text\r\n    WebFont.load( {\r\n      google: { families: [ 'Rye' ] },\r\n      active: () => {\r\n        const titleText = this.add.text( 10, 10, this.gameTitle, {\r\n          fontSize: '64px',\r\n          color: '#FFF',\r\n          fontFamily: 'Rye'\r\n        } );\r\n        titleText.setShadow( 0, 2, '#000', 10 );\r\n        this.scene.setVisible( true );\r\n      }\r\n    } );\r\n\r\n    // Menu Options\r\n    this.options = [\r\n      this.add.text( 20, 0, 'Play', {\r\n        fontSize: '30px',\r\n        color: '#FFF'\r\n      } ),\r\n      this.add.text( 20, 0, 'Options', {\r\n        fontSize: '30px',\r\n        color: '#FFF'\r\n      } ),\r\n      this.add.text( 20, 0, 'Credits', {\r\n        fontSize: '30px',\r\n        color: '#FFF'\r\n      } )\r\n    ];\r\n\r\n    for ( let i = 0; i < this.options.length; i++ ) {\r\n      const opt = this.options[ i ];\r\n      opt.setShadow( 0, 2, '#000', 5 );\r\n      opt.setInteractive( { useHandCursor: true } );\r\n      opt.setPosition( 20, 120 + ( opt.height + 20 ) * i );\r\n      opt.on( 'pointerover', () => {\r\n        this.index = i;\r\n      } );\r\n      opt.on( 'pointerdown', () => {\r\n        this.selectOption();\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  update( time, delta ) {\r\n    // Key UP\r\n    if ( this.keys.up.isDown ) {\r\n      this.index--;\r\n      if ( this.index < 0 ) {\r\n        this.index = this.options.length - 1;\r\n      }\r\n      this.input.keyboard.resetKeys();\r\n    }\r\n    else if ( this.keys.down.isDown ) {\r\n      this.index = ( this.index + 1 ) % this.options.length;\r\n      this.input.keyboard.resetKeys();\r\n    }\r\n    else if ( this.keys.space.isDown ) {\r\n      this.selectOption();\r\n      this.input.keyboard.resetKeys();\r\n    }\r\n\r\n    // Change option alpha based on selected index\r\n    for ( let i = 0; i < this.options.length; i++ ) {\r\n      if ( i === this.index ) {\r\n        this.options[ i ].setAlpha( 1 );\r\n      }\r\n      else {\r\n        this.options[ i ].setAlpha( 0.5 );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs an action based on the current selected index\r\n   */\r\n  selectOption() {\r\n    switch ( this.index ) {\r\n      case 0:\r\n        this.scene.start( 'GameScene' );\r\n        break;\r\n    }\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/scenes/TitleScene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 482,
    "kind": "class",
    "name": "TitleScene",
    "memberof": "src/scenes/TitleScene.js",
    "static": true,
    "longname": "src/scenes/TitleScene.js~TitleScene",
    "access": "public",
    "export": true,
    "importPath": "src/scenes/TitleScene",
    "importStyle": "TitleScene",
    "description": "The title scene displays the main menu for the player to choose what they\nwould like to do",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "Phaser~Phaser.Scene"
    ]
  },
  {
    "__docId__": 483,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/scenes/TitleScene.js~TitleScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/TitleScene.js~TitleScene#constructor",
    "access": "public",
    "description": "Initializes the title scene",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 484,
    "kind": "member",
    "name": "gameTitle",
    "memberof": "src/scenes/TitleScene.js~TitleScene",
    "static": false,
    "longname": "src/scenes/TitleScene.js~TitleScene#gameTitle",
    "access": "public",
    "description": "The title of the game",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 485,
    "kind": "member",
    "name": "version",
    "memberof": "src/scenes/TitleScene.js~TitleScene",
    "static": false,
    "longname": "src/scenes/TitleScene.js~TitleScene#version",
    "access": "public",
    "description": "The current version of the game",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 486,
    "kind": "member",
    "name": "index",
    "memberof": "src/scenes/TitleScene.js~TitleScene",
    "static": false,
    "longname": "src/scenes/TitleScene.js~TitleScene#index",
    "access": "public",
    "description": "The menu index of the option currently selected",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 487,
    "kind": "member",
    "name": "options",
    "memberof": "src/scenes/TitleScene.js~TitleScene",
    "static": false,
    "longname": "src/scenes/TitleScene.js~TitleScene#options",
    "access": "public",
    "description": "A collection of menu options displayed to the user",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Array.<Phaser.GameObjects.Text>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "preload",
    "memberof": "src/scenes/TitleScene.js~TitleScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/TitleScene.js~TitleScene#preload",
    "access": "public",
    "description": "",
    "lineNumber": 44,
    "override": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "create",
    "memberof": "src/scenes/TitleScene.js~TitleScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/TitleScene.js~TitleScene#create",
    "access": "public",
    "description": "",
    "lineNumber": 51,
    "override": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 490,
    "kind": "member",
    "name": "keys",
    "memberof": "src/scenes/TitleScene.js~TitleScene",
    "static": false,
    "longname": "src/scenes/TitleScene.js~TitleScene#keys",
    "access": "public",
    "description": "A collection of keys available for use in the inventory",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "update",
    "memberof": "src/scenes/TitleScene.js~TitleScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/TitleScene.js~TitleScene#update",
    "access": "public",
    "description": "",
    "lineNumber": 121,
    "override": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      },
      {
        "name": "delta",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "selectOption",
    "memberof": "src/scenes/TitleScene.js~TitleScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/scenes/TitleScene.js~TitleScene#selectOption",
    "access": "public",
    "description": "Performs an action based on the current selected index",
    "lineNumber": 153,
    "params": [],
    "return": null
  },
  {
    "__docId__": 497,
    "kind": "file",
    "name": "src/util/Animation.js",
    "content": "/**\r\n * Creates all of the animations for entities\r\n * @param {Phaser.Scene} scene The scene to add the animation to\r\n */\r\nfunction createAnimations( scene ) {\r\n  // TODO: DELETE THIS SAMPLE\r\n  addDynamicAnim( scene, 'sample', 'sample/frame', 'sample-sprites', 1, 3, 5 );\r\n}\r\n\r\n/**\r\n * Adds a static animation to the given scene. A static animation is a one\r\n * frame animation that doesn't change.\r\n * @param {Phaser.Scene} scene The scene to add the animation to\r\n * @param {string} animKey  The key that the animation will be associated with\r\n * @param {string} frameKey The key that describes the filename in the JSON\r\n * @param {string} atlasKey The key that describes the loaded Atlas\r\n */\r\nfunction addStaticAnim( scene, animKey, frameKey, atlasKey ) {\r\n  scene.anims.create( {\r\n    key: animKey,\r\n    frames: [ {\r\n      frame: frameKey,\r\n      key: atlasKey\r\n    } ]\r\n  } );\r\n}\r\n\r\n/**\r\n * Adds a dynamic animation to the given scene. A dynamic animation is a\r\n * tradition animation where it looks like the entity is moving.\r\n * @param {Phaser.Scene} scene The scene to add the animation to\r\n * @param {string} animKey The key that the animation will be associated with\r\n * @param {string} framePrefix The prefix of the key that describes the file\r\n * @param {string} atlasKey The key that describes the loaded Atlas\r\n * @param {Number} start The number of the first frame\r\n * @param {Number} end The number of the last frame\r\n * @param {Number} [frameRate=10] The frame rate of playback in fps\r\n * @param {Number} [repeat=-1] Number of times to repeat the animation (-1\r\n *  for infinity)\r\n * @param {Number} [repeatDelay=0] Delay before the animation repeats. Value\r\n *  given in milliseconds.\r\n */\r\nfunction addDynamicAnim( scene, animKey, framePrefix, atlasKey, start, end,\r\n  frameRate = 10, repeat = -1, repeatDelay = 0 ) {\r\n  scene.anims.create( {\r\n    key: animKey,\r\n    frames: scene.anims.generateFrameNames( atlasKey, {\r\n      prefix: framePrefix,\r\n      start: start,\r\n      end: end\r\n    } ),\r\n    frameRate: frameRate,\r\n    repeat: repeat,\r\n    repeatDelay: repeatDelay\r\n  } );\r\n}\r\n\r\nexport {\r\n  addStaticAnim,\r\n  addDynamicAnim,\r\n  createAnimations\r\n};",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/util/Animation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 498,
    "kind": "function",
    "name": "addStaticAnim",
    "memberof": "src/util/Animation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/Animation.js~addStaticAnim",
    "access": "public",
    "export": true,
    "importPath": "src/util/Animation",
    "importStyle": "{addStaticAnim}",
    "description": "Adds a static animation to the given scene. A static animation is a one\nframe animation that doesn't change.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The scene to add the animation to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "animKey",
        "description": "The key that the animation will be associated with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "frameKey",
        "description": "The key that describes the filename in the JSON"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "atlasKey",
        "description": "The key that describes the loaded Atlas"
      }
    ],
    "return": null
  },
  {
    "__docId__": 499,
    "kind": "function",
    "name": "addDynamicAnim",
    "memberof": "src/util/Animation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/Animation.js~addDynamicAnim",
    "access": "public",
    "export": true,
    "importPath": "src/util/Animation",
    "importStyle": "{addDynamicAnim}",
    "description": "Adds a dynamic animation to the given scene. A dynamic animation is a\ntradition animation where it looks like the entity is moving.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The scene to add the animation to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "animKey",
        "description": "The key that the animation will be associated with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "framePrefix",
        "description": "The prefix of the key that describes the file"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "atlasKey",
        "description": "The key that describes the loaded Atlas"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The number of the first frame"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "The number of the last frame"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "frameRate",
        "description": "The frame rate of playback in fps"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "-1",
        "defaultRaw": -1,
        "name": "repeat",
        "description": "Number of times to repeat the animation (-1\n for infinity)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "repeatDelay",
        "description": "Delay before the animation repeats. Value\n given in milliseconds."
      }
    ],
    "return": null
  },
  {
    "__docId__": 500,
    "kind": "function",
    "name": "createAnimations",
    "memberof": "src/util/Animation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/Animation.js~createAnimations",
    "access": "public",
    "export": true,
    "importPath": "src/util/Animation",
    "importStyle": "{createAnimations}",
    "description": "Creates all of the animations for entities",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The scene to add the animation to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 501,
    "kind": "file",
    "name": "src/util/KeyBinding.js",
    "content": "/**\r\n * Collection of common key bindings to use in the game\r\n * @type {Map.<string, Phaser.Input.Keyboard.KeyCode>}\r\n */\r\nconst BINDINGS = {\r\n  LEFT: Phaser.Input.Keyboard.KeyCodes.A,\r\n  RIGHT: Phaser.Input.Keyboard.KeyCodes.D,\r\n  UP: Phaser.Input.Keyboard.KeyCodes.W,\r\n  DOWN: Phaser.Input.Keyboard.KeyCodes.S,\r\n  INTERACT: Phaser.Input.Keyboard.KeyCodes.E,\r\n  SPACE: Phaser.Input.Keyboard.KeyCodes.SPACE,\r\n  PAUSE: Phaser.Input.Keyboard.KeyCodes.ESC\r\n};\r\n\r\n/**\r\n * The KeyBinding utility class provides a convenient way to create key bindings\r\n * for a scene.\r\n */\r\nexport default class KeyBinding {\r\n  /**\r\n   * Creates a keys object based on the given bindings. This also adds the given\r\n   * bindings to the given scene.\r\n   * @param {Phaser.Scene} scene The current scene\r\n   * @param {array} bindings An array of key bindings\r\n   * @return {object} the constructed keys object\r\n   */\r\n  static createKeys( scene, bindings ) {\r\n    const keys = {};\r\n    bindings.forEach( ( binding ) => {\r\n      keys[ binding ] = scene.input.keyboard.addKey(\r\n        BINDINGS[ binding.toUpperCase() ] );\r\n    } );\r\n    return keys;\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/util/KeyBinding.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 502,
    "kind": "variable",
    "name": "BINDINGS",
    "memberof": "src/util/KeyBinding.js",
    "static": true,
    "longname": "src/util/KeyBinding.js~BINDINGS",
    "access": "public",
    "export": false,
    "importPath": "src/util/KeyBinding",
    "importStyle": null,
    "description": "Collection of common key bindings to use in the game",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "Map.<string, Phaser.Input.Keyboard.KeyCode>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 503,
    "kind": "class",
    "name": "KeyBinding",
    "memberof": "src/util/KeyBinding.js",
    "static": true,
    "longname": "src/util/KeyBinding.js~KeyBinding",
    "access": "public",
    "export": true,
    "importPath": "src/util/KeyBinding",
    "importStyle": "KeyBinding",
    "description": "The KeyBinding utility class provides a convenient way to create key bindings\nfor a scene.",
    "lineNumber": 19,
    "interface": false
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "createKeys",
    "memberof": "src/util/KeyBinding.js~KeyBinding",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/KeyBinding.js~KeyBinding.createKeys",
    "access": "public",
    "description": "Creates a keys object based on the given bindings. This also adds the given\nbindings to the given scene.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Phaser.Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "The current scene"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "bindings",
        "description": "An array of key bindings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "the constructed keys object"
    }
  },
  {
    "__docId__": 505,
    "kind": "file",
    "name": "src/util/LightPipeline.js",
    "content": "/**\r\n * Constant used to simplify calling the\r\n * Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline class\r\n * @type {Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline}\r\n */\r\nconst TextureTintPipeline = Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline;\r\n\r\n/**\r\n * The maximum number of lights allowed to render in a scene\r\n * @type {number}\r\n */\r\nlet LIGHT_COUNT = 10;\r\n\r\n/**\r\n * Custom light pipeline to fix issues with the current diffuse lighting\r\n * pipeline.\r\n */\r\nexport default class LightPipeline\r\n  extends Phaser.Renderer.WebGL.Pipelines.ForwardDiffuseLightPipeline {\r\n  /**\r\n   * @constructor\r\n   * @override\r\n   */\r\n  constructor( config ) {\r\n    super( config );\r\n\r\n    LIGHT_COUNT = config.maxLights;\r\n\r\n    /* eslint-disable */\r\n    config.fragShader = [\r\n      '#define SHADER_NAME PHASER_FORWARD_DIFFUSE_FS',\r\n      '',\r\n      'precision mediump float;',\r\n      '',\r\n      'struct Light',\r\n      '{',\r\n      '    vec2 position;',\r\n      '    vec3 color;',\r\n      '    float intensity;',\r\n      '    float radius;',\r\n      '    float hWidth;',\r\n      '    float hHeight;',\r\n      '};',\r\n      '',\r\n      'const int kMaxLights = %LIGHT_COUNT%;',\r\n      '',\r\n      'uniform vec4 uCamera; /* x, y, rotation, zoom */',\r\n      'uniform vec2 uResolution;',\r\n      'uniform sampler2D uMainSampler;',\r\n      'uniform sampler2D uNormSampler;',\r\n      'uniform vec3 uAmbientLightColor;',\r\n      'uniform Light uLights[kMaxLights];',\r\n      '',\r\n      'varying vec2 outTexCoord;',\r\n      'varying vec4 outTint;',\r\n      '',\r\n      'void main()',\r\n      '{',\r\n      '    vec3 finalColor = vec3(0.0, 0.0, 0.0);',\r\n      '    vec4 color = texture2D(uMainSampler, outTexCoord) * vec4(outTint.rgb * outTint.a, outTint.a);',\r\n      '    vec3 normalMap = texture2D(uNormSampler, outTexCoord).rgb;',\r\n      '    vec3 normal = normalize(vec3(normalMap * 2.0 - 1.0));',\r\n      '    vec2 res = vec2(min(uResolution.x, uResolution.y)) * uCamera.w;',\r\n      '',\r\n      '    for (int index = 0; index < kMaxLights; ++index)',\r\n      '    {',\r\n      '        Light light = uLights[index];',\r\n      '        vec3 lightDir = vec3((light.position.xy / res) - (gl_FragCoord.xy / res), 0.2);',\r\n      '        vec3 lightNormal = normalize(lightDir);',\r\n      '        float distToSurf = length(lightDir) * uCamera.w;',\r\n      '        float diffuseFactor = max(dot(normal, lightNormal), 0.0);',\r\n      '        float radius = (light.radius / res.x * uCamera.w) * uCamera.w;',\r\n      '        float attenuation = clamp(1.0 - distToSurf * distToSurf / (radius * radius), 0.0, 1.0);',\r\n      '        vec3 diffuse = light.color * diffuseFactor;',\r\n      '        finalColor += (attenuation * diffuse) * light.intensity;',\r\n      '    }',\r\n      '',\r\n      '    vec4 colorOutput = vec4(uAmbientLightColor + finalColor, 1.0);',\r\n      '    gl_FragColor = color * vec4(colorOutput.rgb * colorOutput.a, colorOutput.a);',\r\n      '',\r\n      '}',\r\n      ''\r\n    ].join( '\\n' ).replace( '%LIGHT_COUNT%', LIGHT_COUNT.toString() );\r\n    /* eslint-enable */\r\n\r\n    TextureTintPipeline.call( this, config );\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  onBind( gameObject ) {\r\n    TextureTintPipeline.prototype.onBind.call( this );\r\n\r\n    const renderer = this.renderer;\r\n    const program = this.program;\r\n\r\n    this.mvpUpdate();\r\n\r\n    renderer.setInt1( program, 'uNormSampler', 1 );\r\n    renderer.setFloat2( program, 'uResolution', this.width, this.height );\r\n\r\n    if ( gameObject ) {\r\n      this.setNormalMap( gameObject );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  onRender( scene, camera ) {\r\n    /**\r\n     * Whether or not the pipeline is active\r\n     * @type {boolean}\r\n     */\r\n    this.active = false;\r\n\r\n    const lightManager = scene.sys.lights;\r\n\r\n    if ( !lightManager || lightManager.lights.length <= 0 ||\r\n      !lightManager.active ) {\r\n      // Passthru\r\n      return this;\r\n    }\r\n\r\n    const lights = lightManager.cull( camera );\r\n    const lightCount = Math.min( lights.length, LIGHT_COUNT );\r\n\r\n    if ( lightCount === 0 ) {\r\n      return this;\r\n    }\r\n\r\n    this.active = true;\r\n\r\n    const renderer = this.renderer;\r\n    const program = this.program;\r\n    const cameraMatrix = camera.matrix;\r\n    const point = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n    const height = renderer.height;\r\n    let index;\r\n\r\n    for ( index = 0; index < LIGHT_COUNT; ++index ) {\r\n      // Reset lights\r\n      renderer.setFloat1( program, 'uLights[' + index + '].radius', 0 );\r\n    }\r\n\r\n    renderer.setFloat4( program, 'uCamera', camera.x, camera.y,\r\n      camera.rotation, camera.zoom );\r\n    renderer.setFloat3( program, 'uAmbientLightColor',\r\n      lightManager.ambientColor.r, lightManager.ambientColor.g,\r\n      lightManager.ambientColor.b );\r\n\r\n    for ( index = 0; index < lightCount; ++index ) {\r\n      const light = lights[ index ];\r\n      const lightName = 'uLights[' + index + '].';\r\n\r\n      cameraMatrix.transformPoint( light.x, light.y, point );\r\n\r\n      renderer.setFloat2( program, lightName + 'position',\r\n        point.x - ( camera.scrollX * light.scrollFactorX * camera.zoom ),\r\n        height - ( point.y - ( camera.scrollY * light.scrollFactorY ) *\r\n        camera.zoom )\r\n      );\r\n      renderer.setFloat3( program, lightName + 'color',\r\n        light.r, light.g, light.b );\r\n      renderer.setFloat1( program, lightName + 'intensity', light.intensity );\r\n      renderer.setFloat1( program, lightName + 'radius', light.radius );\r\n\r\n      if ( light.hWidth && light.hHeight ) {\r\n        renderer.setFloat1( program, lightName + 'hWidth', light.hWidth );\r\n        renderer.setFloat1( program, lightName + 'hHeight', light.hHeight );\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  batchTexture(\r\n    gameObject,\r\n    texture,\r\n    textureWidth, textureHeight,\r\n    srcX, srcY,\r\n    srcWidth, srcHeight,\r\n    scaleX, scaleY,\r\n    rotation,\r\n    flipX, flipY,\r\n    scrollFactorX, scrollFactorY,\r\n    displayOriginX, displayOriginY,\r\n    frameX, frameY, frameWidth, frameHeight,\r\n    tintTL, tintTR, tintBL, tintBR, tintEffect,\r\n    uOffset, vOffset,\r\n    camera,\r\n    parentTransformMatrix\r\n  ) {\r\n    if ( !this.active ) {\r\n      return;\r\n    }\r\n\r\n    this.renderer.setPipeline( this );\r\n\r\n    let normalTexture;\r\n\r\n    if ( gameObject.displayTexture ) {\r\n      normalTexture = gameObject.displayTexture\r\n        .dataSource[ gameObject.displayFrame.sourceIndex ];\r\n    }\r\n    else if ( gameObject.texture ) {\r\n      normalTexture = gameObject.texture\r\n        .dataSource[ gameObject.frame.sourceIndex ];\r\n    }\r\n    else if ( gameObject.tileset ) {\r\n      // NOTE: PATCH HERE\r\n      normalTexture = gameObject.tileset[ 0 ].image.dataSource[ 0 ];\r\n    }\r\n\r\n    if ( !normalTexture ) {\r\n      console.warn( 'Normal map missing or invalid' );\r\n      return;\r\n    }\r\n\r\n    this.setTexture2D( normalTexture.glTexture, 1 );\r\n\r\n    const camMatrix = this._tempMatrix1;\r\n    const spriteMatrix = this._tempMatrix2;\r\n    const calcMatrix = this._tempMatrix3;\r\n\r\n    let u0 = ( frameX / textureWidth ) + uOffset;\r\n    let v0 = ( frameY / textureHeight ) + vOffset;\r\n    let u1 = ( frameX + frameWidth ) / textureWidth + uOffset;\r\n    let v1 = ( frameY + frameHeight ) / textureHeight + vOffset;\r\n\r\n    let width = srcWidth;\r\n    let height = srcHeight;\r\n\r\n    // var x = -displayOriginX + frameX;\r\n    // var y = -displayOriginY + frameY;\r\n\r\n    let x = -displayOriginX;\r\n    let y = -displayOriginY;\r\n\r\n    if ( gameObject.isCropped ) {\r\n      const crop = gameObject._crop;\r\n\r\n      width = crop.width;\r\n      height = crop.height;\r\n\r\n      srcWidth = crop.width;\r\n      srcHeight = crop.height;\r\n\r\n      frameX = crop.x;\r\n      frameY = crop.y;\r\n\r\n      let ox = frameX;\r\n      let oy = frameY;\r\n\r\n      if ( flipX ) {\r\n        ox = ( frameWidth - crop.x - crop.width );\r\n      }\r\n\r\n      if ( flipY && !texture.isRenderTexture ) {\r\n        oy = ( frameHeight - crop.y - crop.height );\r\n      }\r\n\r\n      u0 = ( ox / textureWidth ) + uOffset;\r\n      v0 = ( oy / textureHeight ) + vOffset;\r\n      u1 = ( ox + crop.width ) / textureWidth + uOffset;\r\n      v1 = ( oy + crop.height ) / textureHeight + vOffset;\r\n\r\n      x = -displayOriginX + frameX;\r\n      y = -displayOriginY + frameY;\r\n    }\r\n\r\n    // Invert the flipY if this is a RenderTexture\r\n    flipY = flipY ^ ( texture.isRenderTexture ? 1 : 0 );\r\n\r\n    if ( flipX ) {\r\n      width *= -1;\r\n      x += srcWidth;\r\n    }\r\n\r\n    if ( flipY ) {\r\n      height *= -1;\r\n      y += srcHeight;\r\n    }\r\n\r\n    const xw = x + width;\r\n    const yh = y + height;\r\n\r\n    spriteMatrix.applyITRS( srcX, srcY, rotation, scaleX, scaleY );\r\n\r\n    camMatrix.copyFrom( camera.matrix );\r\n\r\n    if ( parentTransformMatrix ) {\r\n      // Multiply the camera by the parent matrix\r\n      camMatrix.multiplyWithOffset( parentTransformMatrix,\r\n        -camera.scrollX * scrollFactorX, -camera.scrollY * scrollFactorY );\r\n\r\n      // Undo the camera scroll\r\n      spriteMatrix.e = srcX;\r\n      spriteMatrix.f = srcY;\r\n\r\n      // Multiply by the Sprite matrix, store result in calcMatrix\r\n      camMatrix.multiply( spriteMatrix, calcMatrix );\r\n    }\r\n    else {\r\n      spriteMatrix.e -= camera.scrollX * scrollFactorX;\r\n      spriteMatrix.f -= camera.scrollY * scrollFactorY;\r\n\r\n      // Multiply by the Sprite matrix, store result in calcMatrix\r\n      camMatrix.multiply( spriteMatrix, calcMatrix );\r\n    }\r\n\r\n    let tx0 = calcMatrix.getX( x, y );\r\n    let ty0 = calcMatrix.getY( x, y );\r\n\r\n    let tx1 = calcMatrix.getX( x, yh );\r\n    let ty1 = calcMatrix.getY( x, yh );\r\n\r\n    let tx2 = calcMatrix.getX( xw, yh );\r\n    let ty2 = calcMatrix.getY( xw, yh );\r\n\r\n    let tx3 = calcMatrix.getX( xw, y );\r\n    let ty3 = calcMatrix.getY( xw, y );\r\n\r\n    if ( camera.roundPixels ) {\r\n      tx0 |= 0;\r\n      ty0 |= 0;\r\n\r\n      tx1 |= 0;\r\n      ty1 |= 0;\r\n\r\n      tx2 |= 0;\r\n      ty2 |= 0;\r\n\r\n      tx3 |= 0;\r\n      ty3 |= 0;\r\n    }\r\n\r\n    this.setTexture2D( texture, 0 );\r\n\r\n    this.batchQuad( tx0, ty0, tx1, ty1, tx2, ty2, tx3, ty3, u0, v0, u1, v1,\r\n      tintTL, tintTR, tintBL, tintBR, tintEffect );\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/util/LightPipeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 506,
    "kind": "variable",
    "name": "TextureTintPipeline",
    "memberof": "src/util/LightPipeline.js",
    "static": true,
    "longname": "src/util/LightPipeline.js~TextureTintPipeline",
    "access": "public",
    "export": false,
    "importPath": "src/util/LightPipeline",
    "importStyle": null,
    "description": "Constant used to simplify calling the\nPhaser.Renderer.WebGL.Pipelines.TextureTintPipeline class",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 507,
    "kind": "variable",
    "name": "LIGHT_COUNT",
    "memberof": "src/util/LightPipeline.js",
    "static": true,
    "longname": "src/util/LightPipeline.js~LIGHT_COUNT",
    "access": "public",
    "export": false,
    "importPath": "src/util/LightPipeline",
    "importStyle": null,
    "description": "The maximum number of lights allowed to render in a scene",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 508,
    "kind": "class",
    "name": "LightPipeline",
    "memberof": "src/util/LightPipeline.js",
    "static": true,
    "longname": "src/util/LightPipeline.js~LightPipeline",
    "access": "public",
    "export": true,
    "importPath": "src/util/LightPipeline",
    "importStyle": "LightPipeline",
    "description": "Custom light pipeline to fix issues with the current diffuse lighting\npipeline.",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "Phaser~Phaser.Renderer.WebGL.Pipelines.ForwardDiffuseLightPipeline"
    ]
  },
  {
    "__docId__": 509,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util/LightPipeline.js~LightPipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/LightPipeline.js~LightPipeline#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "override": true
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "onBind",
    "memberof": "src/util/LightPipeline.js~LightPipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/LightPipeline.js~LightPipeline#onBind",
    "access": "public",
    "description": "",
    "lineNumber": 92,
    "override": true,
    "params": [
      {
        "name": "gameObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "onRender",
    "memberof": "src/util/LightPipeline.js~LightPipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/LightPipeline.js~LightPipeline#onRender",
    "access": "public",
    "description": "",
    "lineNumber": 113,
    "override": true,
    "params": [
      {
        "name": "scene",
        "types": [
          "*"
        ]
      },
      {
        "name": "camera",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "active",
    "memberof": "src/util/LightPipeline.js~LightPipeline",
    "static": false,
    "longname": "src/util/LightPipeline.js~LightPipeline#active",
    "access": "public",
    "description": "Whether or not the pipeline is active",
    "lineNumber": 118,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "batchTexture",
    "memberof": "src/util/LightPipeline.js~LightPipeline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/LightPipeline.js~LightPipeline#batchTexture",
    "access": "public",
    "description": "",
    "lineNumber": 186,
    "override": true,
    "params": [
      {
        "name": "gameObject",
        "types": [
          "*"
        ]
      },
      {
        "name": "texture",
        "types": [
          "*"
        ]
      },
      {
        "name": "textureWidth",
        "types": [
          "*"
        ]
      },
      {
        "name": "textureHeight",
        "types": [
          "*"
        ]
      },
      {
        "name": "srcX",
        "types": [
          "*"
        ]
      },
      {
        "name": "srcY",
        "types": [
          "*"
        ]
      },
      {
        "name": "srcWidth",
        "types": [
          "*"
        ]
      },
      {
        "name": "srcHeight",
        "types": [
          "*"
        ]
      },
      {
        "name": "scaleX",
        "types": [
          "*"
        ]
      },
      {
        "name": "scaleY",
        "types": [
          "*"
        ]
      },
      {
        "name": "rotation",
        "types": [
          "*"
        ]
      },
      {
        "name": "flipX",
        "types": [
          "*"
        ]
      },
      {
        "name": "flipY",
        "types": [
          "*"
        ]
      },
      {
        "name": "scrollFactorX",
        "types": [
          "*"
        ]
      },
      {
        "name": "scrollFactorY",
        "types": [
          "*"
        ]
      },
      {
        "name": "displayOriginX",
        "types": [
          "*"
        ]
      },
      {
        "name": "displayOriginY",
        "types": [
          "*"
        ]
      },
      {
        "name": "frameX",
        "types": [
          "*"
        ]
      },
      {
        "name": "frameY",
        "types": [
          "*"
        ]
      },
      {
        "name": "frameWidth",
        "types": [
          "*"
        ]
      },
      {
        "name": "frameHeight",
        "types": [
          "*"
        ]
      },
      {
        "name": "tintTL",
        "types": [
          "*"
        ]
      },
      {
        "name": "tintTR",
        "types": [
          "*"
        ]
      },
      {
        "name": "tintBL",
        "types": [
          "*"
        ]
      },
      {
        "name": "tintBR",
        "types": [
          "*"
        ]
      },
      {
        "name": "tintEffect",
        "types": [
          "*"
        ]
      },
      {
        "name": "uOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "vOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "camera",
        "types": [
          "*"
        ]
      },
      {
        "name": "parentTransformMatrix",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 515,
    "kind": "file",
    "name": "src/util/Random.js",
    "content": "import seedrandom from 'seedrandom';\r\n\r\n/**\r\n * A utility class that provides functions for random number generation based on\r\n * a given seed value\r\n */\r\nexport default class Random {\r\n  /**\r\n   * @param {number} seedValue The seed value for RNG\r\n   */\r\n  constructor( seedValue ) {\r\n    /**\r\n     * The random number generator used for this instance\r\n     * @type {function}\r\n     */\r\n    this.rng = seedrandom( seedValue );\r\n  }\r\n\r\n  /**\r\n   * Gets a random integer\r\n   * @param {number} min The minimum value the integer can be\r\n   * @param {number} max The maximum value the integer can be\r\n   * @param {boolean|undefined} even True = Only Even, False = Only Odd,\r\n   *          Undefined = Odd and Even\r\n   * @return {number} A random integer\r\n   */\r\n  randInt( min, max, even = undefined ) {\r\n    if ( even === true ) {\r\n      return this.randEvenInt( min, max );\r\n    }\r\n    else if ( even === false ) {\r\n      return this.randOddInt( min, max );\r\n    }\r\n    return Math.floor( this.rng() * ( max - min + 1 ) + min );\r\n  }\r\n\r\n  /**\r\n   * Gets a random even integer\r\n   * @param {number} min The minimum value the integer can be\r\n   * @param {number} max The maximum value the integer can be\r\n   * @return {number} A random even integer\r\n   */\r\n  randEvenInt( min, max ) {\r\n    if ( min % 2 !== 0 && min < max ) {\r\n      min++;\r\n    }\r\n    if ( max % 2 !== 0 && max > min ) {\r\n      max--;\r\n    }\r\n    const range = ( max - min ) / 2;\r\n    return Math.floor( this.rng() * ( range + 1 ) ) * 2 + min;\r\n  }\r\n\r\n  /**\r\n   * Gets a random odd integer\r\n   * @param {number} min The minimum value the integer can be\r\n   * @param {number} max The maximum value the integer can be\r\n   * @return {number} A random odd integer\r\n   */\r\n  randOddInt( min, max ) {\r\n    if ( min % 2 === 0 ) {\r\n      min++;\r\n    }\r\n    if ( max % 2 === 0 ) {\r\n      max--;\r\n    }\r\n    const range = ( max - min ) / 2;\r\n    return Math.floor( this.rng() * ( range - 1 ) ) * 2 + min;\r\n  }\r\n\r\n  /**\r\n   * Gets a random direction (North, East, South, West)\r\n   * @return {number} A random direction\r\n   */\r\n  randDirection() {\r\n    return this.randInt( 0, 3 );\r\n  }\r\n\r\n  /**\r\n   * Gets a random value in the given array\r\n   * @param {Array} array The array to choose from\r\n   * @return {*} The chosen value of the array\r\n   */\r\n  randPick( array ) {\r\n    return array[ this.randInt( 0, array.length - 1 ) ];\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/jgrzechowiak/Documents/Software/micrungeon/src/util/Random.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 516,
    "kind": "class",
    "name": "Random",
    "memberof": "src/util/Random.js",
    "static": true,
    "longname": "src/util/Random.js~Random",
    "access": "public",
    "export": true,
    "importPath": "src/util/Random",
    "importStyle": "Random",
    "description": "A utility class that provides functions for random number generation based on\na given seed value",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 517,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/Random.js~Random#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seedValue",
        "description": "The seed value for RNG"
      }
    ]
  },
  {
    "__docId__": 518,
    "kind": "member",
    "name": "rng",
    "memberof": "src/util/Random.js~Random",
    "static": false,
    "longname": "src/util/Random.js~Random#rng",
    "access": "public",
    "description": "The random number generator used for this instance",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "randInt",
    "memberof": "src/util/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/Random.js~Random#randInt",
    "access": "public",
    "description": "Gets a random integer",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The minimum value the integer can be"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "The maximum value the integer can be"
      },
      {
        "nullable": null,
        "types": [
          "boolean",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "even",
        "description": "True = Only Even, False = Only Odd,\n         Undefined = Odd and Even"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A random integer"
    }
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "randEvenInt",
    "memberof": "src/util/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/Random.js~Random#randEvenInt",
    "access": "public",
    "description": "Gets a random even integer",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The minimum value the integer can be"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "The maximum value the integer can be"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A random even integer"
    }
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "randOddInt",
    "memberof": "src/util/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/Random.js~Random#randOddInt",
    "access": "public",
    "description": "Gets a random odd integer",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The minimum value the integer can be"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "The maximum value the integer can be"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A random odd integer"
    }
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "randDirection",
    "memberof": "src/util/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/Random.js~Random#randDirection",
    "access": "public",
    "description": "Gets a random direction (North, East, South, West)",
    "lineNumber": 75,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A random direction"
    },
    "params": []
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "randPick",
    "memberof": "src/util/Random.js~Random",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util/Random.js~Random#randPick",
    "access": "public",
    "description": "Gets a random value in the given array",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "The array to choose from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The chosen value of the array"
    }
  },
  {
    "kind": "index",
    "content": "# Micrungeon [![Build Status](https://travis-ci.org/blackjack26/micrungeon.svg?branch=develop)](https://travis-ci.org/blackjack26/micrungeon)\r\n\r\n## Set Up\r\n\r\n### Clone Repository\r\n\r\nNavigate into your workspace directory and run:\r\n\r\n```sh\r\ngit clone https://github.com/blackjack26/micrungeon.git\r\n```\r\n\r\n### Install NodeJS and NPM\r\n\r\nhttps://nodejs.org/en/\r\n\r\n### Install Dependencies\r\n\r\nNavigate to the cloned repo's directory and install dependencies:\r\n\r\n```sh\r\ncd /path/to/micrungeon\r\nnpm install\r\n```\r\n\r\n### Run the Development Server\r\n\r\nThe development server allows you to run the game in a browser. It also provides live-reloading for quicker development when files are changed.\r\n\r\nRun the following command:\r\n\r\n```sh\r\nnpm start\r\n```\r\n\r\nThis should compile the source code to the `dev/` directory and open your browser to `localhost:3000`. If not, open your browser and navigate to `http://localhost:3000`.\r\n\r\n### Build Production Code\r\n\r\nTo optimize and minimize the code for production deployment, run:\r\n\r\n```sh\r\nnpm run deploy\r\n```\r\n\r\nThe output of this command is in the `app/` directory. This command also creates an `.exe` file to install the game as a desktop app. This is located in the `build/dist` directory.\r\n\r\n### Test & Documentation\r\n\r\nTo verify your code run:\r\n\r\n```sh\r\nnpm test\r\n```\r\n\r\nTo generate documentation based on the JSDoc comments, run:\r\n\r\n```sh\r\nnpm run doc\r\n```\r\n\r\n## License\r\n\r\nMicrungeon is released under the [MIT License](https://github.com/blackjack26/micrungeon/blob/develop/LICENSE)\r\n\r\n## Authors\r\n\r\n[Jack Grzechowiak](https://github.com/blackjack26)\r\n\r\n[Phil Kirwin](https://github.com/philkir22)\r\n",
    "longname": "C:\\Users\\jgrzechowiak\\Documents\\Software\\micrungeon\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"micrungeon\",\r\n  \"version\": \"0.1.0\",\r\n  \"description\": \"Phaser 3 hybrid game\",\r\n  \"main\": \"index.js\",\r\n  \"build\": {\r\n    \"appId\": \"com.chaosalpha.micrungeon\",\r\n    \"productName\": \"Micrungeon\",\r\n    \"copyright\": \"Copyright (c) 2018 Chaos Alpha\",\r\n    \"directories\": {\r\n      \"output\": \"build/dist\"\r\n    }\r\n  },\r\n  \"esdoc\": {\r\n    \"source\": \"./src\",\r\n    \"destination\": \"./docs\",\r\n    \"plugins\": [\r\n      {\r\n        \"name\": \"esdoc-standard-plugin\"\r\n      },\r\n      {\r\n        \"name\": \"esdoc-importpath-plugin\",\r\n        \"option\": {\r\n          \"stripPackageName\": true,\r\n          \"replaces\": [\r\n            {\r\n              \"from\": \".js\",\r\n              \"to\": \"\"\r\n            },\r\n            {\r\n              \"from\": \"/index\",\r\n              \"to\": \"\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"scripts\": {\r\n    \"start\": \"webpack --mode=development\",\r\n    \"postinstall\": \"electron-builder install-app-deps\",\r\n    \"pack\": \"electron-builder --dir\",\r\n    \"dist\": \"electron-builder\",\r\n    \"deploy\": \"webpack --mode=production --config webpack.production.config.js && npm run dist\",\r\n    \"deploy-pack\": \"webpack --mode=production --config webpack.production.config.js && npm run pack\",\r\n    \"test\": \"eslint ./src/**/**.js\",\r\n    \"doc\": \"esdoc\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/blackjack26/micrungeon.git\"\r\n  },\r\n  \"keywords\": [\r\n    \"phaser\"\r\n  ],\r\n  \"author\": \"Jack Grzechowiak\",\r\n  \"license\": \"MIT\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/blackjack26/micrungeon/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/blackjack26/micrungeon#readme\",\r\n  \"dependencies\": {\r\n    \"phaser\": \"^3.15.1\",\r\n    \"seedrandom\": \"^2.4.4\",\r\n    \"webfontloader\": \"^1.6.28\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.1.2\",\r\n    \"@babel/preset-env\": \"^7.1.0\",\r\n    \"babel-eslint\": \"^10.0.1\",\r\n    \"babel-loader\": \"^8.0.4\",\r\n    \"browser-sync\": \"^2.26.3\",\r\n    \"browser-sync-webpack-plugin\": \"^2.2.2\",\r\n    \"clean-webpack-plugin\": \"^0.1.19\",\r\n    \"copy-webpack-plugin\": \"^4.6.0\",\r\n    \"electron\": \"^3.0.12\",\r\n    \"electron-builder\": \"^20.38.3\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-importpath-plugin\": \"^1.0.2\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"eslint\": \"^5.8.0\",\r\n    \"eslint-config-google\": \"^0.11.0\",\r\n    \"eslint-plugin-import\": \"^2.14.0\",\r\n    \"html-webpack-plugin\": \"^3.2.0\",\r\n    \"raw-loader\": \"^0.5.1\",\r\n    \"webpack\": \"^4.23.1\",\r\n    \"webpack-cli\": \"^3.1.2\",\r\n    \"webpack-dev-server\": \"^3.1.10\"\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\jgrzechowiak\\Documents\\Software\\micrungeon\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]